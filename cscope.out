cscope 15 $HOME/Learning/MIT_OSE/xv6 -q 0000001069 0000154424
	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

16 
	#STA_X
 0x8

17 
	#STA_E
 0x4

18 
	#STA_C
 0x4

19 
	#STA_W
 0x2

20 
	#STA_R
 0x2

21 
	#STA_A
 0x1

	@bio.c

23 
	~"ty≥s.h
"

24 
	~"defs.h
"

25 
	~"∑øm.h
"

26 
	~"•ölock.h
"

27 
	~"buf.h
"

31 
•ölock
 
	mlock
;

32 
buf
 
	mbuf
[
NBUF
];

36 
buf
 
	mhód
;

37 } 
	gbˇche
;

40 
	$böô
 ()

42 
buf
 *
b
;

44 
	`öôlock
 (&
bˇche
.
lock
, "bcache");

48 
bˇche
.
hód
.
¥ev
 = &bcache.head;

49 
bˇche
.
hód
.
√xt
 = &bcache.head;

50 
b
 = 
bˇche
.
buf
; b < bˇche.bu‡+ 
NBUF
; b++)

52 
b
->
√xt
 = 
bˇche
.
hód
.next;

53 
b
->
¥ev
 = &
bˇche
.
hód
;

54 
b
->
dev
 = -1;

55 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

56 
bˇche
.
hód
.
√xt
 = 
b
;

58 
	}
}

63 
buf
 *

64 
	$bgë
 (
uöt
 
dev
, uöà
£˘‹
)

66 
buf
 *
b
;

68 
	`acquúe
 (&
bˇche
.
lock
);

70 
lo›
:

72 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next)

74 i‡(
b
->
dev
 =dev && b->
£˘‹
 == sector)

76 i‡(!(
b
->
Êags
 & 
B_BUSY
))

78 
b
->
Êags
 |
B_BUSY
;

79 
	`ªÀa£
 (&
bˇche
.
lock
);

80  
b
;

82 
	`¶ìp
 (
b
, &
bˇche
.
lock
);

83 
lo›
;

88 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev)

90 i‡((
b
->
Êags
 & 
B_BUSY
Ë=0 && (b->Êag†& 
B_DIRTY
) == 0)

92 
b
->
dev
 = dev;

93 
b
->
£˘‹
 = sector;

94 
b
->
Êags
 = 
B_BUSY
;

95 
	`ªÀa£
 (&
bˇche
.
lock
);

96  
b
;

99 
	`∑nic
 ("bget:Ço buffers");

100 
	}
}

103 
buf
 *

104 
	$bªad
 (
uöt
 
dev
, uöà
£˘‹
)

106 
buf
 *
b
;

108 
b
 = 
	`bgë
 (
dev
, 
£˘‹
);

109 i‡(!(
b
->
Êags
 & 
B_VALID
))

110 
	`idîw
 (
b
);

111  
b
;

112 
	}
}

116 
	$bwrôe
 (
buf
 *
b
)

118 i‡((
b
->
Êags
 & 
B_BUSY
) == 0)

119 
	`∑nic
 ("bwrite");

120 
b
->
Êags
 |
B_DIRTY
;

121 
	`idîw
 (
b
);

122 
	}
}

127 
	$bªl£
 (
buf
 *
b
)

129 i‡((
b
->
Êags
 & 
B_BUSY
) == 0)

130 
	`∑nic
 ("brelse");

132 
	`acquúe
 (&
bˇche
.
lock
);

134 
b
->
√xt
->
¥ev
 = b->prev;

135 
b
->
¥ev
->
√xt
 = b->next;

136 
b
->
√xt
 = 
bˇche
.
hód
.next;

137 
b
->
¥ev
 = &
bˇche
.
hód
;

138 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

139 
bˇche
.
hód
.
√xt
 = 
b
;

141 
b
->
Êags
 &~
B_BUSY
;

142 
	`wakeup
 (
b
);

144 
	`ªÀa£
 (&
bˇche
.
lock
);

145 
	}
}

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

11 
	~"memœyout.h
"

13 
	#SECTSIZE
 512

	)

15 
ªad£g
 (
uch¨
 *, 
uöt
, uint);

18 
	$boŸmaö
 ()

20 
ñfhdr
 *
ñf
;

21 
¥oghdr
 *
ph
, *
ïh
;

22 (*
íåy
) ();

23 
uch¨
 *
∑
;

25 
ñf
 = (
ñfhdr
 *) 0x10000;

28 
	`ªad£g
 ((
uch¨
 *Ë
ñf
, 4096, 0);

31 i‡(
ñf
->
magic
 !
ELF_MAGIC
)

35 
ph
 = (
¥oghdr
 *Ë((
uch¨
 *Ë
ñf
 +Élf->
phoff
);

36 
ïh
 = 
ph
 + 
ñf
->
phnum
;

37 ; 
ph
 < 
ïh
;Öh++)

39 
∑
 = (
uch¨
 *Ë
ph
->
∑ddr
;

40 
	`ªad£g
 (
∑
, 
ph
->
fûesz
,Öh->
off
);

41 i‡(
ph
->
memsz
 >Öh->
fûesz
)

42 
	`°osb
 (
∑
 + 
ph
->
fûesz
, 0,Öh->
memsz
 -Öh->filesz);

47 
íåy
 = ((*)()Ë(
ñf
->entry);

48 
	`íåy
 ();

49 
	}
}

52 
	$waôdisk
 ()

55 (
	`öb
 (0x1F7) & 0xC0) != 0x40)

57 
	}
}

61 
	$ªad£˘
 (*
d°
, 
uöt
 
off£t
)

64 
	`waôdisk
 ();

65 
	`outb
 (0x1F2, 1);

66 
	`outb
 (0x1F3, 
off£t
);

67 
	`outb
 (0x1F4, 
off£t
 >> 8);

68 
	`outb
 (0x1F5, 
off£t
 >> 16);

69 
	`outb
 (0x1F6, (
off£t
 >> 24) | 0xE0);

70 
	`outb
 (0x1F7, 0x20);

73 
	`waôdisk
 ();

74 
	`ö¶
 (0x1F0, 
d°
, 
SECTSIZE
 / 4);

75 
	}
}

80 
	$ªad£g
 (
uch¨
 * 
∑
, 
uöt
 
cou¡
, uöà
off£t
)

82 
uch¨
 *
ïa
;

84 
ïa
 = 
∑
 + 
cou¡
;

87 
∑
 -
off£t
 % 
SECTSIZE
;

90 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

95 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
++)

96 
	`ªad£˘
 (
∑
, 
off£t
);

97 
	}
}

	@buf.h

1 
	sbuf


3 
	mÊags
;

4 
uöt
 
	mdev
;

5 
uöt
 
	m£˘‹
;

6 
buf
 *
	m¥ev
;

7 
buf
 *
	m√xt
;

8 
buf
 *
	mq√xt
;

9 
uch¨
 
	md©a
[512];

11 
	#B_BUSY
 0x1

12 
	#B_VALID
 0x2

13 
	#B_DIRTY
 0x4

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
 (
fd
)

10 
n
;

12 (
n
 = 
	`ªad
 (
fd
, 
buf
,  (buf))) > 0)

13 
	`wrôe
 (1, 
buf
, 
n
);

14 i‡(
n
 < 0)

16 
	`¥ötf
 (1, "cat:ÑeadÉrror\n");

17 
	`exô
 ();

19 
	}
}

22 
	$maö
 (
¨gc
, *
¨gv
[])

24 
fd
, 
i
;

26 i‡(
¨gc
 <= 1)

28 
	`ˇt
 (0);

29 
	`exô
 ();

32 
i
 = 1; i < 
¨gc
; i++)

34 i‡((
fd
 = 
	`›í
 (
¨gv
[
i
], 0)) < 0)

36 
	`¥ötf
 (1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

37 
	`exô
 ();

39 
	`ˇt
 (
fd
);

40 
	`˛o£
 (
fd
);

42 
	`exô
 ();

43 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"fs.h
"

11 
	~"fûe.h
"

12 
	~"memœyout.h
"

13 
	~"mmu.h
"

14 
	~"¥oc.h
"

15 
	~"x86.h
"

17 
c⁄•utc
 ();

19 
	g∑nicked
 = 0;

23 
•ölock
 
	mlock
;

24 
	mlockög
;

25 } 
	gc⁄s
;

28 
	$¥ötöt
 (
xx
, 
ba£
, 
sign
)

30 
digôs
[] = "0123456789abcdef";

31 
buf
[16];

32 
i
;

33 
uöt
 
x
;

35 i‡(
sign
 && (sig¿
xx
 < 0))

36 
x
 = -
xx
;

38 
x
 = 
xx
;

40 
i
 = 0;

43 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

45 (
x
 /
ba£
) != 0);

47 i‡(
sign
)

48 
buf
[
i
++] = '-';

50 --
i
 >= 0)

51 
	`c⁄•utc
 (
buf
[
i
]);

52 
	}
}

58 
	$˝rötf
 (*
fmt
, ...)

60 
i
, 
c
, 
lockög
;

61 
uöt
 *
¨gp
;

62 *
s
;

64 
lockög
 = 
c⁄s
.locking;

65 i‡(
lockög
)

66 
	`acquúe
 (&
c⁄s
.
lock
);

68 i‡(
fmt
 == 0)

69 
	`∑nic
 ("null fmt");

71 
¨gp
 = (
uöt
 *Ë(*Ë(&
fmt
 + 1);

72 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++)

74 i‡(
c
 != '%')

76 
	`c⁄•utc
 (
c
);

79 
c
 = 
fmt
[++
i
] & 0xff;

80 i‡(
c
 == 0)

82 
c
)

85 
	`¥ötöt
 (*
¨gp
++, 10, 1);

89 
	`¥ötöt
 (*
¨gp
++, 16, 0);

92 i‡((
s
 = (*Ë*
¨gp
++) == 0)

93 
s
 = "(null)";

94 ; *
s
; s++)

95 
	`c⁄•utc
 (*
s
);

98 
	`c⁄•utc
 ('%');

102 
	`c⁄•utc
 ('%');

103 
	`c⁄•utc
 (
c
);

108 i‡(
lockög
)

109 
	`ªÀa£
 (&
c⁄s
.
lock
);

110 
	}
}

113 
	$∑nic
 (*
s
)

115 
i
;

116 
uöt
 
pcs
[10];

118 
	`˛i
 ();

119 
c⁄s
.
lockög
 = 0;

120 
	`˝rötf
 ("˝u%d:Ö™ic: ", 
˝u
->
id
);

121 
	`˝rötf
 (
s
);

122 
	`˝rötf
 ("\n");

123 
	`gëˇŒîpcs
 (&
s
, 
pcs
);

124 
i
 = 0; i < 10; i++)

125 
	`˝rötf
 (" %p", 
pcs
[
i
]);

126 
∑nicked
 = 1;

129 
	}
}

132 
	#BACKSPACE
 0x100

	)

133 
	#CRTPORT
 0x3d4

	)

134 
ush‹t
 *
	g¸t
 = (ush‹à*Ë
P2V
 (0xb8000);

137 
	$cg≠utc
 (
c
)

139 
pos
;

142 
	`outb
 (
CRTPORT
, 14);

143 
pos
 = 
	`öb
 (
CRTPORT
 + 1) << 8;

144 
	`outb
 (
CRTPORT
, 15);

145 
pos
 |
	`öb
 (
CRTPORT
 + 1);

147 i‡(
c
 == '\n')

148 
pos
 += 80 -Öos % 80;

149 i‡(
c
 =
BACKSPACE
)

151 i‡(
pos
 > 0)

152 --
pos
;

155 
¸t
[
pos
++] = (
c
 & 0xff) | 0x0700;

157 i‡((
pos
 / 80) >= 24)

159 
	`memmove
 (
¸t
, crt + 80,  (crt[0]) * 23 * 80);

160 
pos
 -= 80;

161 
	`mem£t
 (
¸t
 + 
pos
, 0,  (crt[0]) * (24 * 80 -Öos));

164 
	`outb
 (
CRTPORT
, 14);

165 
	`outb
 (
CRTPORT
 + 1, 
pos
 >> 8);

166 
	`outb
 (
CRTPORT
, 15);

167 
	`outb
 (
CRTPORT
 + 1, 
pos
);

168 
¸t
[
pos
] = ' ' | 0x0700;

169 
	}
}

172 
	$c⁄•utc
 (
c
)

174 i‡(
∑nicked
)

176 
	`˛i
 ();

181 i‡(
c
 =
BACKSPACE
)

183 
	`u¨çutc
 ('\b');

184 
	`u¨çutc
 (' ');

185 
	`u¨çutc
 ('\b');

188 
	`u¨çutc
 (
c
);

189 
	`cg≠utc
 (
c
);

190 
	}
}

192 
	#INPUT_BUF
 128

	)

195 
•ölock
 
	mlock
;

196 
	mbuf
[
INPUT_BUF
];

197 
uöt
 
	mr
;

198 
uöt
 
	mw
;

199 
uöt
 
	me
;

200 } 
	göput
;

202 
	#C
(
x
) ((x)-'@')

203 

	)

205 
c⁄sﬁeöå
 ((*
gëc
) ())

207 
c
;

209 
	`acquúe
 (&
öput
.
lock
);

210 (
c
 = 
	`gëc
 ()) >= 0)

212 
c
)

214 
	`C
 ('P'):

215 
	`¥ocdump
 ();

217 
	`C
 ('U'):

218 
öput
.
e
 !öput.
w
 &&

219 
öput
.
buf
[(öput.
e
 - 1Ë% 
INPUT_BUF
] != '\n')

221 
öput
.
e
--;

222 
	`c⁄•utc
 (
BACKSPACE
);

225 
	`C
 ('H'):

227 i‡(
öput
.
e
 !öput.
w
)

229 
öput
.
e
--;

230 
	`c⁄•utc
 (
BACKSPACE
);

234 i‡(
c
 !0 && 
öput
.
e
 - i≈ut.
r
 < 
INPUT_BUF
)

236 
c
 = (c == '\r') ? '\n' : c;

237 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

238 
	`c⁄•utc
 (
c
);

239 i‡(
c
 ='\n' || c =
	`C
 ('D')

240 || 
öput
.
e
 =öput.
r
 + 
INPUT_BUF
)

242 
öput
.
w
 = i≈ut.
e
;

243 
	`wakeup
 (&
öput
.
r
);

249 
	`ªÀa£
 (&
öput
.
lock
);

250 
	}
}

253 
	$c⁄sﬁîód
 (
öode
 *
ù
, *
d°
, 
n
)

255 
uöt
 
èrgë
;

256 
c
;

258 
	`iu∆ock
 (
ù
);

259 
èrgë
 = 
n
;

260 
	`acquúe
 (&
öput
.
lock
);

261 
n
 > 0)

263 
öput
.
r
 =öput.
w
)

265 i‡(
¥oc
->
kûÀd
)

267 
	`ªÀa£
 (&
öput
.
lock
);

268 
	`ûock
 (
ù
);

271 
	`¶ìp
 (&
öput
.
r
, &öput.
lock
);

273 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

274 i‡(
c
 =
	`C
 ('D'))

276 i‡(
n
 < 
èrgë
)

280 
öput
.
r
--;

284 *
d°
++ = 
c
;

285 --
n
;

286 i‡(
c
 == '\n')

289 
	`ªÀa£
 (&
öput
.
lock
);

290 
	`ûock
 (
ù
);

292  
èrgë
 - 
n
;

293 
	}
}

296 
	$c⁄sﬁewrôe
 (
öode
 *
ù
, *
buf
, 
n
)

298 
i
;

300 
	`iu∆ock
 (
ù
);

301 
	`acquúe
 (&
c⁄s
.
lock
);

302 
i
 = 0; i < 
n
; i++)

303 
	`c⁄•utc
 (
buf
[
i
] & 0xff);

304 
	`ªÀa£
 (&
c⁄s
.
lock
);

305 
	`ûock
 (
ù
);

307  
n
;

308 
	}
}

311 
	$c⁄sﬁeöô
 ()

313 
	`öôlock
 (&
c⁄s
.
lock
, "console");

314 
	`öôlock
 (&
öput
.
lock
, "input");

316 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

317 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

318 
c⁄s
.
lockög
 = 1;

320 
	`pi˚«bÀ
 (
IRQ_KBD
);

321 
	`iﬂpi˚«bÀ
 (
IRQ_KBD
, 0);

322 
	}
}

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g°©
;

9 
	gsu≥rblock
;

12 
böô
 ();

13 
buf
 *
bªad
 (
uöt
, uint);

14 
bªl£
 (
buf
 *);

15 
bwrôe
 (
buf
 *);

18 
c⁄sﬁeöô
 ();

19 
˝rötf
 (*, ...);

20 
c⁄sﬁeöå
 ((*)());

21 
	$∑nic
 (*Ë
	`__©åibuã__
 ((
n‹ëu∫
));

24 
	`exec
 (*, **);

27 
fûe
 *
	`fûóŒoc
 ();

28 
	`fûe˛o£
 (
fûe
 *);

29 
fûe
 *
	`fûedup
 (file *);

30 
	`fûeöô
 ();

31 
	`fûîód
 (
fûe
 *, *, 
n
);

32 
	`fûe°©
 (
fûe
 *, 
°©
 *);

33 
	`fûewrôe
 (
fûe
 *, *, 
n
);

36 
	`ªadsb
 (
dev
, 
su≥rblock
 *
sb
);

37 
	`dúlök
 (
öode
 *, *, 
uöt
);

38 
öode
 *
	`dúlookup
 (öodê*, *, 
uöt
 *);

39 
öode
 *
	`üŒoc
 (
uöt
, );

40 
öode
 *
	`idup
 (inode *);

41 
	`iöô
 ();

42 
	`ûock
 (
öode
 *);

43 
	`ùut
 (
öode
 *);

44 
	`iu∆ock
 (
öode
 *);

45 
	`iu∆ockput
 (
öode
 *);

46 
	`iupd©e
 (
öode
 *);

47 
	`«mecmp
 (const *, const *);

48 
öode
 *
	`«mei
 (*);

49 
öode
 *
	`«meù¨ít
 (*, *);

50 
	`ªadi
 (
öode
 *, *, 
uöt
, uint);

51 
	`°©i
 (
öode
 *, 
°©
 *);

52 
	`wrôei
 (
öode
 *, *, 
uöt
, uint);

55 
	`ideöô
 ();

56 
	`ideöå
 ();

57 
	`idîw
 (
buf
 *);

60 
	`iﬂpi˚«bÀ
 (
úq
, 
˝u
);

61 
uch¨
 
iﬂpicid
;

62 
	`iﬂpicöô
 ();

65 *
	`kÆloc
 ();

66 
	`k‰ì
 (*);

67 
	`köô1
 (*, *);

68 
	`köô2
 (*, *);

71 
	`kbdöå
 ();

74 
	`˝unum
 ();

75 vﬁ©ûê
uöt
 *
œpic
;

76 
	`œpi˚oi
 ();

77 
	`œpicöô
 ();

78 
	`œpic°¨èp
 (
uch¨
, 
uöt
);

79 
	`mi¸odñay
 ();

82 
	`öôlog
 ();

83 
	`log_wrôe
 (
buf
 *);

84 
	`begö_å™s
 ();

85 
	`commô_å™s
 ();

88 
ismp
;

89 
	`mpb˝u
 ();

90 
	`mpöô
 ();

91 
	`mp°¨âhem
 ();

94 
	`pi˚«bÀ
 ();

95 
	`picöô
 ();

98 
	`pùóŒoc
 (
fûe
 **, file **);

99 
	`pùe˛o£
 (
pùe
 *, );

100 
	`pùîód
 (
pùe
 *, *, );

101 
	`pùewrôe
 (
pùe
 *, *, );

105 
¥oc
 *
	`c›y¥oc
 (proc *);

106 
	`exô
 ();

107 
	`f‹k
 ();

108 
	`grow¥oc
 ();

109 
	`kûl
 ();

110 
	`pöô
 ();

111 
	`¥ocdump
 ();

112 
	$scheduÀr
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
));

113 
	`sched
 ();

114 
	`¶ìp
 (*, 
•ölock
 *);

115 
	`u£röô
 ();

116 
	`waô
 ();

117 
	`wakeup
 (*);

118 
	`yõld
 ();

121 
	`swtch
 (
c⁄ãxt
 **, context *);

124 
	`acquúe
 (
•ölock
 *);

125 
	`gëˇŒîpcs
 (*, 
uöt
 *);

126 
	`hﬁdög
 (
•ölock
 *);

127 
	`öôlock
 (
•ölock
 *, *);

128 
	`ªÀa£
 (
•ölock
 *);

129 
	`push˛i
 ();

130 
	`p›˛i
 ();

133 
	`memcmp
 (c⁄° *, c⁄° *, 
uöt
);

134 *
	`memmove
 (*, c⁄° *, 
uöt
);

135 *
	`mem£t
 (*, , 
uöt
);

136 *
	`ß„°r˝y
 (*, const *, );

137 
	`°æí
 (const *);

138 
	`°∫cmp
 (c⁄° *, c⁄° *, 
uöt
);

139 *
	`°∫˝y
 (*, const *, );

142 
	`¨göt
 (, *);

143 
	`¨g±r
 (, **, );

144 
	`¨g°r
 (, **);

145 
	`„tchöt
 (
uöt
, *);

146 
	`„tch°r
 (
uöt
, **);

147 
	`sysˇŒ
 ();

150 
	`timîöô
 ();

153 
	`idtöô
 ();

154 
uöt
 
ticks
;

155 
	`tvöô
 ();

156 
•ölock
 
tick¶ock
;

159 
	`u¨töô
 ();

160 
	`u¨töå
 ();

161 
	`u¨çutc
 ();

164 
	`£göô
 ();

165 
	`kvmÆloc
 ();

166 
	`vmíabÀ
 ();

167 
pde_t
 *
	`£tupkvm
 ();

168 *
	`uva2ka
 (
pde_t
 *, *);

169 
	`Ælocuvm
 (
pde_t
 *, 
uöt
, uint);

170 
	`dóŒocuvm
 (
pde_t
 *, 
uöt
, uint);

171 
	`‰ìvm
 (
pde_t
 *);

172 
	`öôuvm
 (
pde_t
 *, *, 
uöt
);

173 
	`lﬂduvm
 (
pde_t
 *, *, 
öode
 *, 
uöt
, uint);

174 
pde_t
 *
	`c›yuvm
 (pde_à*, 
uöt
);

175 
	`swôchuvm
 (
¥oc
 *);

176 
	`swôchkvm
 ();

177 
	`c›yout
 (
pde_t
 *, 
uöt
, *, uint);

178 
	`˛óΩãu
 (
pde_t
 * 
pgdú
, *
uva
);

181 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
 (
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
 (1, "%s%s", 
¨gv
[
i
], i + 1 < 
¨gc
 ? " " : "\n");

12 
	`exô
 ();

13 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr


8 
uöt
 
	mmagic
;

9 
uch¨
 
	mñf
[12];

10 
ush‹t
 
	mty≥
;

11 
ush‹t
 
	mmachöe
;

12 
uöt
 
	mvîsi⁄
;

13 
uöt
 
	míåy
;

14 
uöt
 
	mphoff
;

15 
uöt
 
	mshoff
;

16 
uöt
 
	mÊags
;

17 
ush‹t
 
	mehsize
;

18 
ush‹t
 
	mphítsize
;

19 
ush‹t
 
	mphnum
;

20 
ush‹t
 
	mshítsize
;

21 
ush‹t
 
	mshnum
;

22 
ush‹t
 
	msh°∫dx
;

26 
	s¥oghdr


28 
uöt
 
	mty≥
;

29 
uöt
 
	moff
;

30 
uöt
 
	mvaddr
;

31 
uöt
 
	m∑ddr
;

32 
uöt
 
	mfûesz
;

33 
uöt
 
	mmemsz
;

34 
uöt
 
	mÊags
;

35 
uöt
 
	mÆign
;

39 
	#ELF_PROG_LOAD
 1

	)

42 
	#ELF_PROG_FLAG_EXEC
 1

	)

43 
	#ELF_PROG_FLAG_WRITE
 2

	)

44 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"defs.h
"

7 
	~"x86.h
"

8 
	~"ñf.h
"

11 
	$exec
 (*
∑th
, **
¨gv
)

13 *
s
, *
œ°
;

14 
i
, 
off
;

15 
uöt
 
¨gc
, 
sz
, 
•
, 
u°ack
[3 + 
MAXARG
 + 1];

16 
ñfhdr
 
ñf
;

17 
öode
 *
ù
;

18 
¥oghdr
 
ph
;

19 
pde_t
 *
pgdú
, *
ﬁdpgdú
;

21 i‡((
ù
 = 
	`«mei
 (
∑th
)) == 0)

23 
	`ûock
 (
ù
);

24 
pgdú
 = 0;

27 i‡(
	`ªadi
 (
ù
, (*Ë&
ñf
, 0,  (elf)) <  (elf))

28 
bad
;

29 i‡(
ñf
.
magic
 !
ELF_MAGIC
)

30 
bad
;

32 i‡((
pgdú
 = 
	`£tupkvm
 (
kÆloc
)) == 0)

33 
bad
;

36 
sz
 = 0;

37 
i
 = 0, 
off
 = 
ñf
.
phoff
; i <Élf.
phnum
; i++, of‡+ (
ph
))

39 i‡(
	`ªadi
 (
ù
, (*Ë&
ph
, 
off
,  (ph)) !=  (ph))

40 
bad
;

41 i‡(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

43 i‡(
ph
.
memsz
 <Öh.
fûesz
)

44 
bad
;

45 i‡((
sz
 = 
	`Ælocuvm
 (
pgdú
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

46 
bad
;

47 i‡(
	`lﬂduvm
 (
pgdú
, (*Ë
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

48 
bad
;

50 
	`iu∆ockput
 (
ù
);

51 
ù
 = 0;

55 
sz
 = 
	`PGROUNDUP
 (sz);

56 i‡((
sz
 = 
	`Ælocuvm
 (
pgdú
, sz, sz + 2 * 
PGSIZE
)) == 0)

57 
bad
;

58 
	`˛óΩãu
 (
pgdú
, (*Ë(
sz
 - 2 * 
PGSIZE
));

59 
•
 = 
sz
;

62 
¨gc
 = 0; 
¨gv
[argc];árgc++)

64 i‡(
¨gc
 >
MAXARG
)

65 
bad
;

66 
•
 = (• - (
	`°æí
 (
¨gv
[
¨gc
]) + 1)) & ~3;

67 i‡(
	`c›yout
 (
pgdú
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
 (argv[argc]) + 1) < 0)

68 
bad
;

69 
u°ack
[3 + 
¨gc
] = 
•
;

71 
u°ack
[3 + 
¨gc
] = 0;

73 
u°ack
[0] = 0xffffffff;

74 
u°ack
[1] = 
¨gc
;

75 
u°ack
[2] = 
•
 - (
¨gc
 + 1) * 4;

77 
•
 -(3 + 
¨gc
 + 1) * 4;

78 i‡(
	`c›yout
 (
pgdú
, 
•
, 
u°ack
, (3 + 
¨gc
 + 1) * 4) < 0)

79 
bad
;

82 
œ°
 = 
s
 = 
∑th
; *s; s++)

83 i‡(*
s
 == '/')

84 
œ°
 = 
s
 + 1;

85 
	`ß„°r˝y
 (
¥oc
->
«me
, 
œ°
,  (proc->name));

88 
ﬁdpgdú
 = 
¥oc
->
pgdú
;

89 
¥oc
->
pgdú
 =Ögdir;

90 
¥oc
->
sz
 = sz;

91 
¥oc
->
tf
->
eù
 = 
ñf
.
íåy
;

92 
¥oc
->
tf
->
e•
 = 
•
;

93 
	`swôchuvm
 (
¥oc
);

94 
	`‰ìvm
 (
ﬁdpgdú
);

97 
bad
:

98 i‡(
pgdú
)

99 
	`‰ìvm
 (
pgdú
);

100 i‡(
ù
)

101 
	`iu∆ockput
 (
ù
);

103 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"•ölock.h
"

12 
devsw
 
	gdevsw
[
NDEV
];

15 
•ölock
 
	mlock
;

16 
fûe
 
	mfûe
[
NFILE
];

17 } 
	g·abÀ
;

20 
	$fûeöô
 ()

22 
	`öôlock
 (&
·abÀ
.
lock
, "ftable");

23 
	}
}

26 
fûe
 *

27 
	$fûóŒoc
 ()

29 
fûe
 *
f
;

31 
	`acquúe
 (&
·abÀ
.
lock
);

32 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++)

34 i‡(
f
->
ªf
 == 0)

36 
f
->
ªf
 = 1;

37 
	`ªÀa£
 (&
·abÀ
.
lock
);

38  
f
;

41 
	`ªÀa£
 (&
·abÀ
.
lock
);

43 
	}
}

46 
fûe
 *

47 
	$fûedup
 (
fûe
 *
f
)

49 
	`acquúe
 (&
·abÀ
.
lock
);

50 i‡(
f
->
ªf
 < 1)

51 
	`∑nic
 ("filedup");

52 
f
->
ªf
++;

53 
	`ªÀa£
 (&
·abÀ
.
lock
);

54  
f
;

55 
	}
}

59 
	$fûe˛o£
 (
fûe
 *
f
)

61 
fûe
 
ff
;

63 
	`acquúe
 (&
·abÀ
.
lock
);

64 i‡(
f
->
ªf
 < 1)

65 
	`∑nic
 ("fileclose");

66 i‡(--
f
->
ªf
 > 0)

68 
	`ªÀa£
 (&
·abÀ
.
lock
);

71 
ff
 = *
f
;

72 
f
->
ªf
 = 0;

73 
f
->
ty≥
 = 
FD_NONE
;

74 
	`ªÀa£
 (&
·abÀ
.
lock
);

76 i‡(
ff
.
ty≥
 =
FD_PIPE
)

77 
	`pùe˛o£
 (
ff
.
pùe
, ff.
wrôabÀ
);

78 i‡(
ff
.
ty≥
 =
FD_INODE
)

80 
	`begö_å™s
 ();

81 
	`ùut
 (
ff
.
ù
);

82 
	`commô_å™s
 ();

84 
	}
}

88 
	$fûe°©
 (
fûe
 *
f
, 
°©
 *
°
)

90 i‡(
f
->
ty≥
 =
FD_INODE
)

92 
	`ûock
 (
f
->
ù
);

93 
	`°©i
 (
f
->
ù
, 
°
);

94 
	`iu∆ock
 (
f
->
ù
);

98 
	}
}

102 
	$fûîód
 (
fûe
 *
f
, *
addr
, 
n
)

104 
r
;

106 i‡(
f
->
ªadabÀ
 == 0)

108 i‡(
f
->
ty≥
 =
FD_PIPE
)

109  
	`pùîód
 (
f
->
pùe
, 
addr
, 
n
);

110 i‡(
f
->
ty≥
 =
FD_INODE
)

112 
	`ûock
 (
f
->
ù
);

113 i‡((
r
 = 
	`ªadi
 (
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

114 
f
->
off
 +
r
;

115 
	`iu∆ock
 (
f
->
ù
);

116  
r
;

118 
	`∑nic
 ("fileread");

119 
	}
}

124 
	$fûewrôe
 (
fûe
 *
f
, *
addr
, 
n
)

126 
r
;

128 i‡(
f
->
wrôabÀ
 == 0)

130 i‡(
f
->
ty≥
 =
FD_PIPE
)

131  
	`pùewrôe
 (
f
->
pùe
, 
addr
, 
n
);

132 i‡(
f
->
ty≥
 =
FD_INODE
)

140 
max
 = ((
LOGSIZE
 - 1 - 1 - 2) / 2) * 512;

141 
i
 = 0;

142 
i
 < 
n
)

144 
n1
 = 
n
 - 
i
;

145 i‡(
n1
 > 
max
)

146 
n1
 = 
max
;

148 
	`begö_å™s
 ();

149 
	`ûock
 (
f
->
ù
);

150 i‡((
r
 = 
	`wrôei
 (
f
->
ù
, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

151 
f
->
off
 +
r
;

152 
	`iu∆ock
 (
f
->
ù
);

153 
	`commô_å™s
 ();

155 i‡(
r
 < 0)

157 i‡(
r
 !
n1
)

158 
	`∑nic
 ("short filewrite");

159 
i
 +
r
;

161  
i
 =
n
 ?Ç : -1;

163 
	`∑nic
 ("filewrite");

164 
	}
}

	@file.h

1 
	sfûe


4 { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

5 
	mªf
;

6 
	mªadabÀ
;

7 
	mwrôabÀ
;

8 
pùe
 *
	mpùe
;

9 
öode
 *
	mù
;

10 
uöt
 
	moff
;

15 
	söode


17 
uöt
 
	mdev
;

18 
uöt
 
	möum
;

19 
	mªf
;

20 
	mÊags
;

22 
	mty≥
;

23 
	mmaj‹
;

24 
	mmö‹
;

25 
	m∆ök
;

26 
uöt
 
	msize
;

27 
uöt
 
	maddrs
[
NDIRECT
 + 1];

29 
	#I_BUSY
 0x1

	)

30 
	#I_VALID
 0x2

	)

34 
	sdevsw


36 (*
	mªad
Ë(
	möode
 *, *, );

37 (*
	mwrôe
Ë(
	möode
 *, *, );

40 
devsw
 devsw[];

42 
	#CONSOLE
 1

	)

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

8 
	#N
 1000

	)

11 
	$¥ötf
 (
fd
, *
s
, ...)

13 
	`wrôe
 (
fd
, 
s
, 
	`°æí
 (s));

14 
	}
}

17 
	$f‹kã°
 ()

19 
n
, 
pid
;

21 
	`¥ötf
 (1, "forkÅest\n");

23 
n
 = 0;Ç < 
N
;Ç++)

25 
pid
 = 
	`f‹k
 ();

26 i‡(
pid
 < 0)

28 i‡(
pid
 == 0)

29 
	`exô
 ();

32 i‡(
n
 =
N
)

34 
	`¥ötf
 (1, "f‹k cœimedÅÿw‹k NÅimes!\n", 
N
);

35 
	`exô
 ();

38 ; 
n
 > 0;Ç--)

40 i‡(
	`waô
 () < 0)

42 
	`¥ötf
 (1, "wait stoppedÉarly\n");

43 
	`exô
 ();

47 i‡(
	`waô
 () != -1)

49 
	`¥ötf
 (1, "wait gotÅoo many\n");

50 
	`exô
 ();

53 
	`¥ötf
 (1, "forkÅest OK\n");

54 
	}
}

57 
	$maö
 ()

59 
	`f‹kã°
 ();

60 
	`exô
 ();

61 
	}
}

	@fs.c

12 
	~"ty≥s.h
"

13 
	~"defs.h
"

14 
	~"∑øm.h
"

15 
	~"°©.h
"

16 
	~"mmu.h
"

17 
	~"¥oc.h
"

18 
	~"•ölock.h
"

19 
	~"buf.h
"

20 
	~"fs.h
"

21 
	~"fûe.h
"

23 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
ôrunc
 (
öode
 *);

28 
	$ªadsb
 (
dev
, 
su≥rblock
 *
sb
)

30 
buf
 *
bp
;

32 
bp
 = 
	`bªad
 (
dev
, 1);

33 
	`memmove
 (
sb
, 
bp
->
d©a
,  (*sb));

34 
	`bªl£
 (
bp
);

35 
	}
}

39 
	$bzîo
 (
dev
, 
bno
)

41 
buf
 *
bp
;

43 
bp
 = 
	`bªad
 (
dev
, 
bno
);

44 
	`mem£t
 (
bp
->
d©a
, 0, 
BSIZE
);

45 
	`log_wrôe
 (
bp
);

46 
	`bªl£
 (
bp
);

47 
	}
}

52 
uöt


53 
	$bÆloc
 (
uöt
 
dev
)

55 
b
, 
bi
, 
m
;

56 
buf
 *
bp
;

57 
su≥rblock
 
sb
;

59 
bp
 = 0;

60 
	`ªadsb
 (
dev
, &
sb
);

61 
b
 = 0; b < 
sb
.
size
; b +
BPB
)

63 
bp
 = 
	`bªad
 (
dev
, 
	`BBLOCK
 (
b
, 
sb
.
nöodes
));

64 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++)

66 
m
 = 1 << (
bi
 % 8);

67 i‡((
bp
->
d©a
[
bi
 / 8] & 
m
) == 0)

69 
bp
->
d©a
[
bi
 / 8] |
m
;

70 
	`log_wrôe
 (
bp
);

71 
	`bªl£
 (
bp
);

72 
	`bzîo
 (
dev
, 
b
 + 
bi
);

73  
b
 + 
bi
;

76 
	`bªl£
 (
bp
);

78 
	`∑nic
 ("balloc: out of blocks");

79 
	}
}

83 
	$b‰ì
 (
dev
, 
uöt
 
b
)

85 
buf
 *
bp
;

86 
su≥rblock
 
sb
;

87 
bi
, 
m
;

89 
	`ªadsb
 (
dev
, &
sb
);

90 
bp
 = 
	`bªad
 (
dev
, 
	`BBLOCK
 (
b
, 
sb
.
nöodes
));

91 
bi
 = 
b
 % 
BPB
;

92 
m
 = 1 << (
bi
 % 8);

93 i‡((
bp
->
d©a
[
bi
 / 8] & 
m
) == 0)

94 
	`∑nic
 ("freeing free block");

95 
bp
->
d©a
[
bi
 / 8] &~
m
;

96 
	`log_wrôe
 (
bp
);

97 
	`bªl£
 (
bp
);

98 
	}
}

164 
•ölock
 
	mlock
;

165 
öode
 
	möode
[
NINODE
];

166 } 
	giˇche
;

169 
	$iöô
 ()

171 
	`öôlock
 (&
iˇche
.
lock
, "icache");

172 
	}
}

174 
öode
 *
igë
 (
uöt
 
dev
, uöà
öum
);

179 
öode
 *

180 
	$üŒoc
 (
uöt
 
dev
, 
ty≥
)

182 
öum
;

183 
buf
 *
bp
;

184 
döode
 *
dù
;

185 
su≥rblock
 
sb
;

187 
	`ªadsb
 (
dev
, &
sb
);

189 
öum
 = 1; inum < 
sb
.
nöodes
; inum++)

191 
bp
 = 
	`bªad
 (
dev
, 
	`IBLOCK
 (
öum
));

192 
dù
 = (
döode
 *Ë
bp
->
d©a
 + 
öum
 % 
IPB
;

193 i‡(
dù
->
ty≥
 == 0)

195 
	`mem£t
 (
dù
, 0,  (*dip));

196 
dù
->
ty≥
 =Åype;

197 
	`log_wrôe
 (
bp
);

198 
	`bªl£
 (
bp
);

199  
	`igë
 (
dev
, 
öum
);

201 
	`bªl£
 (
bp
);

203 
	`∑nic
 ("ialloc:Ço inodes");

204 
	}
}

208 
	$iupd©e
 (
öode
 *
ù
)

210 
buf
 *
bp
;

211 
döode
 *
dù
;

213 
bp
 = 
	`bªad
 (
ù
->
dev
, 
	`IBLOCK
 (ù->
öum
));

214 
dù
 = (
döode
 *Ë
bp
->
d©a
 + 
ù
->
öum
 % 
IPB
;

215 
dù
->
ty≥
 = 
ù
->type;

216 
dù
->
maj‹
 = 
ù
->major;

217 
dù
->
mö‹
 = 
ù
->minor;

218 
dù
->
∆ök
 = 
ù
->nlink;

219 
dù
->
size
 = 
ù
->size;

220 
	`memmove
 (
dù
->
addrs
, 
ù
->addrs,  (ip->addrs));

221 
	`log_wrôe
 (
bp
);

222 
	`bªl£
 (
bp
);

223 
	}
}

228 
öode
 *

229 
	$igë
 (
uöt
 
dev
, uöà
öum
)

231 
öode
 *
ù
, *
em±y
;

233 
	`acquúe
 (&
iˇche
.
lock
);

236 
em±y
 = 0;

237 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++)

239 i‡(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum)

241 
ù
->
ªf
++;

242 
	`ªÀa£
 (&
iˇche
.
lock
);

243  
ù
;

245 i‡(
em±y
 =0 && 
ù
->
ªf
 == 0)

246 
em±y
 = 
ù
;

250 i‡(
em±y
 == 0)

251 
	`∑nic
 ("iget:Ço inodes");

253 
ù
 = 
em±y
;

254 
ù
->
dev
 = dev;

255 
ù
->
öum
 = inum;

256 
ù
->
ªf
 = 1;

257 
ù
->
Êags
 = 0;

258 
	`ªÀa£
 (&
iˇche
.
lock
);

260  
ù
;

261 
	}
}

265 
öode
 *

266 
	$idup
 (
öode
 *
ù
)

268 
	`acquúe
 (&
iˇche
.
lock
);

269 
ù
->
ªf
++;

270 
	`ªÀa£
 (&
iˇche
.
lock
);

271  
ù
;

272 
	}
}

277 
	$ûock
 (
öode
 *
ù
)

279 
buf
 *
bp
;

280 
döode
 *
dù
;

282 i‡(
ù
 =0 || ip->
ªf
 < 1)

283 
	`∑nic
 ("ilock");

285 
	`acquúe
 (&
iˇche
.
lock
);

286 
ù
->
Êags
 & 
I_BUSY
)

287 
	`¶ìp
 (
ù
, &
iˇche
.
lock
);

288 
ù
->
Êags
 |
I_BUSY
;

289 
	`ªÀa£
 (&
iˇche
.
lock
);

291 i‡(!(
ù
->
Êags
 & 
I_VALID
))

293 
bp
 = 
	`bªad
 (
ù
->
dev
, 
	`IBLOCK
 (ù->
öum
));

294 
dù
 = (
döode
 *Ë
bp
->
d©a
 + 
ù
->
öum
 % 
IPB
;

295 
ù
->
ty≥
 = 
dù
->type;

296 
ù
->
maj‹
 = 
dù
->major;

297 
ù
->
mö‹
 = 
dù
->minor;

298 
ù
->
∆ök
 = 
dù
->nlink;

299 
ù
->
size
 = 
dù
->size;

300 
	`memmove
 (
ù
->
addrs
, 
dù
->addrs,  (ip->addrs));

301 
	`bªl£
 (
bp
);

302 
ù
->
Êags
 |
I_VALID
;

303 i‡(
ù
->
ty≥
 == 0)

304 
	`∑nic
 ("ilock:ÇoÅype");

306 
	}
}

310 
	$iu∆ock
 (
öode
 *
ù
)

312 i‡(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

313 
	`∑nic
 ("iunlock");

315 
	`acquúe
 (&
iˇche
.
lock
);

316 
ù
->
Êags
 &~
I_BUSY
;

317 
	`wakeup
 (
ù
);

318 
	`ªÀa£
 (&
iˇche
.
lock
);

319 
	}
}

327 
	$ùut
 (
öode
 *
ù
)

329 
	`acquúe
 (&
iˇche
.
lock
);

330 i‡(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0)

333 i‡(
ù
->
Êags
 & 
I_BUSY
)

334 
	`∑nic
 ("iput busy");

335 
ù
->
Êags
 |
I_BUSY
;

336 
	`ªÀa£
 (&
iˇche
.
lock
);

337 
	`ôrunc
 (
ù
);

338 
ù
->
ty≥
 = 0;

339 
	`iupd©e
 (
ù
);

340 
	`acquúe
 (&
iˇche
.
lock
);

341 
ù
->
Êags
 = 0;

342 
	`wakeup
 (
ù
);

344 
ù
->
ªf
--;

345 
	`ªÀa£
 (&
iˇche
.
lock
);

346 
	}
}

350 
	$iu∆ockput
 (
öode
 *
ù
)

352 
	`iu∆ock
 (
ù
);

353 
	`ùut
 (
ù
);

354 
	}
}

366 
uöt


367 
	$bm≠
 (
öode
 *
ù
, 
uöt
 
bn
)

369 
uöt
 
addr
, *
a
;

370 
buf
 *
bp
;

372 i‡(
bn
 < 
NDIRECT
)

374 i‡((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

375 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
 (ù->
dev
);

376  
addr
;

378 
bn
 -
NDIRECT
;

380 i‡(
bn
 < 
NINDIRECT
)

383 i‡((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

384 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
 (ù->
dev
);

385 
bp
 = 
	`bªad
 (
ù
->
dev
, 
addr
);

386 
a
 = (
uöt
 *Ë
bp
->
d©a
;

387 i‡((
addr
 = 
a
[
bn
]) == 0)

389 
a
[
bn
] = 
addr
 = 
	`bÆloc
 (
ù
->
dev
);

390 
	`log_wrôe
 (
bp
);

392 
	`bªl£
 (
bp
);

393  
addr
;

396 
	`∑nic
 ("bmap: out ofÑange");

397 
	}
}

405 
	$ôrunc
 (
öode
 *
ù
)

407 
i
, 
j
;

408 
buf
 *
bp
;

409 
uöt
 *
a
;

411 
i
 = 0; i < 
NDIRECT
; i++)

413 i‡(
ù
->
addrs
[
i
])

415 
	`b‰ì
 (
ù
->
dev
, ip->
addrs
[
i
]);

416 
ù
->
addrs
[
i
] = 0;

420 i‡(
ù
->
addrs
[
NDIRECT
])

422 
bp
 = 
	`bªad
 (
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

423 
a
 = (
uöt
 *Ë
bp
->
d©a
;

424 
j
 = 0; j < 
NINDIRECT
; j++)

426 i‡(
a
[
j
])

427 
	`b‰ì
 (
ù
->
dev
, 
a
[
j
]);

429 
	`bªl£
 (
bp
);

430 
	`b‰ì
 (
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

431 
ù
->
addrs
[
NDIRECT
] = 0;

434 
ù
->
size
 = 0;

435 
	`iupd©e
 (
ù
);

436 
	}
}

440 
	$°©i
 (
öode
 *
ù
, 
°©
 *
°
)

442 
°
->
dev
 = 
ù
->dev;

443 
°
->
öo
 = 
ù
->
öum
;

444 
°
->
ty≥
 = 
ù
->type;

445 
°
->
∆ök
 = 
ù
->nlink;

446 
°
->
size
 = 
ù
->size;

447 
	}
}

452 
	$ªadi
 (
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

454 
uöt
 
tŸ
, 
m
;

455 
buf
 *
bp
;

457 i‡(
ù
->
ty≥
 =
T_DEV
)

459 i‡(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

461  
devsw
[
ù
->
maj‹
].
	`ªad
 (ù, 
d°
, 
n
);

464 i‡(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

466 i‡(
off
 + 
n
 > 
ù
->
size
)

467 
n
 = 
ù
->
size
 - 
off
;

469 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
, 
off
 +m, 
d°
 += m)

471 
bp
 = 
	`bªad
 (
ù
->
dev
, 
	`bm≠
 (ù, 
off
 / 
BSIZE
));

472 
m
 = 
	`mö
 (
n
 - 
tŸ
, 
BSIZE
 - 
off
 % BSIZE);

473 
	`memmove
 (
d°
, 
bp
->
d©a
 + 
off
 % 
BSIZE
, 
m
);

474 
	`bªl£
 (
bp
);

476  
n
;

477 
	}
}

482 
	$wrôei
 (
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

484 
uöt
 
tŸ
, 
m
;

485 
buf
 *
bp
;

487 i‡(
ù
->
ty≥
 =
T_DEV
)

489 i‡(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

491  
devsw
[
ù
->
maj‹
].
	`wrôe
 (ù, 
§c
, 
n
);

494 i‡(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

496 i‡(
off
 + 
n
 > 
MAXFILE
 * 
BSIZE
)

499 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
, 
off
 +m, 
§c
 += m)

501 
bp
 = 
	`bªad
 (
ù
->
dev
, 
	`bm≠
 (ù, 
off
 / 
BSIZE
));

502 
m
 = 
	`mö
 (
n
 - 
tŸ
, 
BSIZE
 - 
off
 % BSIZE);

503 
	`memmove
 (
bp
->
d©a
 + 
off
 % 
BSIZE
, 
§c
, 
m
);

504 
	`log_wrôe
 (
bp
);

505 
	`bªl£
 (
bp
);

508 i‡(
n
 > 0 && 
off
 > 
ù
->
size
)

510 
ù
->
size
 = 
off
;

511 
	`iupd©e
 (
ù
);

513  
n
;

514 
	}
}

520 
	$«mecmp
 (c⁄° *
s
, c⁄° *
t
)

522  
	`°∫cmp
 (
s
, 
t
, 
DIRSIZ
);

523 
	}
}

527 
öode
 *

528 
	$dúlookup
 (
öode
 *
dp
, *
«me
, 
uöt
 * 
poff
)

530 
uöt
 
off
, 
öum
;

531 
dúít
 
de
;

533 i‡(
dp
->
ty≥
 !
T_DIR
)

534 
	`∑nic
 ("dirlookupÇot DIR");

536 
off
 = 0; of‡< 
dp
->
size
; of‡+ (
de
))

538 i‡(
	`ªadi
 (
dp
, (*Ë&
de
, 
off
,  (de)) !=  (de))

539 
	`∑nic
 ("dirlinkÑead");

540 i‡(
de
.
öum
 == 0)

542 i‡(
	`«mecmp
 (
«me
, 
de
.name) == 0)

545 i‡(
poff
)

546 *
poff
 = 
off
;

547 
öum
 = 
de
.inum;

548  
	`igë
 (
dp
->
dev
, 
öum
);

553 
	}
}

557 
	$dúlök
 (
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

559 
off
;

560 
dúít
 
de
;

561 
öode
 *
ù
;

564 i‡((
ù
 = 
	`dúlookup
 (
dp
, 
«me
, 0)) != 0)

566 
	`ùut
 (
ù
);

571 
off
 = 0; of‡< 
dp
->
size
; of‡+ (
de
))

573 i‡(
	`ªadi
 (
dp
, (*Ë&
de
, 
off
,  (de)) !=  (de))

574 
	`∑nic
 ("dirlinkÑead");

575 i‡(
de
.
öum
 == 0)

579 
	`°∫˝y
 (
de
.
«me
,Çame, 
DIRSIZ
);

580 
de
.
öum
 = inum;

581 i‡(
	`wrôei
 (
dp
, (*Ë&
de
, 
off
,  (de)) !=  (de))

582 
	`∑nic
 ("dirlink");

585 
	}
}

603 
	$skùñem
 (*
∑th
, *
«me
)

605 *
s
;

606 
Àn
;

608 *
∑th
 == '/')

609 
∑th
++;

610 i‡(*
∑th
 == 0)

612 
s
 = 
∑th
;

613 *
∑th
 != '/' && *path != 0)

614 
∑th
++;

615 
Àn
 = 
∑th
 - 
s
;

616 i‡(
Àn
 >
DIRSIZ
)

617 
	`memmove
 (
«me
, 
s
, 
DIRSIZ
);

620 
	`memmove
 (
«me
, 
s
, 
Àn
);

621 
«me
[
Àn
] = 0;

623 *
∑th
 == '/')

624 
∑th
++;

625  
∑th
;

626 
	}
}

631 
öode
 *

632 
	$«mex
 (*
∑th
, 
«meù¨ít
, *
«me
)

634 
öode
 *
ù
, *
√xt
;

636 i‡(*
∑th
 == '/')

637 
ù
 = 
	`igë
 (
ROOTDEV
, 
ROOTINO
);

639 
ù
 = 
	`idup
 (
¥oc
->
cwd
);

641 (
∑th
 = 
	`skùñem
 (∑th, 
«me
)) != 0)

643 
	`ûock
 (
ù
);

644 i‡(
ù
->
ty≥
 !
T_DIR
)

646 
	`iu∆ockput
 (
ù
);

649 i‡(
«meù¨ít
 && *
∑th
 == '\0')

652 
	`iu∆ock
 (
ù
);

653  
ù
;

655 i‡((
√xt
 = 
	`dúlookup
 (
ù
, 
«me
, 0)) == 0)

657 
	`iu∆ockput
 (
ù
);

660 
	`iu∆ockput
 (
ù
);

661 
ù
 = 
√xt
;

663 i‡(
«meù¨ít
)

665 
	`ùut
 (
ù
);

668  
ù
;

669 
	}
}

671 
öode
 *

672 
	$«mei
 (*
∑th
)

674 
«me
[
DIRSIZ
];

675  
	`«mex
 (
∑th
, 0, 
«me
);

676 
	}
}

678 
öode
 *

679 
	$«meù¨ít
 (*
∑th
, *
«me
)

681  
	`«mex
 (
∑th
, 1, 
«me
);

682 
	}
}

	@fs.h

11 
	#ROOTINO
 1

12 
	#BSIZE
 512

13 

	)

15 
	ssu≥rblock


17 
uöt
 
	msize
;

18 
uöt
 
	mnblocks
;

19 
uöt
 
	mnöodes
;

20 
uöt
 
	m∆og
;

23 
	#NDIRECT
 12

	)

24 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

25 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

28 
	sdöode


30 
	mty≥
;

31 
	mmaj‹
;

32 
	mmö‹
;

33 
	m∆ök
;

34 
uöt
 
	msize
;

35 
uöt
 
	maddrs
[
NDIRECT
 + 1];

39 
	#IPB
 (
BSIZE
 / (
döode
))

	)

42 
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

45 
	#BPB
 (
BSIZE
*8)

	)

48 
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

51 
	#DIRSIZ
 14

	)

53 
	sdúít


55 
ush‹t
 
	möum
;

56 
	m«me
[
DIRSIZ
];

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
 (*, *);

11 
	$gªp
 (*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
 (
fd
, 
buf
 + 
m
,  (buf) - m)) > 0)

19 
m
 +
n
;

20 
p
 = 
buf
;

21 (
q
 = 
	`°rchr
 (
p
, '\n')) != 0)

23 *
q
 = 0;

24 i‡(
	`m©ch
 (
∑âîn
, 
p
))

26 *
q
 = '\n';

27 
	`wrôe
 (1, 
p
, 
q
 + 1 -Ö);

29 
p
 = 
q
 + 1;

31 i‡(
p
 =
buf
)

32 
m
 = 0;

33 i‡(
m
 > 0)

35 
m
 -
p
 - 
buf
;

36 
	`memmove
 (
buf
, 
p
, 
m
);

39 
	}
}

42 
	$maö
 (
¨gc
, *
¨gv
[])

44 
fd
, 
i
;

45 *
∑âîn
;

47 i‡(
¨gc
 <= 1)

49 
	`¥ötf
 (2, "usage: grepÖattern [file ...]\n");

50 
	`exô
 ();

52 
∑âîn
 = 
¨gv
[1];

54 i‡(
¨gc
 <= 2)

56 
	`gªp
 (
∑âîn
, 0);

57 
	`exô
 ();

60 
i
 = 2; i < 
¨gc
; i++)

62 i‡((
fd
 = 
	`›í
 (
¨gv
[
i
], 0)) < 0)

64 
	`¥ötf
 (1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

65 
	`exô
 ();

67 
	`gªp
 (
∑âîn
, 
fd
);

68 
	`˛o£
 (
fd
);

70 
	`exô
 ();

71 
	}
}

76 
m©chhîe
 (*, *);

77 
m©ch°¨
 (, *, *);

80 
	$m©ch
 (*
ª
, *
ãxt
)

82 i‡(
ª
[0] == '^')

83  
	`m©chhîe
 (
ª
 + 1, 
ãxt
);

86 i‡(
	`m©chhîe
 (
ª
, 
ãxt
))

89 *
ãxt
++ != '\0');

91 
	}
}

95 
	$m©chhîe
 (*
ª
, *
ãxt
)

97 i‡(
ª
[0] == '\0')

99 i‡(
ª
[1] == '*')

100  
	`m©ch°¨
 (
ª
[0],Ñê+ 2, 
ãxt
);

101 i‡(
ª
[0] == '$' &&Ñe[1] == '\0')

102  *
ãxt
 == '\0';

103 i‡(*
ãxt
 !'\0' && (
ª
[0] == '.' ||Ñe[0] == *text))

104  
	`m©chhîe
 (
ª
 + 1, 
ãxt
 + 1);

106 
	}
}

110 
	$m©ch°¨
 (
c
, *
ª
, *
ãxt
)

114 i‡(
	`m©chhîe
 (
ª
, 
ãxt
))

117 *
ãxt
 !'\0' && (*ãxt++ =
c
 || c == '.'));

119 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
	#IDE_BSY
 0x80

	)

15 
	#IDE_DRDY
 0x40

	)

16 
	#IDE_DF
 0x20

	)

17 
	#IDE_ERR
 0x01

	)

19 
	#IDE_CMD_READ
 0x20

	)

20 
	#IDE_CMD_WRITE
 0x30

	)

26 
•ölock
 
	gidñock
;

27 
buf
 *
	gidequeue
;

29 
	ghavedisk1
;

30 
ide°¨t
 (
buf
 *);

34 
	$idewaô
 (
checkîr
)

36 
r
;

38 ((
r
 = 
	`öb
 (0x1f7)Ë& (
IDE_BSY
 | 
IDE_DRDY
)) != IDE_DRDY)

40 i‡(
checkîr
 && (
r
 & (
IDE_DF
 | 
IDE_ERR
)) != 0)

43 
	}
}

46 
	$ideöô
 ()

48 
i
;

50 
	`öôlock
 (&
idñock
, "ide");

51 
	`pi˚«bÀ
 (
IRQ_IDE
);

52 
	`iﬂpi˚«bÀ
 (
IRQ_IDE
, 
n˝u
 - 1);

53 
	`idewaô
 (0);

56 
	`outb
 (0x1f6, 0xe0 | (1 << 4));

57 
i
 = 0; i < 1000; i++)

59 i‡(
	`öb
 (0x1f7) != 0)

61 
havedisk1
 = 1;

67 
	`outb
 (0x1f6, 0xe0 | (0 << 4));

68 
	}
}

72 
	$ide°¨t
 (
buf
 *
b
)

74 i‡(
b
 == 0)

75 
	`∑nic
 ("idestart");

77 
	`idewaô
 (0);

78 
	`outb
 (0x3f6, 0);

79 
	`outb
 (0x1f2, 1);

80 
	`outb
 (0x1f3, 
b
->
£˘‹
 & 0xff);

81 
	`outb
 (0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

82 
	`outb
 (0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

83 
	`outb
 (0x1f6, 0xe0 | ((
b
->
dev
 & 1Ë<< 4Ë| ((b->
£˘‹
 >> 24) & 0x0f));

84 i‡(
b
->
Êags
 & 
B_DIRTY
)

86 
	`outb
 (0x1f7, 
IDE_CMD_WRITE
);

87 
	`out¶
 (0x1f0, 
b
->
d©a
, 512 / 4);

91 
	`outb
 (0x1f7, 
IDE_CMD_READ
);

93 
	}
}

97 
	$ideöå
 ()

99 
buf
 *
b
;

102 
	`acquúe
 (&
idñock
);

103 i‡((
b
 = 
idequeue
) == 0)

105 
	`ªÀa£
 (&
idñock
);

109 
idequeue
 = 
b
->
q√xt
;

112 i‡(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`idewaô
 (1) >= 0)

113 
	`ö¶
 (0x1f0, 
b
->
d©a
, 512 / 4);

116 
b
->
Êags
 |
B_VALID
;

117 
b
->
Êags
 &~
B_DIRTY
;

118 
	`wakeup
 (
b
);

121 i‡(
idequeue
 != 0)

122 
	`ide°¨t
 (
idequeue
);

124 
	`ªÀa£
 (&
idñock
);

125 
	}
}

132 
	$idîw
 (
buf
 *
b
)

134 
buf
 **
µ
;

136 i‡(!(
b
->
Êags
 & 
B_BUSY
))

137 
	`∑nic
 ("iderw: bufÇot busy");

138 i‡((
b
->
Êags
 & (
B_VALID
 | 
B_DIRTY
)) == B_VALID)

139 
	`∑nic
 ("iderw:ÇothingÅo do");

140 i‡(
b
->
dev
 !0 && !
havedisk1
)

141 
	`∑nic
 ("iderw: ide disk 1ÇotÖresent");

143 
	`acquúe
 (&
idñock
);

146 
b
->
q√xt
 = 0;

147 
µ
 = &
idequeue
; *µ;Ö∞&(*µ)->
q√xt
)

149 *
µ
 = 
b
;

152 i‡(
idequeue
 =
b
)

153 
	`ide°¨t
 (
b
);

156 (
b
->
Êags
 & (
B_VALID
 | 
B_DIRTY
)) != B_VALID)

158 
	`¶ìp
 (
b
, &
idñock
);

161 
	`ªÀa£
 (&
idñock
);

162 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
 ()

13 
pid
, 
wpid
;

15 i‡(
	`›í
 ("c⁄sﬁe", 
O_RDWR
) < 0)

17 
	`mknod
 ("console", 1, 1);

18 
	`›í
 ("c⁄sﬁe", 
O_RDWR
);

20 
	`dup
 (0);

21 
	`dup
 (0);

25 
	`¥ötf
 (1, "init: starting sh\n");

26 
pid
 = 
	`f‹k
 ();

27 i‡(
pid
 < 0)

29 
	`¥ötf
 (1, "init: fork failed\n");

30 
	`exô
 ();

32 i‡(
pid
 == 0)

34 
	`exec
 ("sh", 
¨gv
);

35 
	`¥ötf
 (1, "init:Éxec sh failed\n");

36 
	`exô
 ();

38 (
wpid
 = 
	`waô
 ()Ë>0 && wpid !
pid
)

39 
	`¥ötf
 (1, "zombie!\n");

41 
	}
}

	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic


30 
uöt
 
	mªg
;

31 
uöt
 
	m∑d
[3];

32 
uöt
 
	md©a
;

35 
uöt


36 
	$iﬂpi¸ód
 (
ªg
)

38 
iﬂpic
->
ªg
 =Ñeg;

39  
iﬂpic
->
d©a
;

40 
	}
}

43 
	$iﬂpicwrôe
 (
ªg
, 
uöt
 
d©a
)

45 
iﬂpic
->
ªg
 =Ñeg;

46 
iﬂpic
->
d©a
 = data;

47 
	}
}

50 
	$iﬂpicöô
 ()

52 
i
, 
id
, 
maxöå
;

54 i‡(!
ismp
)

57 
iﬂpic
 = (vﬁ©ûêiﬂpi¯*Ë
IOAPIC
;

58 
maxöå
 = (
	`iﬂpi¸ód
 (
REG_VER
) >> 16) & 0xFF;

59 
id
 = 
	`iﬂpi¸ód
 (
REG_ID
) >> 24;

60 i‡(
id
 !
iﬂpicid
)

61 
	`˝rötf
 ("ioapicinit: id isn'tÉqualÅo ioapicid;Çotá MP\n");

65 
i
 = 0; i <
maxöå
; i++)

67 
	`iﬂpicwrôe
 (
REG_TABLE
 + 2 * 
i
, 
INT_DISABLED
 | (
T_IRQ0
 + i));

68 
	`iﬂpicwrôe
 (
REG_TABLE
 + 2 * 
i
 + 1, 0);

70 
	}
}

73 
	$iﬂpi˚«bÀ
 (
úq
, 
˝unum
)

75 i‡(!
ismp
)

81 
	`iﬂpicwrôe
 (
REG_TABLE
 + 2 * 
úq
, 
T_IRQ0
 + irq);

82 
	`iﬂpicwrôe
 (
REG_TABLE
 + 2 * 
úq
 + 1, 
˝unum
 << 24);

83 
	}
}

	@kalloc.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
‰ìønge
 (*
v°¨t
, *
víd
);

13 
íd
[];

15 
	srun


17 
run
 *
	m√xt
;

22 
•ölock
 
	mlock
;

23 
	mu£_lock
;

24 
run
 *
	m‰ìli°
;

25 } 
	gkmem
;

33 
	$köô1
 (*
v°¨t
, *
víd
)

35 
	`öôlock
 (&
kmem
.
lock
, "kmem");

36 
kmem
.
u£_lock
 = 0;

37 
	`‰ìønge
 (
v°¨t
, 
víd
);

38 
	}
}

41 
	$köô2
 (*
v°¨t
, *
víd
)

43 
	`‰ìønge
 (
v°¨t
, 
víd
);

44 
kmem
.
u£_lock
 = 1;

45 
	}
}

48 
	$‰ìønge
 (*
v°¨t
, *
víd
)

50 *
p
;

51 
p
 = (*Ë
	`PGROUNDUP
 ((
uöt
Ë
v°¨t
);

52 ; 
p
 + 
PGSIZE
 <(*Ë
víd
;Ö += PGSIZE)

53 
	`k‰ì
 (
p
);

54 
	}
}

62 
	$k‰ì
 (*
v
)

64 
run
 *
r
;

66 i‡((
uöt
Ë
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
 (vË>
PHYSTOP
)

67 
	`∑nic
 ("kfree");

70 
	`mem£t
 (
v
, 1, 
PGSIZE
);

72 i‡(
kmem
.
u£_lock
)

73 
	`acquúe
 (&
kmem
.
lock
);

74 
r
 = (
run
 *Ë
v
;

75 
r
->
√xt
 = 
kmem
.
‰ìli°
;

76 
kmem
.
‰ìli°
 = 
r
;

77 i‡(
kmem
.
u£_lock
)

78 
	`ªÀa£
 (&
kmem
.
lock
);

79 
	}
}

85 
	$kÆloc
 ()

87 
run
 *
r
;

89 i‡(
kmem
.
u£_lock
)

90 
	`acquúe
 (&
kmem
.
lock
);

91 
r
 = 
kmem
.
‰ìli°
;

92 i‡(
r
)

93 
kmem
.
‰ìli°
 = 
r
->
√xt
;

94 i‡(
kmem
.
u£_lock
)

95 
	`ªÀa£
 (&
kmem
.
lock
);

96  (*Ë
r
;

97 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbdgëc
 ()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
 (
KBSTATP
);

16 i‡((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
 (
KBDATAP
);

20 i‡(
d©a
 == 0xE0)

22 
shi·
 |
E0ESC
;

25 i‡(
d©a
 & 0x80)

28 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

29 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

32 i‡(
shi·
 & 
E0ESC
)

35 
d©a
 |= 0x80;

36 
shi·
 &~
E0ESC
;

39 
shi·
 |
shi·code
[
d©a
];

40 
shi·
 ^
toggÀcode
[
d©a
];

41 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

42 i‡(
shi·
 & 
CAPSLOCK
)

44 i‡('a' <
c
 && c <= 'z')

45 
c
 += 'A' - 'a';

46 i‡('A' <
c
 && c <= 'Z')

47 
c
 += 'a' - 'A';

49  
c
;

50 
	}
}

53 
	$kbdöå
 ()

55 
	`c⁄sﬁeöå
 (
kbdgëc
);

56 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] = {

35 [0x1D] 
CTL
,

36 [0x2A] 
SHIFT
,

37 [0x36] 
SHIFT
,

38 [0x38] 
ALT
,

39 [0x9D] 
CTL
,

40 [0xB8] 
ALT


43 
uch¨
 
	gtoggÀcode
[256] = {

44 [0x3A] 
CAPSLOCK
,

45 [0x45] 
NUMLOCK
,

46 [0x46] 
SCROLLLOCK


49 
uch¨
 
	gn‹mÆm≠
[256] = {

50 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

53 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

55 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

56 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

57 
NO
, ' ', NO, NO, NO, NO, NO, NO,

58 
NO
, NO, NO, NO, NO, NO, NO, '7',

60 '2', '3', '0', '.', 
NO
, NO, NO, NO,

63 [0xC8] 
KEY_UP
,[0xD0] 
KEY_DN
,

64 [0xC9] 
KEY_PGUP
,[0xD1] 
KEY_PGDN
,

65 [0xCB] 
KEY_LF
,[0xCD] 
KEY_RT
,

66 [0x97] 
KEY_HOME
,[0xCF] 
KEY_END
,

67 [0xD2] 
KEY_INS
,[0xD3] 
KEY_DEL


70 
uch¨
 
	gshi·m≠
[256] = {

71 
NO
, 033, '!', '@', '#', '$', '%', '^',

74 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

76 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

77 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

78 
NO
, ' ', NO, NO, NO, NO, NO, NO,

79 
NO
, NO, NO, NO, NO, NO, NO, '7',

81 '2', '3', '0', '.', 
NO
, NO, NO, NO,

84 [0xC8] 
KEY_UP
,[0xD0] 
KEY_DN
,

85 [0xC9] 
KEY_PGUP
,[0xD1] 
KEY_PGDN
,

86 [0xCB] 
KEY_LF
,[0xCD] 
KEY_RT
,

87 [0x97] 
KEY_HOME
,[0xCF] 
KEY_END
,

88 [0xD2] 
KEY_INS
,[0xD3] 
KEY_DEL


91 
uch¨
 
	g˘lm≠
[256] = {

92 
NO
, NO, NO, NO, NO, NO, NO, NO,

93 
NO
, NO, NO, NO, NO, NO, NO, NO,

94 
C
 ('Q'), C ('W'), C ('E'), C ('R'), C ('T'), C ('Y'), C ('U'), C ('I'),

95 
C
 ('O'), C ('P'), 
NO
, NO, '\r', NO, C ('A'), C ('S'),

96 
C
 ('D'), C ('F'), C ('G'), C ('H'), C ('J'), C ('K'), C ('L'), 
NO
,

97 
NO
, NO, NO, 
C
 ('\\'), C ('Z'), C ('X'), C ('C'), C ('V'),

98 
C
 ('B'), C ('N'), C ('M'), 
NO
, NO, C ('/'), NO, NO,

100 [0xB5] 
C
 ('/'),

101 [0xC8] 
KEY_UP
,[0xD0] 
KEY_DN
,

102 [0xC9] 
KEY_PGUP
,[0xD1] 
KEY_PGDN
,

103 [0xCB] 
KEY_LF
,[0xCD] 
KEY_RT
,

104 [0x97] 
KEY_HOME
,[0xCF] 
KEY_END
,

105 [0xD2] 
KEY_INS
,[0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
 (
¨gc
, **
¨gv
)

8 
i
;

10 i‡(
¨gc
 < 1)

12 
	`¥ötf
 (2, "usage: killÖid...\n");

13 
	`exô
 ();

15 
i
 = 1; i < 
¨gc
; i++)

16 
	`kûl
 (
	`©oi
 (
¨gv
[
i
]));

17 
	`exô
 ();

18 
	}
}

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"memœyout.h
"

7 
	~"å≠s.h
"

8 
	~"mmu.h
"

9 
	~"x86.h
"

12 
	#ID
 (0x0020/4)

13 
	#VER
 (0x0030/4)

14 
	#TPR
 (0x0080/4)

15 
	#EOI
 (0x00B0/4)

16 
	#SVR
 (0x00F0/4)

17 
	#ENABLE
 0x00000100

18 
	#ESR
 (0x0280/4)

19 
	#ICRLO
 (0x0300/4)

20 
	#INIT
 0x00000500

21 
	#STARTUP
 0x00000600

22 
	#DELIVS
 0x00001000

23 
	#ASSERT
 0x00004000

24 
	#DEASSERT
 0x00000000

	)

25 
	#LEVEL
 0x00008000

26 
	#BCAST
 0x00080000

27 
	#BUSY
 0x00001000

	)

28 
	#FIXED
 0x00000000

	)

29 
	#ICRHI
 (0x0310/4)

30 
	#TIMER
 (0x0320/4)

31 
	#X1
 0x0000000B

32 
	#PERIODIC
 0x00020000

33 
	#PCINT
 (0x0340/4)

34 
	#LINT0
 (0x0350/4)

35 
	#LINT1
 (0x0360/4)

36 
	#ERROR
 (0x0370/4)

37 
	#MASKED
 0x00010000

38 
	#TICR
 (0x0380/4)

39 
	#TCCR
 (0x0390/4)

40 
	#TDCR
 (0x03E0/4)

41 

	)

42 vﬁ©ûê
uöt
 *
	gœpic
;

45 
	$œpicw
 (
ödex
, 
vÆue
)

47 
œpic
[
ödex
] = 
vÆue
;

48 
œpic
[
ID
];

49 
	}
}

54 
	$œpicöô
 (
c
)

56 i‡(!
œpic
)

60 
	`œpicw
 (
SVR
, 
ENABLE
 | (
T_IRQ0
 + 
IRQ_SPURIOUS
));

66 
	`œpicw
 (
TDCR
, 
X1
);

67 
	`œpicw
 (
TIMER
, 
PERIODIC
 | (
T_IRQ0
 + 
IRQ_TIMER
));

68 
	`œpicw
 (
TICR
, 10000000);

71 
	`œpicw
 (
LINT0
, 
MASKED
);

72 
	`œpicw
 (
LINT1
, 
MASKED
);

76 i‡(((
œpic
[
VER
] >> 16) & 0xFF) >= 4)

77 
	`œpicw
 (
PCINT
, 
MASKED
);

80 
	`œpicw
 (
ERROR
, 
T_IRQ0
 + 
IRQ_ERROR
);

83 
	`œpicw
 (
ESR
, 0);

84 
	`œpicw
 (
ESR
, 0);

87 
	`œpicw
 (
EOI
, 0);

90 
	`œpicw
 (
ICRHI
, 0);

91 
	`œpicw
 (
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

92 
œpic
[
ICRLO
] & 
DELIVS
)

96 
	`œpicw
 (
TPR
, 0);

97 
	}
}

100 
	$˝unum
 ()

107 i‡(
	`ªadeÊags
 (Ë& 
FL_IF
)

109 
n
;

110 i‡(
n
++ == 0)

111 
	`˝rötf
 ("cpu called from %x with interruptsÉnabled\n",

112 
	`__buûtö_ªtu∫_addªss
 (0));

115 i‡(
œpic
)

116  
œpic
[
ID
] >> 24;

118 
	}
}

122 
	$œpi˚oi
 ()

124 i‡(
œpic
)

125 
	`œpicw
 (
EOI
, 0);

126 
	}
}

131 
	$mi¸odñay
 (
us
)

133 
	}
}

135 
	#IO_RTC
 0x70

	)

140 
	$œpic°¨èp
 (
uch¨
 
≠icid
, 
uöt
 
addr
)

142 
i
;

143 
ush‹t
 *
wrv
;

148 
	`outb
 (
IO_RTC
, 0xF);

149 
	`outb
 (
IO_RTC
 + 1, 0x0A);

150 
wrv
 = (
ush‹t
 *Ë
	`P2V
 ((0x40 << 4 | 0x67));

151 
wrv
[0] = 0;

152 
wrv
[1] = 
addr
 >> 4;

156 
	`œpicw
 (
ICRHI
, 
≠icid
 << 24);

157 
	`œpicw
 (
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

158 
	`mi¸odñay
 (200);

159 
	`œpicw
 (
ICRLO
, 
INIT
 | 
LEVEL
);

160 
	`mi¸odñay
 (100);

167 
i
 = 0; i < 2; i++)

169 
	`œpicw
 (
ICRHI
, 
≠icid
 << 24);

170 
	`œpicw
 (
ICRLO
, 
STARTUP
 | (
addr
 >> 12));

171 
	`mi¸odñay
 (200);

173 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
 (
¨gc
, *
¨gv
[])

8 i‡(
¨gc
 != 3)

10 
	`¥ötf
 (2, "Usage:Ün oldÇew\n");

11 
	`exô
 ();

13 i‡(
	`lök
 (
¨gv
[1],árgv[2]) < 0)

14 
	`¥ötf
 (2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

15 
	`exô
 ();

16 
	}
}

	@log.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"•ölock.h
"

5 
	~"fs.h
"

6 
	~"buf.h
"

36 
	sloghódî


38 
	mn
;

39 
	m£˘‹
[
LOGSIZE
];

42 
	slog


44 
•ölock
 
	mlock
;

45 
	m°¨t
;

46 
	msize
;

47 
	mbusy
;

48 
	mdev
;

49 
loghódî
 
	mlh
;

51 
log
 
	glog
;

53 
ªcovî_‰om_log
 ();

56 
	$öôlog
 ()

58 i‡( (
loghódî
Ë>
BSIZE
)

59 
	`∑nic
 ("initlog:Åoo bigÜogheader");

61 
su≥rblock
 
sb
;

62 
	`öôlock
 (&
log
.
lock
, "log");

63 
	`ªadsb
 (
ROOTDEV
, &
sb
);

64 
log
.
°¨t
 = 
sb
.
size
 - sb.
∆og
;

65 
log
.
size
 = 
sb
.
∆og
;

66 
log
.
dev
 = 
ROOTDEV
;

67 
	`ªcovî_‰om_log
 ();

68 
	}
}

72 
	$ö°Æl_å™s
 ()

74 
èû
;

76 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++)

78 
buf
 *
lbuf
 = 
	`bªad
 (
log
.
dev
,Üog.
°¨t
 + 
èû
 + 1);

79 
buf
 *
dbuf
 = 
	`bªad
 (
log
.
dev
,Üog.
lh
.
£˘‹
[
èû
]);

80 
	`memmove
 (
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

81 
	`bwrôe
 (
dbuf
);

82 
	`bªl£
 (
lbuf
);

83 
	`bªl£
 (
dbuf
);

85 
	}
}

89 
	$ªad_hód
 ()

91 
buf
 *bu‡
	`bªad
 (
log
.
dev
,Üog.
°¨t
);

92 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

93 
i
;

94 
log
.
lh
.
n
 =Üh->n;

95 
i
 = 0; i < 
log
.
lh
.
n
; i++)

97 
log
.
lh
.
£˘‹
[
i
] =Üh->sector[i];

99 
	`bªl£
 (
buf
);

100 
	}
}

106 
	$wrôe_hód
 ()

108 
buf
 *bu‡
	`bªad
 (
log
.
dev
,Üog.
°¨t
);

109 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

110 
i
;

111 
hb
->
n
 = 
log
.
lh
.n;

112 
i
 = 0; i < 
log
.
lh
.
n
; i++)

114 
hb
->
£˘‹
[
i
] = 
log
.
lh
.sector[i];

116 
	`bwrôe
 (
buf
);

117 
	`bªl£
 (
buf
);

118 
	}
}

121 
	$ªcovî_‰om_log
 ()

123 
	`ªad_hód
 ();

124 
	`ö°Æl_å™s
 ();

125 
log
.
lh
.
n
 = 0;

126 
	`wrôe_hód
 ();

127 
	}
}

130 
	$begö_å™s
 ()

132 
	`acquúe
 (&
log
.
lock
);

133 
log
.
busy
)

135 
	`¶ìp
 (&
log
, &log.
lock
);

137 
log
.
busy
 = 1;

138 
	`ªÀa£
 (&
log
.
lock
);

139 
	}
}

142 
	$commô_å™s
 ()

144 i‡(
log
.
lh
.
n
 > 0)

146 
	`wrôe_hód
 ();

147 
	`ö°Æl_å™s
 ();

148 
log
.
lh
.
n
 = 0;

149 
	`wrôe_hód
 ();

152 
	`acquúe
 (&
log
.
lock
);

153 
log
.
busy
 = 0;

154 
	`wakeup
 (&
log
);

155 
	`ªÀa£
 (&
log
.
lock
);

156 
	}
}

167 
	$log_wrôe
 (
buf
 *
b
)

169 
i
;

171 i‡(
log
.
lh
.
n
 >
LOGSIZE
 ||Üog.lh.¿>log.
size
 - 1)

172 
	`∑nic
 ("too bigáÅransaction");

173 i‡(!
log
.
busy
)

174 
	`∑nic
 ("write outside ofÅrans");

176 
i
 = 0; i < 
log
.
lh
.
n
; i++)

178 i‡(
log
.
lh
.
£˘‹
[
i
] =
b
->sector)

181 
log
.
lh
.
£˘‹
[
i
] = 
b
->sector;

182 
buf
 *
lbuf
 = 
	`bªad
 (
b
->
dev
, 
log
.
°¨t
 + 
i
 + 1);

183 
	`memmove
 (
lbuf
->
d©a
, 
b
->d©a, 
BSIZE
);

184 
	`bwrôe
 (
lbuf
);

185 
	`bªl£
 (
lbuf
);

186 i‡(
i
 =
log
.
lh
.
n
)

187 
log
.
lh
.
n
++;

188 
b
->
Êags
 |
B_DIRTY
;

189 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
 (*
∑th
)

9 
buf
[
DIRSIZ
 + 1];

10 *
p
;

13 
p
 = 
∑th
 + 
	`°æí
 (path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 i‡(
	`°æí
 (
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
 (
buf
, 
p
, 
	`°æí
 (p));

21 
	`mem£t
 (
buf
 + 
	`°æí
 (
p
), ' ', 
DIRSIZ
 - strlen (p));

22  
buf
;

23 
	}
}

26 
	$ls
 (*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 i‡((
fd
 = 
	`›í
 (
∑th
, 0)) < 0)

35 
	`¥ötf
 (2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

39 i‡(
	`f°©
 (
fd
, &
°
) < 0)

41 
	`¥ötf
 (2, "ls: c™nŸ sèà%s\n", 
∑th
);

42 
	`˛o£
 (
fd
);

46 
°
.
ty≥
)

48 
T_FILE
:

49 
	`¥ötf
 (1, "%†%d %d %d\n", 
	`fmäame
 (
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

52 
T_DIR
:

53 i‡(
	`°æí
 (
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
)

55 
	`¥ötf
 (1, "ls:ÖathÅooÜong\n");

58 
	`°r˝y
 (
buf
, 
∑th
);

59 
p
 = 
buf
 + 
	`°æí
 (buf);

60 *
p
++ = '/';

61 
	`ªad
 (
fd
, &
de
,  (de)) ==  (de))

63 i‡(
de
.
öum
 == 0)

65 
	`memmove
 (
p
, 
de
.
«me
, 
DIRSIZ
);

66 
p
[
DIRSIZ
] = 0;

67 i‡(
	`°©
 (
buf
, &
°
) < 0)

69 
	`¥ötf
 (1, "ls: c™nŸ sèà%s\n", 
buf
);

72 
	`¥ötf
 (1, "%†%d %d %d\n", 
	`fmäame
 (
buf
), 
°
.
ty≥
, st.
öo
,

73 
°
.
size
);

77 
	`˛o£
 (
fd
);

78 
	}
}

81 
	$maö
 (
¨gc
, *
¨gv
[])

83 
i
;

85 i‡(
¨gc
 < 2)

87 
	`ls
 (".");

88 
	`exô
 ();

90 
i
 = 1; i < 
¨gc
; i++)

91 
	`ls
 (
¨gv
[
i
]);

92 
	`exô
 ();

93 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

9 
°¨tŸhîs
 ();

10 
	$mpmaö
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
));

11 
pde_t
 *
kpgdú
;

12 
íd
[];

18 
	$maö
 ()

20 
	`köô1
 (
íd
, 
	`P2V
 (4 * 1024 * 1024));

21 
	`kvmÆloc
 ();

22 
	`mpöô
 ();

23 
	`œpicöô
 (
	`mpb˝u
 ());

24 
	`£göô
 ();

25 
	`˝rötf
 ("\n˝u%d: sèπög xv6\n\n", 
˝u
->
id
);

26 
	`picöô
 ();

27 
	`iﬂpicöô
 ();

28 
	`c⁄sﬁeöô
 ();

29 
	`u¨töô
 ();

30 
	`pöô
 ();

31 
	`tvöô
 ();

32 
	`böô
 ();

33 
	`fûeöô
 ();

34 
	`iöô
 ();

35 
	`ideöô
 ();

36 i‡(!
ismp
)

37 
	`timîöô
 ();

38 
	`°¨tŸhîs
 ();

39 
	`köô2
 (
	`P2V
 (4 * 1024 * 1024), P2V (
PHYSTOP
));

40 
	`u£röô
 ();

42 
	`mpmaö
 ();

43 
	}
}

47 
	$m≥¡î
 ()

49 
	`swôchkvm
 ();

50 
	`£göô
 ();

51 
	`œpicöô
 (
	`˝unum
 ());

52 
	`mpmaö
 ();

53 
	}
}

57 
	$mpmaö
 ()

59 
	`˝rötf
 ("˝u%d: sèπög\n", 
˝u
->
id
);

60 
	`idtöô
 ();

61 
	`xchg
 (&
˝u
->
°¨ãd
, 1);

62 
	`scheduÀr
 ();

63 
	}
}

65 
pde_t
 
	gíåypgdú
[];

69 
	$°¨tŸhîs
 ()

71 
uch¨
 
_bö¨y_íåyŸhî_°¨t
[], 
_bö¨y_íåyŸhî_size
[];

72 
uch¨
 *
code
;

73 
˝u
 *
c
;

74 *
°ack
;

79 
code
 = 
	`p2v
 (0x7000);

80 
	`memmove
 (
code
, 
_bö¨y_íåyŸhî_°¨t
, (
uöt
Ë
_bö¨y_íåyŸhî_size
);

82 
c
 = 
˝us
; c < cpu†+ 
n˝u
; c++)

84 i‡(
c
 =
˝us
 + 
	`˝unum
 ())

90 
°ack
 = 
	`kÆloc
 ();

91 *(**Ë(
code
 - 4Ë
°ack
 + 
KSTACKSIZE
;

92 *(**Ë(
code
 - 8Ë
m≥¡î
;

93 *(**Ë(
code
 - 12Ë(*Ë
	`v2p
 (
íåypgdú
);

95 
	`œpic°¨èp
 (
c
->
id
, 
	`v2p
 (
code
));

98 
c
->
°¨ãd
 == 0)

101 
	}
}

107 
__©åibuã__
 ((
	$__Æig√d__
 (
PGSIZE
)))

108 
pde_t
 
íåypgdú
[
NPDENTRIES
] = {

110 [0] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

112 [
KERNBASE
 >> 
PDXSHIFT
] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

113 
	}
};

	@memide.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
uch¨
 
_bö¨y_fs_img_°¨t
[], 
_bö¨y_fs_img_size
[];

16 
	gdisksize
;

17 
uch¨
 *
	gmemdisk
;

20 
	$ideöô
 ()

22 
memdisk
 = 
_bö¨y_fs_img_°¨t
;

23 
disksize
 = (
uöt
Ë
_bö¨y_fs_img_size
 / 512;

24 
	}
}

28 
	$ideöå
 ()

31 
	}
}

37 
	$idîw
 (
buf
 *
b
)

39 
uch¨
 *
p
;

41 i‡(!(
b
->
Êags
 & 
B_BUSY
))

42 
	`∑nic
 ("iderw: bufÇot busy");

43 i‡((
b
->
Êags
 & (
B_VALID
 | 
B_DIRTY
)) == B_VALID)

44 
	`∑nic
 ("iderw:ÇothingÅo do");

45 i‡(
b
->
dev
 != 1)

46 
	`∑nic
 ("iderw:ÑequestÇot for disk 1");

47 i‡(
b
->
£˘‹
 >
disksize
)

48 
	`∑nic
 ("iderw: sector out ofÑange");

50 
p
 = 
memdisk
 + 
b
->
£˘‹
 * 512;

52 i‡(
b
->
Êags
 & 
B_DIRTY
)

54 
b
->
Êags
 &~
B_DIRTY
;

55 
	`memmove
 (
p
, 
b
->
d©a
, 512);

58 
	`memmove
 (
b
->
d©a
, 
p
, 512);

59 
b
->
Êags
 |
B_VALID
;

60 
	}
}

	@memlayout.h

3 
	#EXTMEM
 0x100000

4 
	#PHYSTOP
 0xE000000

5 
	#DEVSPACE
 0xFE000000

6 

	)

8 
	#KERNBASE
 0x80000000

9 
	#KERNLINK
 (
KERNBASE
+
EXTMEM
)

10 

	)

11 #i‚de‡
__ASSEMBLER__


13 
ölöe
 
uöt


14 
	$v2p
 (*
a
)

16  ((
uöt
Ë(
a
)Ë- 
KERNBASE
;

17 
	}
}

19 
ölöe
 *

20 
	$p2v
 (
uöt
 
a
)

22  (*Ë((
a
Ë+ 
KERNBASE
);

23 
	}
}

27 
	#V2P
(
a
Ë(((
uöt
Ë◊)Ë- 
KERNBASE
)

	)

28 
	#P2V
(
a
Ë(((*Ë◊)Ë+ 
KERNBASE
)

	)

30 
	#V2P_WO
(
x
Ë((xË- 
KERNBASE
)

31 
	#P2V_WO
(
x
Ë((xË+ 
KERNBASE
)

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
 (
¨gc
, *
¨gv
[])

8 
i
;

10 i‡(
¨gc
 < 2)

12 
	`¥ötf
 (2, "Usage: mkdir files...\n");

13 
	`exô
 ();

16 
i
 = 1; i < 
¨gc
; i++)

18 i‡(
	`mkdú
 (
¨gv
[
i
]) < 0)

20 
	`¥ötf
 (2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

25 
	`exô
 ();

26 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"ty≥s.h
"

	)

10 
	~"fs.h
"

11 
	~"°©.h
"

12 
	~"∑øm.h
"

14 
	gnblocks
 = 985;

15 
	g∆og
 = 
LOGSIZE
;

16 
	gnöodes
 = 200;

17 
	gsize
 = 1024;

19 
	gfsfd
;

20 
su≥rblock
 
	gsb
;

21 
	gzî€s
[512];

22 
uöt
 
	g‰ìblock
;

23 
uöt
 
	gu£dblocks
;

24 
uöt
 
	gbôblocks
;

25 
uöt
 
	g‰ìöode
 = 1;

27 
bÆloc
 ();

28 
w£˘
 (
uöt
, *);

29 
wöode
 (
uöt
, 
döode
 *);

30 
röode
 (
uöt
 
öum
, 
döode
 *
ù
);

31 
r£˘
 (
uöt
 
£c
, *
buf
);

32 
uöt
 
üŒoc
 (
ush‹t
 
ty≥
);

33 
üµíd
 (
uöt
 
öum
, *
p
, 
n
);

36 
ush‹t


37 
	$xsh‹t
 (
ush‹t
 
x
)

39 
ush‹t
 
y
;

40 
uch¨
 *
a
 = (uch¨ *Ë& 
y
;

41 
a
[0] = 
x
;

42 
a
[1] = 
x
 >> 8;

43  
y
;

44 
	}
}

46 
uöt


47 
	$xöt
 (
uöt
 
x
)

49 
uöt
 
y
;

50 
uch¨
 *
a
 = (uch¨ *Ë& 
y
;

51 
a
[0] = 
x
;

52 
a
[1] = 
x
 >> 8;

53 
a
[2] = 
x
 >> 16;

54 
a
[3] = 
x
 >> 24;

55  
y
;

56 
	}
}

59 
	$maö
 (
¨gc
, *
¨gv
[])

61 
i
, 
cc
, 
fd
;

62 
uöt
 
roŸöo
, 
öum
, 
off
;

63 
dúít
 
de
;

64 
buf
[512];

65 
döode
 
dö
;

67 i‡(
¨gc
 < 2)

69 
	`Ârötf
 (
°dîr
, "Usage: mkfs fs.img files...\n");

70 
	`exô
 (1);

73 
	`as£π
 ((512 %  (
döode
)) == 0);

74 
	`as£π
 ((512 %  (
dúít
)) == 0);

76 
fsfd
 = 
	`›í
 (
¨gv
[1], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

77 i‡(
fsfd
 < 0)

79 
	`≥º‹
 (
¨gv
[1]);

80 
	`exô
 (1);

83 
sb
.
size
 = 
	`xöt
 (size);

84 
sb
.
nblocks
 = 
	`xöt
 (nblocks);

85 
sb
.
nöodes
 = 
	`xöt
 (ninodes);

86 
sb
.
∆og
 = 
	`xöt
 (nlog);

88 
bôblocks
 = 
size
 / (512 * 8) + 1;

89 
u£dblocks
 = 
nöodes
 / 
IPB
 + 3 + 
bôblocks
;

90 
‰ìblock
 = 
u£dblocks
;

92 
	`¥ötf
 ("used %d (bit %dÇinode %zu) free %uÜog %uÅotal %d\n",

93 
u£dblocks
, 
bôblocks
, 
nöodes
 / 
IPB
 + 1, 
‰ìblock
, 
∆og
,

94 
nblocks
 + 
u£dblocks
 + 
∆og
);

96 
	`as£π
 (
nblocks
 + 
u£dblocks
 + 
∆og
 =
size
);

98 
i
 = 0; i < 
nblocks
 + 
u£dblocks
 + 
∆og
; i++)

99 
	`w£˘
 (
i
, 
zî€s
);

101 
	`mem£t
 (
buf
, 0,  (buf));

102 
	`memmove
 (
buf
, &
sb
,  (sb));

103 
	`w£˘
 (1, 
buf
);

105 
roŸöo
 = 
	`üŒoc
 (
T_DIR
);

106 
	`as£π
 (
roŸöo
 =
ROOTINO
);

108 
	`bzîo
 (&
de
,  (de));

109 
de
.
öum
 = 
	`xsh‹t
 (
roŸöo
);

110 
	`°r˝y
 (
de
.
«me
, ".");

111 
	`üµíd
 (
roŸöo
, &
de
,  (de));

113 
	`bzîo
 (&
de
,  (de));

114 
de
.
öum
 = 
	`xsh‹t
 (
roŸöo
);

115 
	`°r˝y
 (
de
.
«me
, "..");

116 
	`üµíd
 (
roŸöo
, &
de
,  (de));

118 
i
 = 2; i < 
¨gc
; i++)

120 
	`as£π
 (
	`ödex
 (
¨gv
[
i
], '/') == 0);

122 i‡((
fd
 = 
	`›í
 (
¨gv
[
i
], 0)) < 0)

124 
	`≥º‹
 (
¨gv
[
i
]);

125 
	`exô
 (1);

132 i‡(
¨gv
[
i
][0] == '_')

133 ++
¨gv
[
i
];

135 
öum
 = 
	`üŒoc
 (
T_FILE
);

137 
	`bzîo
 (&
de
,  (de));

138 
de
.
öum
 = 
	`xsh‹t
 (inum);

139 
	`°∫˝y
 (
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

140 
	`üµíd
 (
roŸöo
, &
de
,  (de));

142 (
cc
 = 
	`ªad
 (
fd
, 
buf
,  (buf))) > 0)

143 
	`üµíd
 (
öum
, 
buf
, 
cc
);

145 
	`˛o£
 (
fd
);

149 
	`röode
 (
roŸöo
, &
dö
);

150 
off
 = 
	`xöt
 (
dö
.
size
);

151 
off
 = ((of‡/ 
BSIZE
) + 1) * BSIZE;

152 
dö
.
size
 = 
	`xöt
 (
off
);

153 
	`wöode
 (
roŸöo
, &
dö
);

155 
	`bÆloc
 (
u£dblocks
);

157 
	`exô
 (0);

158 
	}
}

161 
	$w£˘
 (
uöt
 
£c
, *
buf
)

163 i‡(
	`l£ek
 (
fsfd
, 
£c
 * 512L, 0) != sec * 512L)

165 
	`≥º‹
 ("lseek");

166 
	`exô
 (1);

168 i‡(
	`wrôe
 (
fsfd
, 
buf
, 512) != 512)

170 
	`≥º‹
 ("write");

171 
	`exô
 (1);

173 
	}
}

175 
uöt


176 
	$i2b
 (
uöt
 
öum
)

178  (
öum
 / 
IPB
) + 2;

179 
	}
}

182 
	$wöode
 (
uöt
 
öum
, 
döode
 *
ù
)

184 
buf
[512];

185 
uöt
 
bn
;

186 
döode
 *
dù
;

188 
bn
 = 
	`i2b
 (
öum
);

189 
	`r£˘
 (
bn
, 
buf
);

190 
dù
 = ((
döode
 *Ë
buf
Ë+ (
öum
 % 
IPB
);

191 *
dù
 = *
ù
;

192 
	`w£˘
 (
bn
, 
buf
);

193 
	}
}

196 
	$röode
 (
uöt
 
öum
, 
döode
 *
ù
)

198 
buf
[512];

199 
uöt
 
bn
;

200 
döode
 *
dù
;

202 
bn
 = 
	`i2b
 (
öum
);

203 
	`r£˘
 (
bn
, 
buf
);

204 
dù
 = ((
döode
 *Ë
buf
Ë+ (
öum
 % 
IPB
);

205 *
ù
 = *
dù
;

206 
	}
}

209 
	$r£˘
 (
uöt
 
£c
, *
buf
)

211 i‡(
	`l£ek
 (
fsfd
, 
£c
 * 512L, 0) != sec * 512L)

213 
	`≥º‹
 ("lseek");

214 
	`exô
 (1);

216 i‡(
	`ªad
 (
fsfd
, 
buf
, 512) != 512)

218 
	`≥º‹
 ("read");

219 
	`exô
 (1);

221 
	}
}

223 
uöt


224 
	$üŒoc
 (
ush‹t
 
ty≥
)

226 
uöt
 
öum
 = 
‰ìöode
++;

227 
döode
 
dö
;

229 
	`bzîo
 (&
dö
,  (din));

230 
dö
.
ty≥
 = 
	`xsh‹t
 (type);

231 
dö
.
∆ök
 = 
	`xsh‹t
 (1);

232 
dö
.
size
 = 
	`xöt
 (0);

233 
	`wöode
 (
öum
, &
dö
);

234  
öum
;

235 
	}
}

238 
	$bÆloc
 (
u£d
)

240 
uch¨
 
buf
[512];

241 
i
;

243 
	`¥ötf
 ("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

244 
	`as£π
 (
u£d
 < 512 * 8);

245 
	`bzîo
 (
buf
, 512);

246 
i
 = 0; i < 
u£d
; i++)

248 
buf
[
i
 / 8] = buf[i / 8] | (0x1 << (i % 8));

250 
	`¥ötf
 ("bÆloc: wrôêbôm≠ blockáà£˘‹ %zu\n", 
nöodes
 / 
IPB
 + 3);

251 
	`w£˘
 (
nöodes
 / 
IPB
 + 3, 
buf
);

252 
	}
}

254 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

257 
	$üµíd
 (
uöt
 
öum
, *
xp
, 
n
)

259 *
p
 = (*Ë
xp
;

260 
uöt
 
fbn
, 
off
, 
n1
;

261 
döode
 
dö
;

262 
buf
[512];

263 
uöt
 
ödúe˘
[
NINDIRECT
];

264 
uöt
 
x
;

266 
	`röode
 (
öum
, &
dö
);

268 
off
 = 
	`xöt
 (
dö
.
size
);

269 
n
 > 0)

271 
fbn
 = 
off
 / 512;

272 
	`as£π
 (
fbn
 < 
MAXFILE
);

273 i‡(
fbn
 < 
NDIRECT
)

275 i‡(
	`xöt
 (
dö
.
addrs
[
fbn
]) == 0)

277 
dö
.
addrs
[
fbn
] = 
	`xöt
 (
‰ìblock
++);

278 
u£dblocks
++;

280 
x
 = 
	`xöt
 (
dö
.
addrs
[
fbn
]);

284 i‡(
	`xöt
 (
dö
.
addrs
[
NDIRECT
]) == 0)

287 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
 (
‰ìblock
++);

288 
u£dblocks
++;

291 
	`r£˘
 (
	`xöt
 (
dö
.
addrs
[
NDIRECT
]), (*Ë
ödúe˘
);

292 i‡(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0)

294 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
 (
‰ìblock
++);

295 
u£dblocks
++;

296 
	`w£˘
 (
	`xöt
 (
dö
.
addrs
[
NDIRECT
]), (*Ë
ödúe˘
);

298 
x
 = 
	`xöt
 (
ödúe˘
[
fbn
 - 
NDIRECT
]);

300 
n1
 = 
	`mö
 (
n
, (
fbn
 + 1Ë* 512 - 
off
);

301 
	`r£˘
 (
x
, 
buf
);

302 
	`bc›y
 (
p
, 
buf
 + 
off
 - (
fbn
 * 512), 
n1
);

303 
	`w£˘
 (
x
, 
buf
);

304 
n
 -
n1
;

305 
off
 +
n1
;

306 
p
 +
n1
;

308 
dö
.
size
 = 
	`xöt
 (
off
);

309 
	`wöode
 (
öum
, &
dö
);

310 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#CR0_PE
 0x00000001

29 
	#CR0_MP
 0x00000002

30 
	#CR0_EM
 0x00000004

31 
	#CR0_TS
 0x00000008

32 
	#CR0_ET
 0x00000010

33 
	#CR0_NE
 0x00000020

34 
	#CR0_WP
 0x00010000

35 
	#CR0_AM
 0x00040000

36 
	#CR0_NW
 0x20000000

37 
	#CR0_CD
 0x40000000

38 
	#CR0_PG
 0x80000000

39 

	)

40 
	#CR4_PSE
 0x00000010

41 

	)

42 
	#SEG_KCODE
 1

43 
	#SEG_KDATA
 2

44 
	#SEG_KCPU
 3

45 
	#SEG_UCODE
 4

46 
	#SEG_UDATA
 5

47 
	#SEG_TSS
 6

48 

	)

50 #i‚de‡
__ASSEMBLER__


52 
	s£gdesc


54 
uöt
 
	mlim_15_0
:16;

55 
uöt
 
	mba£_15_0
:16;

56 
uöt
 
	mba£_23_16
:8;

57 
uöt
 
	mty≥
:4;

58 
uöt
 
	ms
:1;

59 
uöt
 
	md∂
:2;

60 
uöt
 
	mp
:1;

61 
uöt
 
	mlim_19_16
:4;

62 
uöt
 
	mavl
:1;

63 
uöt
 
	mrsv1
:1;

64 
uöt
 
	mdb
:1;

65 
uöt
 
	mg
:1;

66 
uöt
 
	mba£_31_24
:8;

70 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

71 { ((
lim
Ë>> 12Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

72 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

73 (
uöt
)(
lim
Ë>> 28, 0, 0, 1, 1, (uöt)(
ba£
Ë>> 24 }

	)

74 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

75 { (
lim
Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

76 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

77 (
uöt
)(
lim
Ë>> 16, 0, 0, 1, 0, (uöt)(
ba£
Ë>> 24 }

	)

80 
	#DPL_USER
 0x3

81 

	)

83 
	#STA_X
 0x8

84 
	#STA_E
 0x4

85 
	#STA_C
 0x4

86 
	#STA_W
 0x2

87 
	#STA_R
 0x2

88 
	#STA_A
 0x1

89 

	)

91 
	#STS_T16A
 0x1

92 
	#STS_LDT
 0x2

93 
	#STS_T16B
 0x3

94 
	#STS_CG16
 0x4

95 
	#STS_TG
 0x5

96 
	#STS_IG16
 0x6

97 
	#STS_TG16
 0x7

98 
	#STS_T32A
 0x9

99 
	#STS_T32B
 0xB

100 
	#STS_CG32
 0xC

101 
	#STS_IG32
 0xE

102 
	#STS_TG32
 0xF

103 

	)

113 
	#PDX
(
va
Ë(((
uöt
)(vaË>> 
PDXSHIFT
Ë& 0x3FF)

	)

116 
	#PTX
(
va
Ë(((
uöt
)(vaË>> 
PTXSHIFT
Ë& 0x3FF)

	)

119 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöt
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

122 
	#NPDENTRIES
 1024

123 
	#NPTENTRIES
 1024

124 
	#PGSIZE
 4096

125 

	)

126 
	#PGSHIFT
 12

127 
	#PTXSHIFT
 12

128 
	#PDXSHIFT
 22

129 

	)

130 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

131 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

134 
	#PTE_P
 0x001

135 
	#PTE_W
 0x002

136 
	#PTE_U
 0x004

137 
	#PTE_PWT
 0x008

138 
	#PTE_PCD
 0x010

139 
	#PTE_A
 0x020

140 
	#PTE_D
 0x040

141 
	#PTE_PS
 0x080

142 
	#PTE_MBZ
 0x180

143 

	)

145 
	#PTE_ADDR
(
±e
Ë((
uöt
)’ãË& ~0xFFF)

	)

147 #i‚de‡
__ASSEMBLER__


148 
uöt
 
	t±e_t
;

151 
	sèsk°©e


153 
uöt
 
	mlök
;

154 
uöt
 
	me•0
;

155 
ush‹t
 
	mss0
;

156 
ush‹t
 
	m∑ddög1
;

157 
uöt
 *
	me•1
;

158 
ush‹t
 
	mss1
;

159 
ush‹t
 
	m∑ddög2
;

160 
uöt
 *
	me•2
;

161 
ush‹t
 
	mss2
;

162 
ush‹t
 
	m∑ddög3
;

163 *
	m¸3
;

164 
uöt
 *
	meù
;

165 
uöt
 
	meÊags
;

166 
uöt
 
	móx
;

167 
uöt
 
	mecx
;

168 
uöt
 
	medx
;

169 
uöt
 
	mebx
;

170 
uöt
 *
	me•
;

171 
uöt
 *
	mebp
;

172 
uöt
 
	mesi
;

173 
uöt
 
	medi
;

174 
ush‹t
 
	mes
;

175 
ush‹t
 
	m∑ddög4
;

176 
ush‹t
 
	mcs
;

177 
ush‹t
 
	m∑ddög5
;

178 
ush‹t
 
	mss
;

179 
ush‹t
 
	m∑ddög6
;

180 
ush‹t
 
	mds
;

181 
ush‹t
 
	m∑ddög7
;

182 
ush‹t
 
	mfs
;

183 
ush‹t
 
	m∑ddög8
;

184 
ush‹t
 
	mgs
;

185 
ush‹t
 
	m∑ddög9
;

186 
ush‹t
 
	mldt
;

187 
ush‹t
 
	m∑ddög10
;

188 
ush‹t
 
	mt
;

189 
ush‹t
 
	miomb
;

194 
	sg©edesc


196 
uöt
 
	moff_15_0
:16;

197 
uöt
 
	mcs
:16;

198 
uöt
 
	m¨gs
:5;

199 
uöt
 
	mrsv1
:3;

200 
uöt
 
	mty≥
:4;

201 
uöt
 
	ms
:1;

202 
uöt
 
	md∂
:2;

203 
uöt
 
	mp
:1;

204 
uöt
 
	moff_31_16
:16;

215 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

217 (
g©e
).
off_15_0
 = (
uöt
)(
off
) & 0xffff; \

218 (
g©e
).
cs
 = (
£l
); \

219 (
g©e
).
¨gs
 = 0; \

220 (
g©e
).
rsv1
 = 0; \

221 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

222 (
g©e
).
s
 = 0; \

223 (
g©e
).
d∂
 = (
d
); \

224 (
g©e
).
p
 = 1; \

225 (
g©e
).
off_31_16
 = (
uöt
)(
off
) >> 16; \

226 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mp.h
"

10 
	~"x86.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

14 
˝u
 
	g˝us
[
NCPU
];

15 
˝u
 *
	gb˝u
;

16 
	gismp
;

17 
	gn˝u
;

18 
uch¨
 
	giﬂpicid
;

21 
	$mpb˝u
 ()

23  
b˝u
 - 
˝us
;

24 
	}
}

26 
uch¨


27 
	$sum
 (
uch¨
 * 
addr
, 
Àn
)

29 
i
, 
sum
;

31 
sum
 = 0;

32 
i
 = 0; i < 
Àn
; i++)

33 
sum
 +
addr
[
i
];

34  
sum
;

35 
	}
}

38 
mp
 *

39 
	$mp£¨ch1
 (
uöt
 
a
, 
Àn
)

41 
uch¨
 *
e
, *
p
, *
addr
;

43 
addr
 = 
	`p2v
 (
a
);

44 
e
 = 
addr
 + 
Àn
;

45 
p
 = 
addr
;Ö < 
e
;Ö + (
mp
))

46 i‡(
	`memcmp
 (
p
, "_MP_", 4Ë=0 && 
	`sum
 (p,  (
mp
)) == 0)

47  (
mp
 *Ë
p
;

49 
	}
}

56 
mp
 *

57 
	$mp£¨ch
 ()

59 
uch¨
 *
bda
;

60 
uöt
 
p
;

61 
mp
 *mp;

63 
bda
 = (
uch¨
 *Ë
	`P2V
 (0x400);

64 i‡((
p
 = ((
bda
[0x0F] << 8) | bda[0x0E]) << 4))

66 i‡((
mp
 = 
	`mp£¨ch1
 (
p
, 1024)))

67  
mp
;

71 
p
 = ((
bda
[0x14] << 8) | bda[0x13]) * 1024;

72 i‡((
mp
 = 
	`mp£¨ch1
 (
p
 - 1024, 1024)))

73  
mp
;

75  
	`mp£¨ch1
 (0xF0000, 0x10000);

76 
	}
}

83 
mpc⁄f
 *

84 
	$mpc⁄fig
 (
mp
 **
pmp
)

86 
mpc⁄f
 *
c⁄f
;

87 
mp
 *mp;

89 i‡((
mp
 = 
	`mp£¨ch
 ()Ë=0 || mp->
phyßddr
 == 0)

91 
c⁄f
 = (
mpc⁄f
 *Ë
	`p2v
 ((
uöt
Ë
mp
->
phyßddr
);

92 i‡(
	`memcmp
 (
c⁄f
, "PCMP", 4) != 0)

94 i‡(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

96 i‡(
	`sum
 ((
uch¨
 *Ë
c⁄f
, c⁄f->
Àngth
) != 0)

98 *
pmp
 = 
mp
;

99  
c⁄f
;

100 
	}
}

103 
	$mpöô
 ()

105 
uch¨
 *
p
, *
e
;

106 
mp
 *mp;

107 
mpc⁄f
 *
c⁄f
;

108 
mµroc
 *
¥oc
;

109 
mpiﬂpic
 *
iﬂpic
;

111 
b˝u
 = &
˝us
[0];

112 i‡((
c⁄f
 = 
	`mpc⁄fig
 (&
mp
)) == 0)

114 
ismp
 = 1;

115 
œpic
 = (
uöt
 *Ë
c⁄f
->
œpiˇddr
;

116 
p
 = (
uch¨
 *Ë(
c⁄f
 + 1), 
e
 = (uch¨ *Ëc⁄‡+ c⁄f->
Àngth
;Ö <É;)

118 *
p
)

120 
MPPROC
:

121 
¥oc
 = (
mµroc
 *Ë
p
;

122 i‡(
n˝u
 !
¥oc
->
≠icid
)

124 
	`˝rötf
 ("mpöô:Ç˝u=%dápicid=%d\n", 
n˝u
, 
¥oc
->
≠icid
);

125 
ismp
 = 0;

127 i‡(
¥oc
->
Êags
 & 
MPBOOT
)

128 
b˝u
 = &
˝us
[
n˝u
];

129 
˝us
[
n˝u
].
id
 =Çcpu;

130 
n˝u
++;

131 
p
 + (
mµroc
);

133 
MPIOAPIC
:

134 
iﬂpic
 = (
mpiﬂpic
 *Ë
p
;

135 
iﬂpicid
 = 
iﬂpic
->
≠i˙o
;

136 
p
 + (
mpiﬂpic
);

138 
MPBUS
:

139 
MPIOINTR
:

140 
MPLINTR
:

141 
p
 += 8;

144 
	`˝rötf
 ("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

145 
ismp
 = 0;

148 i‡(!
ismp
)

151 
n˝u
 = 1;

152 
œpic
 = 0;

153 
iﬂpicid
 = 0;

157 i‡(
mp
->
im¸p
)

161 
	`outb
 (0x22, 0x70);

162 
	`outb
 (0x23, 
	`öb
 (0x23) | 1);

164 
	}
}

	@mp.h

3 
	smp


5 
uch¨
 
	msig«tuª
[4];

6 *
	mphyßddr
;

7 
uch¨
 
	mÀngth
;

8 
uch¨
 
	m•e¸ev
;

9 
uch¨
 
	mchecksum
;

10 
uch¨
 
	mty≥
;

11 
uch¨
 
	mim¸p
;

12 
uch¨
 
	mª£rved
[3];

15 
	smpc⁄f


17 
uch¨
 
	msig«tuª
[4];

18 
ush‹t
 
	mÀngth
;

19 
uch¨
 
	mvîsi⁄
;

20 
uch¨
 
	mchecksum
;

21 
uch¨
 
	m¥odu˘
[20];

22 
uöt
 *
	m€mèbÀ
;

23 
ush‹t
 
	m€mÀngth
;

24 
ush‹t
 
	míåy
;

25 
uöt
 *
	mœpiˇddr
;

26 
ush‹t
 
	mxÀngth
;

27 
uch¨
 
	mxchecksum
;

28 
uch¨
 
	mª£rved
;

31 
	smµroc


33 
uch¨
 
	mty≥
;

34 
uch¨
 
	m≠icid
;

35 
uch¨
 
	mvîsi⁄
;

36 
uch¨
 
	mÊags
;

37 
	#MPBOOT
 0x02

38 
uch¨
 
sig«tuª
[4];

39 
uöt
 
„©uª
;

40 
uch¨
 
ª£rved
[8];

	)

43 
	smpiﬂpic


45 
uch¨
 
	mty≥
;

46 
uch¨
 
	m≠i˙o
;

47 
uch¨
 
	mvîsi⁄
;

48 
uch¨
 
	mÊags
;

49 
uöt
 *
	maddr
;

53 
	#MPPROC
 0x00

54 
	#MPBUS
 0x01

55 
	#MPIOAPIC
 0x02

56 
	#MPIOINTR
 0x03

57 
	#MPLINTR
 0x04

	@param.h

1 
	#NPROC
 64

2 
	#KSTACKSIZE
 4096

3 
	#NCPU
 8

4 
	#NOFILE
 16

5 
	#NFILE
 100

6 
	#NBUF
 10

7 
	#NINODE
 50

8 
	#NDEV
 10

9 
	#ROOTDEV
 1

10 
	#MAXARG
 32

11 
	#LOGSIZE
 10

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1 << 
IRQ_SLAVE
);

18 
	$pic£tmask
 (
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
 (
IO_PIC1
 + 1, 
mask
);

22 
	`outb
 (
IO_PIC2
 + 1, 
mask
 >> 8);

23 
	}
}

26 
	$pi˚«bÀ
 (
úq
)

28 
	`pic£tmask
 (
úqmask
 & ~(1 << 
úq
));

29 
	}
}

33 
	$picöô
 ()

36 
	`outb
 (
IO_PIC1
 + 1, 0xFF);

37 
	`outb
 (
IO_PIC2
 + 1, 0xFF);

45 
	`outb
 (
IO_PIC1
, 0x11);

48 
	`outb
 (
IO_PIC1
 + 1, 
T_IRQ0
);

52 
	`outb
 (
IO_PIC1
 + 1, 1 << 
IRQ_SLAVE
);

62 
	`outb
 (
IO_PIC1
 + 1, 0x3);

65 
	`outb
 (
IO_PIC2
, 0x11);

66 
	`outb
 (
IO_PIC2
 + 1, 
T_IRQ0
 + 8);

67 
	`outb
 (
IO_PIC2
 + 1, 
IRQ_SLAVE
);

70 
	`outb
 (
IO_PIC2
 + 1, 0x3);

76 
	`outb
 (
IO_PIC1
, 0x68);

77 
	`outb
 (
IO_PIC1
, 0x0a);

79 
	`outb
 (
IO_PIC2
, 0x68);

80 
	`outb
 (
IO_PIC2
, 0x0a);

82 i‡(
úqmask
 != 0xFFFF)

83 
	`pic£tmask
 (
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fs.h
"

7 
	~"fûe.h
"

8 
	~"•ölock.h
"

10 
	#PIPESIZE
 512

	)

12 
	spùe


14 
•ölock
 
	mlock
;

15 
	md©a
[
PIPESIZE
];

16 
uöt
 
	mƒód
;

17 
uöt
 
	mnwrôe
;

18 
	mªad›í
;

19 
	mwrôe›í
;

23 
	$pùóŒoc
 (
fûe
 **
f0
, fûê**
f1
)

25 
pùe
 *
p
;

27 
p
 = 0;

28 *
f0
 = *
f1
 = 0;

29 i‡((*
f0
 = 
	`fûóŒoc
 ()Ë=0 || (*
f1
 = filealloc ()) == 0)

30 
bad
;

31 i‡((
p
 = (
pùe
 *Ë
	`kÆloc
 ()) == 0)

32 
bad
;

33 
p
->
ªad›í
 = 1;

34 
p
->
wrôe›í
 = 1;

35 
p
->
nwrôe
 = 0;

36 
p
->
ƒód
 = 0;

37 
	`öôlock
 (&
p
->
lock
, "pipe");

38 (*
f0
)->
ty≥
 = 
FD_PIPE
;

39 (*
f0
)->
ªadabÀ
 = 1;

40 (*
f0
)->
wrôabÀ
 = 0;

41 (*
f0
)->
pùe
 = 
p
;

42 (*
f1
)->
ty≥
 = 
FD_PIPE
;

43 (*
f1
)->
ªadabÀ
 = 0;

44 (*
f1
)->
wrôabÀ
 = 1;

45 (*
f1
)->
pùe
 = 
p
;

49 
bad
:

50 i‡(
p
)

51 
	`k‰ì
 ((*Ë
p
);

52 i‡(*
f0
)

53 
	`fûe˛o£
 (*
f0
);

54 i‡(*
f1
)

55 
	`fûe˛o£
 (*
f1
);

57 
	}
}

60 
	$pùe˛o£
 (
pùe
 *
p
, 
wrôabÀ
)

62 
	`acquúe
 (&
p
->
lock
);

63 i‡(
wrôabÀ
)

65 
p
->
wrôe›í
 = 0;

66 
	`wakeup
 (&
p
->
ƒód
);

70 
p
->
ªad›í
 = 0;

71 
	`wakeup
 (&
p
->
nwrôe
);

73 i‡(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0)

75 
	`ªÀa£
 (&
p
->
lock
);

76 
	`k‰ì
 ((*Ë
p
);

79 
	`ªÀa£
 (&
p
->
lock
);

80 
	}
}

84 
	$pùewrôe
 (
pùe
 *
p
, *
addr
, 
n
)

86 
i
;

88 
	`acquúe
 (&
p
->
lock
);

89 
i
 = 0; i < 
n
; i++)

91 
p
->
nwrôe
 =p->
ƒód
 + 
PIPESIZE
)

93 i‡(
p
->
ªad›í
 =0 || 
¥oc
->
kûÀd
)

95 
	`ªÀa£
 (&
p
->
lock
);

98 
	`wakeup
 (&
p
->
ƒód
);

99 
	`¶ìp
 (&
p
->
nwrôe
, &p->
lock
);

101 
p
->
d©a
[p->
nwrôe
++ % 
PIPESIZE
] = 
addr
[
i
];

103 
	`wakeup
 (&
p
->
ƒód
);

104 
	`ªÀa£
 (&
p
->
lock
);

105  
n
;

106 
	}
}

109 
	$pùîód
 (
pùe
 *
p
, *
addr
, 
n
)

111 
i
;

113 
	`acquúe
 (&
p
->
lock
);

114 
p
->
ƒód
 =p->
nwrôe
 &&Ö->
wrôe›í
)

116 i‡(
¥oc
->
kûÀd
)

118 
	`ªÀa£
 (&
p
->
lock
);

121 
	`¶ìp
 (&
p
->
ƒód
, &p->
lock
);

123 
i
 = 0; i < 
n
; i++)

125 i‡(
p
->
ƒód
 =p->
nwrôe
)

127 
addr
[
i
] = 
p
->
d©a
[p->
ƒód
++ % 
PIPESIZE
];

129 
	`wakeup
 (&
p
->
nwrôe
);

130 
	`ªÀa£
 (&
p
->
lock
);

131  
i
;

132 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
 (
fd
, 
c
)

8 
	`wrôe
 (
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
 (
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 i‡(
sgn
 && 
xx
 < 0)

22 
√g
 = 1;

23 
x
 = -
xx
;

27 
x
 = 
xx
;

30 
i
 = 0;

33 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

35 (
x
 /
ba£
) != 0);

36 i‡(
√g
)

37 
buf
[
i
++] = '-';

39 --
i
 >= 0)

40 
	`putc
 (
fd
, 
buf
[
i
]);

41 
	}
}

45 
	$¥ötf
 (
fd
, *
fmt
, ...)

47 *
s
;

48 
c
, 
i
, 
°©e
;

49 
uöt
 *
≠
;

51 
°©e
 = 0;

52 
≠
 = (
uöt
 *Ë(*Ë&
fmt
 + 1;

53 
i
 = 0; 
fmt
[i]; i++)

55 
c
 = 
fmt
[
i
] & 0xff;

56 i‡(
°©e
 == 0)

58 i‡(
c
 == '%')

60 
°©e
 = '%';

64 
	`putc
 (
fd
, 
c
);

67 i‡(
°©e
 == '%')

69 i‡(
c
 == 'd')

71 
	`¥ötöt
 (
fd
, *
≠
, 10, 1);

72 
≠
++;

74 i‡(
c
 == 'x' || c == 'p')

76 
	`¥ötöt
 (
fd
, *
≠
, 16, 0);

77 
≠
++;

79 i‡(
c
 == 's')

81 
s
 = (*Ë*
≠
;

82 
≠
++;

83 i‡(
s
 == 0)

84 
s
 = "(null)";

85 *
s
 != 0)

87 
	`putc
 (
fd
, *
s
);

88 
s
++;

91 i‡(
c
 == 'c')

93 
	`putc
 (
fd
, *
≠
);

94 
≠
++;

96 i‡(
c
 == '%')

98 
	`putc
 (
fd
, 
c
);

103 
	`putc
 (
fd
, '%');

104 
	`putc
 (
fd
, 
c
);

106 
°©e
 = 0;

109 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"x86.h
"

7 
	~"¥oc.h
"

8 
	~"•ölock.h
"

12 
•ölock
 
	mlock
;

13 
¥oc
 
	m¥oc
[
NPROC
];

14 } 
	g±abÀ
;

16 
¥oc
 *
	göô¥oc
;

18 
	g√xçid
 = 1;

19 
f‹kªt
 ();

20 
å≠ªt
 ();

22 
wakeup1
 (*
ch™
);

25 
	$pöô
 ()

27 
	`öôlock
 (&
±abÀ
.
lock
, "ptable");

28 
	}
}

35 
¥oc
 *

36 
	$Ælo˝roc
 ()

38 
¥oc
 *
p
;

39 *
•
;

41 
	`acquúe
 (&
±abÀ
.
lock
);

42 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

43 i‡(
p
->
°©e
 =
UNUSED
)

44 
found
;

45 
	`ªÀa£
 (&
±abÀ
.
lock
);

48 
found
:

49 
p
->
°©e
 = 
EMBRYO
;

50 
p
->
pid
 = 
√xçid
++;

51 
	`ªÀa£
 (&
±abÀ
.
lock
);

54 i‡((
p
->
k°ack
 = 
	`kÆloc
 ()) == 0)

56 
p
->
°©e
 = 
UNUSED
;

59 
•
 = 
p
->
k°ack
 + 
KSTACKSIZE
;

62 
•
 - *
p
->
tf
;

63 
p
->
tf
 = (
å≠‰ame
 *Ë
•
;

67 
•
 -= 4;

68 *(
uöt
 *Ë
•
 = (uötË
å≠ªt
;

70 
•
 - *
p
->
c⁄ãxt
;

71 
p
->
c⁄ãxt
 = (c⁄ãxà*Ë
•
;

72 
	`mem£t
 (
p
->
c⁄ãxt
, 0,  *p->context);

73 
p
->
c⁄ãxt
->
eù
 = (
uöt
Ë
f‹kªt
;

75  
p
;

76 
	}
}

81 
	$u£röô
 ()

83 
¥oc
 *
p
;

84 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

86 
p
 = 
	`Ælo˝roc
 ();

87 
öô¥oc
 = 
p
;

88 i‡((
p
->
pgdú
 = 
	`£tupkvm
 (
kÆloc
)) == 0)

89 
	`∑nic
 ("userinit: out of memory?");

90 
	`öôuvm
 (
p
->
pgdú
, 
_bö¨y_öôcode_°¨t
, (Ë
_bö¨y_öôcode_size
);

91 
p
->
sz
 = 
PGSIZE
;

92 
	`mem£t
 (
p
->
tf
, 0,  (*p->tf));

93 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

94 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

95 
p
->
tf
->
es
 =Ö->tf->
ds
;

96 
p
->
tf
->
ss
 =Ö->tf->
ds
;

97 
p
->
tf
->
eÊags
 = 
FL_IF
;

98 
p
->
tf
->
e•
 = 
PGSIZE
;

99 
p
->
tf
->
eù
 = 0;

101 
	`ß„°r˝y
 (
p
->
«me
, "initcode",  (p->name));

102 
p
->
cwd
 = 
	`«mei
 ("/");

104 
p
->
°©e
 = 
RUNNABLE
;

105 
	}
}

110 
	$grow¥oc
 (
n
)

112 
uöt
 
sz
;

114 
sz
 = 
¥oc
->sz;

115 i‡(
n
 > 0)

117 i‡((
sz
 = 
	`Ælocuvm
 (
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

120 i‡(
n
 < 0)

122 i‡((
sz
 = 
	`dóŒocuvm
 (
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

125 
¥oc
->
sz
 = sz;

126 
	`swôchuvm
 (
¥oc
);

128 
	}
}

134 
	$f‹k
 ()

136 
i
, 
pid
;

137 
¥oc
 *
≈
;

140 i‡((
≈
 = 
	`Ælo˝roc
 ()) == 0)

144 i‡((
≈
->
pgdú
 = 
	`c›yuvm
 (
¥oc
->pgdú,Öroc->
sz
)) == 0)

146 
	`k‰ì
 (
≈
->
k°ack
);

147 
≈
->
k°ack
 = 0;

148 
≈
->
°©e
 = 
UNUSED
;

151 
≈
->
sz
 = 
¥oc
->sz;

152 
≈
->
∑ª¡
 = 
¥oc
;

153 *
≈
->
tf
 = *
¥oc
->tf;

156 
≈
->
tf
->
óx
 = 0;

158 
i
 = 0; i < 
NOFILE
; i++)

159 i‡(
¥oc
->
ofûe
[
i
])

160 
≈
->
ofûe
[
i
] = 
	`fûedup
 (
¥oc
->ofile[i]);

161 
≈
->
cwd
 = 
	`idup
 (
¥oc
->cwd);

163 
pid
 = 
≈
->pid;

164 
≈
->
°©e
 = 
RUNNABLE
;

165 
	`ß„°r˝y
 (
≈
->
«me
, 
¥oc
->name,  (proc->name));

166  
pid
;

167 
	}
}

173 
	$exô
 ()

175 
¥oc
 *
p
;

176 
fd
;

178 i‡(
¥oc
 =
öô¥oc
)

179 
	`∑nic
 ("initÉxiting");

182 
fd
 = 0; fd < 
NOFILE
; fd++)

184 i‡(
¥oc
->
ofûe
[
fd
])

186 
	`fûe˛o£
 (
¥oc
->
ofûe
[
fd
]);

187 
¥oc
->
ofûe
[
fd
] = 0;

191 
	`ùut
 (
¥oc
->
cwd
);

192 
¥oc
->
cwd
 = 0;

194 
	`acquúe
 (&
±abÀ
.
lock
);

197 
	`wakeup1
 (
¥oc
->
∑ª¡
);

200 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

202 i‡(
p
->
∑ª¡
 =
¥oc
)

204 
p
->
∑ª¡
 = 
öô¥oc
;

205 i‡(
p
->
°©e
 =
ZOMBIE
)

206 
	`wakeup1
 (
öô¥oc
);

211 
¥oc
->
°©e
 = 
ZOMBIE
;

212 
	`sched
 ();

213 
	`∑nic
 ("zombieÉxit");

214 
	}
}

219 
	$waô
 ()

221 
¥oc
 *
p
;

222 
havekids
, 
pid
;

224 
	`acquúe
 (&
±abÀ
.
lock
);

228 
havekids
 = 0;

229 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

231 i‡(
p
->
∑ª¡
 !
¥oc
)

233 
havekids
 = 1;

234 i‡(
p
->
°©e
 =
ZOMBIE
)

237 
pid
 = 
p
->pid;

238 
	`k‰ì
 (
p
->
k°ack
);

239 
p
->
k°ack
 = 0;

240 
	`‰ìvm
 (
p
->
pgdú
);

241 
p
->
°©e
 = 
UNUSED
;

242 
p
->
pid
 = 0;

243 
p
->
∑ª¡
 = 0;

244 
p
->
«me
[0] = 0;

245 
p
->
kûÀd
 = 0;

246 
	`ªÀa£
 (&
±abÀ
.
lock
);

247  
pid
;

252 i‡(!
havekids
 || 
¥oc
->
kûÀd
)

254 
	`ªÀa£
 (&
±abÀ
.
lock
);

259 
	`¶ìp
 (
¥oc
, &
±abÀ
.
lock
);

261 
	}
}

272 
	$scheduÀr
 ()

274 
¥oc
 *
p
;

279 
	`°i
 ();

282 
	`acquúe
 (&
±abÀ
.
lock
);

283 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

285 i‡(
p
->
°©e
 !
RUNNABLE
)

291 
¥oc
 = 
p
;

292 
	`swôchuvm
 (
p
);

293 
p
->
°©e
 = 
RUNNING
;

294 
	`swtch
 (&
˝u
->
scheduÀr
, 
¥oc
->
c⁄ãxt
);

295 
	`swôchkvm
 ();

299 
¥oc
 = 0;

301 
	`ªÀa£
 (&
±abÀ
.
lock
);

304 
	}
}

309 
	$sched
 ()

311 
öã«
;

313 i‡(!
	`hﬁdög
 (&
±abÀ
.
lock
))

314 
	`∑nic
 ("schedÖtable.lock");

315 i‡(
˝u
->
n˛i
 != 1)

316 
	`∑nic
 ("schedÜocks");

317 i‡(
¥oc
->
°©e
 =
RUNNING
)

318 
	`∑nic
 ("schedÑunning");

319 i‡(
	`ªadeÊags
 (Ë& 
FL_IF
)

320 
	`∑nic
 ("sched interruptible");

321 
öã«
 = 
˝u
->intena;

322 
	`swtch
 (&
¥oc
->
c⁄ãxt
, 
˝u
->
scheduÀr
);

323 
˝u
->
öã«
 = intena;

324 
	}
}

328 
	$yõld
 ()

330 
	`acquúe
 (&
±abÀ
.
lock
);

331 
¥oc
->
°©e
 = 
RUNNABLE
;

332 
	`sched
 ();

333 
	`ªÀa£
 (&
±abÀ
.
lock
);

334 
	}
}

339 
	$f‹kªt
 ()

341 
fú°
 = 1;

343 
	`ªÀa£
 (&
±abÀ
.
lock
);

345 i‡(
fú°
)

350 
fú°
 = 0;

351 
	`öôlog
 ();

355 
	}
}

360 
	$¶ìp
 (*
ch™
, 
•ölock
 *
lk
)

362 i‡(
¥oc
 == 0)

363 
	`∑nic
 ("sleep");

365 i‡(
lk
 == 0)

366 
	`∑nic
 ("sleep withoutÜk");

374 i‡(
lk
 !&
±abÀ
.
lock
)

376 
	`acquúe
 (&
±abÀ
.
lock
);

377 
	`ªÀa£
 (
lk
);

381 
¥oc
->
ch™
 = chan;

382 
¥oc
->
°©e
 = 
SLEEPING
;

383 
	`sched
 ();

386 
¥oc
->
ch™
 = 0;

389 i‡(
lk
 !&
±abÀ
.
lock
)

391 
	`ªÀa£
 (&
±abÀ
.
lock
);

392 
	`acquúe
 (
lk
);

394 
	}
}

400 
	$wakeup1
 (*
ch™
)

402 
¥oc
 *
p
;

404 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

405 i‡(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

406 
p
->
°©e
 = 
RUNNABLE
;

407 
	}
}

411 
	$wakeup
 (*
ch™
)

413 
	`acquúe
 (&
±abÀ
.
lock
);

414 
	`wakeup1
 (
ch™
);

415 
	`ªÀa£
 (&
±abÀ
.
lock
);

416 
	}
}

422 
	$kûl
 (
pid
)

424 
¥oc
 *
p
;

426 
	`acquúe
 (&
±abÀ
.
lock
);

427 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

429 i‡(
p
->
pid
 ==Öid)

431 
p
->
kûÀd
 = 1;

433 i‡(
p
->
°©e
 =
SLEEPING
)

434 
p
->
°©e
 = 
RUNNABLE
;

435 
	`ªÀa£
 (&
±abÀ
.
lock
);

439 
	`ªÀa£
 (&
±abÀ
.
lock
);

441 
	}
}

448 
	$¥ocdump
 ()

450 *
°©es
[] = {

451 [
UNUSED
] "unused",

452 [
EMBRYO
] "embryo",

453 [
SLEEPING
] "sleep ",

454 [
RUNNABLE
] "runble",

455 [
RUNNING
] "run ",

456 [
ZOMBIE
] "zombie"

458 
i
;

459 
¥oc
 *
p
;

460 *
°©e
;

461 
uöt
 
pc
[10];

463 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

465 i‡(
p
->
°©e
 =
UNUSED
)

467 i‡(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
 (
°©es
) && states[p->state])

468 
°©e
 = 
°©es
[
p
->state];

470 
°©e
 = "???";

471 
	`˝rötf
 ("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

472 i‡(
p
->
°©e
 =
SLEEPING
)

474 
	`gëˇŒîpcs
 ((
uöt
 *Ë
p
->
c⁄ãxt
->
ebp
 + 2, 
pc
);

475 
i
 = 0; i < 10 && 
pc
[i] != 0; i++)

476 
	`˝rötf
 (" %p", 
pc
[
i
]);

478 
	`˝rötf
 ("\n");

480 
	}
}

	@proc.h

2 
	#NSEGS
 7

	)

5 
	s˝u


7 
uch¨
 
	mid
;

8 
c⁄ãxt
 *
	mscheduÀr
;

9 
èsk°©e
 
	mts
;

10 
£gdesc
 
	mgdt
[
NSEGS
];

11 vﬁ©ûê
uöt
 
	m°¨ãd
;

12 
	mn˛i
;

13 
	möã«
;

16 
˝u
 *
	m˝u
;

17 
¥oc
 *
	m¥oc
;

20 
˝u
 
˝us
[
NCPU
];

21 
n˝u
;

31 
˝u
 *˝u 
asm
 ("%gs:0");

32 
¥oc
 *¥o¯
asm
 ("%gs:4");

45 
	sc⁄ãxt


47 
uöt
 
	medi
;

48 
uöt
 
	mesi
;

49 
uöt
 
	mebx
;

50 
uöt
 
	mebp
;

51 
uöt
 
	meù
;

54 
	e¥oc°©e


55 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

58 
	s¥oc


60 
uöt
 
	msz
;

61 
pde_t
 *
	mpgdú
;

62 *
	mk°ack
;

63 
¥oc°©e
 
	m°©e
;

64 vﬁ©ûê
	mpid
;

65 
¥oc
 *
	m∑ª¡
;

66 
å≠‰ame
 *
	mtf
;

67 
c⁄ãxt
 *
	mc⁄ãxt
;

68 *
	mch™
;

69 
	mkûÀd
;

70 
fûe
 *
	mofûe
[
NOFILE
];

71 
öode
 *
	mcwd
;

72 
	m«me
[16];

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
 (
¨gc
, *
¨gv
[])

8 
i
;

10 i‡(
¨gc
 < 2)

12 
	`¥ötf
 (2, "Usage:Ñm files...\n");

13 
	`exô
 ();

16 
i
 = 1; i < 
¨gc
; i++)

18 i‡(
	`u∆ök
 (
¨gv
[
i
]) < 0)

20 
	`¥ötf
 (2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

25 
	`exô
 ();

26 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd


18 
	mty≥
;

21 
	sexeccmd


23 
	mty≥
;

24 *
	m¨gv
[
MAXARGS
];

25 *
	mórgv
[
MAXARGS
];

28 
	sªdúcmd


30 
	mty≥
;

31 
cmd
 *
	mcmd
;

32 *
	mfûe
;

33 *
	mefûe
;

34 
	mmode
;

35 
	mfd
;

38 
	spùecmd


40 
	mty≥
;

41 
cmd
 *
	mÀ·
;

42 
cmd
 *
	mright
;

45 
	sli°cmd


47 
	mty≥
;

48 
cmd
 *
	mÀ·
;

49 
cmd
 *
	mright
;

52 
	sbackcmd


54 
	mty≥
;

55 
cmd
 *
	mcmd
;

58 
f‹k1
 ();

59 
∑nic
 (*);

60 
cmd
 *
∑r£cmd
 (*);

64 
	$runcmd
 (
cmd
 *cmd)

66 
p
[2];

67 
backcmd
 *
bcmd
;

68 
execcmd
 *
ecmd
;

69 
li°cmd
 *
lcmd
;

70 
pùecmd
 *
pcmd
;

71 
ªdúcmd
 *
rcmd
;

73 i‡(
cmd
 == 0)

74 
	`exô
 ();

76 
cmd
->
ty≥
)

79 
	`∑nic
 ("runcmd");

81 
EXEC
:

82 
ecmd
 = (
execcmd
 *Ë
cmd
;

83 i‡(
ecmd
->
¨gv
[0] == 0)

84 
	`exô
 ();

85 
	`exec
 (
ecmd
->
¨gv
[0],Écmd->argv);

86 
	`¥ötf
 (2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

89 
REDIR
:

90 
rcmd
 = (
ªdúcmd
 *Ë
cmd
;

91 
	`˛o£
 (
rcmd
->
fd
);

92 i‡(
	`›í
 (
rcmd
->
fûe
,Ñcmd->
mode
) < 0)

94 
	`¥ötf
 (2, "›í %†Áûed\n", 
rcmd
->
fûe
);

95 
	`exô
 ();

97 
	`runcmd
 (
rcmd
->
cmd
);

100 
LIST
:

101 
lcmd
 = (
li°cmd
 *Ë
cmd
;

102 i‡(
	`f‹k1
 () == 0)

103 
	`runcmd
 (
lcmd
->
À·
);

104 
	`waô
 ();

105 
	`runcmd
 (
lcmd
->
right
);

108 
PIPE
:

109 
pcmd
 = (
pùecmd
 *Ë
cmd
;

110 i‡(
	`pùe
 (
p
) < 0)

111 
	`∑nic
 ("pipe");

112 i‡(
	`f‹k1
 () == 0)

114 
	`˛o£
 (1);

115 
	`dup
 (
p
[1]);

116 
	`˛o£
 (
p
[0]);

117 
	`˛o£
 (
p
[1]);

118 
	`runcmd
 (
pcmd
->
À·
);

120 i‡(
	`f‹k1
 () == 0)

122 
	`˛o£
 (0);

123 
	`dup
 (
p
[0]);

124 
	`˛o£
 (
p
[0]);

125 
	`˛o£
 (
p
[1]);

126 
	`runcmd
 (
pcmd
->
right
);

128 
	`˛o£
 (
p
[0]);

129 
	`˛o£
 (
p
[1]);

130 
	`waô
 ();

131 
	`waô
 ();

134 
BACK
:

135 
bcmd
 = (
backcmd
 *Ë
cmd
;

136 i‡(
	`f‹k1
 () == 0)

137 
	`runcmd
 (
bcmd
->
cmd
);

140 
	`exô
 ();

141 
	}
}

144 
	$gëcmd
 (*
buf
, 
nbuf
)

146 
	`¥ötf
 (2, "$ ");

147 
	`mem£t
 (
buf
, 0, 
nbuf
);

148 
	`gës
 (
buf
, 
nbuf
);

149 i‡(
buf
[0] == 0)

152 
	}
}

155 
	$maö
 ()

157 
buf
[100];

158 
fd
;

161 (
fd
 = 
	`›í
 ("c⁄sﬁe", 
O_RDWR
)) >= 0)

163 i‡(
fd
 >= 3)

165 
	`˛o£
 (
fd
);

171 
	`gëcmd
 (
buf
,  (buf)) >= 0)

173 i‡(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' ')

177 
buf
[
	`°æí
 (buf) - 1] = 0;

178 i‡(
	`chdú
 (
buf
 + 3) < 0)

179 
	`¥ötf
 (2, "ˇ¬Ÿ cd %s\n", 
buf
 + 3);

182 i‡(
	`f‹k1
 () == 0)

183 
	`runcmd
 (
	`∑r£cmd
 (
buf
));

184 
	`waô
 ();

186 
	`exô
 ();

187 
	}
}

190 
	$∑nic
 (*
s
)

192 
	`¥ötf
 (2, "%s\n", 
s
);

193 
	`exô
 ();

194 
	}
}

197 
	$f‹k1
 ()

199 
pid
;

201 
pid
 = 
	`f‹k
 ();

202 i‡(
pid
 == -1)

203 
	`∑nic
 ("fork");

204  
pid
;

205 
	}
}

210 
cmd
 *

211 
	$execcmd
 ()

213 
execcmd
 *
cmd
;

215 
cmd
 = 
	`mÆloc
 ( (*cmd));

216 
	`mem£t
 (
cmd
, 0,  (*cmd));

217 
cmd
->
ty≥
 = 
EXEC
;

218  (
cmd
 *) cmd;

219 
	}
}

221 
cmd
 *

222 
	$ªdúcmd
 (
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

224 
ªdúcmd
 *
cmd
;

226 
cmd
 = 
	`mÆloc
 ( (*cmd));

227 
	`mem£t
 (
cmd
, 0,  (*cmd));

228 
cmd
->
ty≥
 = 
REDIR
;

229 
cmd
->cmd = 
subcmd
;

230 
cmd
->
fûe
 = file;

231 
cmd
->
efûe
 =Éfile;

232 
cmd
->
mode
 = mode;

233 
cmd
->
fd
 = fd;

234  (
cmd
 *) cmd;

235 
	}
}

237 
cmd
 *

238 
	$pùecmd
 (
cmd
 *
À·
, cmd *
right
)

240 
pùecmd
 *
cmd
;

242 
cmd
 = 
	`mÆloc
 ( (*cmd));

243 
	`mem£t
 (
cmd
, 0,  (*cmd));

244 
cmd
->
ty≥
 = 
PIPE
;

245 
cmd
->
À·
 =Üeft;

246 
cmd
->
right
 =Ñight;

247  (
cmd
 *) cmd;

248 
	}
}

250 
cmd
 *

251 
	$li°cmd
 (
cmd
 *
À·
, cmd *
right
)

253 
li°cmd
 *
cmd
;

255 
cmd
 = 
	`mÆloc
 ( (*cmd));

256 
	`mem£t
 (
cmd
, 0,  (*cmd));

257 
cmd
->
ty≥
 = 
LIST
;

258 
cmd
->
À·
 =Üeft;

259 
cmd
->
right
 =Ñight;

260  (
cmd
 *) cmd;

261 
	}
}

263 
cmd
 *

264 
	$backcmd
 (
cmd
 *
subcmd
)

266 
backcmd
 *
cmd
;

268 
cmd
 = 
	`mÆloc
 ( (*cmd));

269 
	`mem£t
 (
cmd
, 0,  (*cmd));

270 
cmd
->
ty≥
 = 
BACK
;

271 
cmd
->cmd = 
subcmd
;

272  (
cmd
 *) cmd;

273 
	}
}

278 
	gwhôe•a˚
[] = " \t\r\n\v";

279 
	gsymbﬁs
[] = "<|>&;()";

282 
	$gëtokí
 (**
ps
, *
es
, **
q
, **
eq
)

284 *
s
;

285 
ªt
;

287 
s
 = *
ps
;

288 
s
 < 
es
 && 
	`°rchr
 (
whôe•a˚
, *s))

289 
s
++;

290 i‡(
q
)

291 *
q
 = 
s
;

292 
ªt
 = *
s
;

293 *
s
)

303 
s
++;

306 
s
++;

307 i‡(*
s
 == '>')

309 
ªt
 = '+';

310 
s
++;

314 
ªt
 = 'a';

315 
s
 < 
es
 && !
	`°rchr
 (
whôe•a˚
, *sË&& !°rch∏(
symbﬁs
, *s))

316 
s
++;

319 i‡(
eq
)

320 *
eq
 = 
s
;

322 
s
 < 
es
 && 
	`°rchr
 (
whôe•a˚
, *s))

323 
s
++;

324 *
ps
 = 
s
;

325  
ªt
;

326 
	}
}

329 
	$≥ek
 (**
ps
, *
es
, *
toks
)

331 *
s
;

333 
s
 = *
ps
;

334 
s
 < 
es
 && 
	`°rchr
 (
whôe•a˚
, *s))

335 
s
++;

336 *
ps
 = 
s
;

337  *
s
 && 
	`°rchr
 (
toks
, *s);

338 
	}
}

340 
cmd
 *
∑r£löe
 (**, *);

341 
cmd
 *
∑r£pùe
 (**, *);

342 
cmd
 *
∑r£exec
 (**, *);

343 
cmd
 *
nu…îmö©e
 (cmd *);

345 
cmd
 *

346 
	$∑r£cmd
 (*
s
)

348 *
es
;

349 
cmd
 *cmd;

351 
es
 = 
s
 + 
	`°æí
 (s);

352 
cmd
 = 
	`∑r£löe
 (&
s
, 
es
);

353 
	`≥ek
 (&
s
, 
es
, "");

354 i‡(
s
 !
es
)

356 
	`¥ötf
 (2, "À·ovîs: %s\n", 
s
);

357 
	`∑nic
 ("syntax");

359 
	`nu…îmö©e
 (
cmd
);

360  
cmd
;

361 
	}
}

363 
cmd
 *

364 
	$∑r£löe
 (**
ps
, *
es
)

366 
cmd
 *cmd;

368 
cmd
 = 
	`∑r£pùe
 (
ps
, 
es
);

369 
	`≥ek
 (
ps
, 
es
, "&"))

371 
	`gëtokí
 (
ps
, 
es
, 0, 0);

372 
cmd
 = 
	`backcmd
 (cmd);

374 i‡(
	`≥ek
 (
ps
, 
es
, ";"))

376 
	`gëtokí
 (
ps
, 
es
, 0, 0);

377 
cmd
 = 
	`li°cmd
 (cmd, 
	`∑r£löe
 (
ps
, 
es
));

379  
cmd
;

380 
	}
}

382 
cmd
 *

383 
	$∑r£pùe
 (**
ps
, *
es
)

385 
cmd
 *cmd;

387 
cmd
 = 
	`∑r£exec
 (
ps
, 
es
);

388 i‡(
	`≥ek
 (
ps
, 
es
, "|"))

390 
	`gëtokí
 (
ps
, 
es
, 0, 0);

391 
cmd
 = 
	`pùecmd
 (cmd, 
	`∑r£pùe
 (
ps
, 
es
));

393  
cmd
;

394 
	}
}

396 
cmd
 *

397 
	$∑r£ªdús
 (
cmd
 *cmd, **
ps
, *
es
)

399 
tok
;

400 *
q
, *
eq
;

402 
	`≥ek
 (
ps
, 
es
, "<>"))

404 
tok
 = 
	`gëtokí
 (
ps
, 
es
, 0, 0);

405 i‡(
	`gëtokí
 (
ps
, 
es
, &
q
, &
eq
) != 'a')

406 
	`∑nic
 ("missing file forÑedirection");

407 
tok
)

410 
cmd
 = 
	`ªdúcmd
 (cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

413 
cmd
 = 
	`ªdúcmd
 (cmd, 
q
, 
eq
, 
O_WRONLY
 | 
O_CREATE
, 1);

416 
cmd
 = 
	`ªdúcmd
 (cmd, 
q
, 
eq
, 
O_WRONLY
 | 
O_CREATE
, 1);

420  
cmd
;

421 
	}
}

423 
cmd
 *

424 
	$∑r£block
 (**
ps
, *
es
)

426 
cmd
 *cmd;

428 i‡(!
	`≥ek
 (
ps
, 
es
, "("))

429 
	`∑nic
 ("parseblock");

430 
	`gëtokí
 (
ps
, 
es
, 0, 0);

431 
cmd
 = 
	`∑r£löe
 (
ps
, 
es
);

432 i‡(!
	`≥ek
 (
ps
, 
es
, ")"))

433 
	`∑nic
 ("syntax - missing )");

434 
	`gëtokí
 (
ps
, 
es
, 0, 0);

435 
cmd
 = 
	`∑r£ªdús
 (cmd, 
ps
, 
es
);

436  
cmd
;

437 
	}
}

439 
cmd
 *

440 
	$∑r£exec
 (**
ps
, *
es
)

442 *
q
, *
eq
;

443 
tok
, 
¨gc
;

444 
execcmd
 *
cmd
;

445 
cmd
 *
ªt
;

447 i‡(
	`≥ek
 (
ps
, 
es
, "("))

448  
	`∑r£block
 (
ps
, 
es
);

450 
ªt
 = 
	`execcmd
 ();

451 
cmd
 = (
execcmd
 *Ë
ªt
;

453 
¨gc
 = 0;

454 
ªt
 = 
	`∑r£ªdús
 (ªt, 
ps
, 
es
);

455 !
	`≥ek
 (
ps
, 
es
, "|)&;"))

457 i‡((
tok
 = 
	`gëtokí
 (
ps
, 
es
, &
q
, &
eq
)) == 0)

459 i‡(
tok
 != 'a')

460 
	`∑nic
 ("syntax");

461 
cmd
->
¨gv
[
¨gc
] = 
q
;

462 
cmd
->
órgv
[
¨gc
] = 
eq
;

463 
¨gc
++;

464 i‡(
¨gc
 >
MAXARGS
)

465 
	`∑nic
 ("too manyárgs");

466 
ªt
 = 
	`∑r£ªdús
 (ªt, 
ps
, 
es
);

468 
cmd
->
¨gv
[
¨gc
] = 0;

469 
cmd
->
órgv
[
¨gc
] = 0;

470  
ªt
;

471 
	}
}

474 
cmd
 *

475 
	$nu…îmö©e
 (
cmd
 *cmd)

477 
i
;

478 
backcmd
 *
bcmd
;

479 
execcmd
 *
ecmd
;

480 
li°cmd
 *
lcmd
;

481 
pùecmd
 *
pcmd
;

482 
ªdúcmd
 *
rcmd
;

484 i‡(
cmd
 == 0)

487 
cmd
->
ty≥
)

489 
EXEC
:

490 
ecmd
 = (
execcmd
 *Ë
cmd
;

491 
i
 = 0; 
ecmd
->
¨gv
[i]; i++)

492 *
ecmd
->
órgv
[
i
] = 0;

495 
REDIR
:

496 
rcmd
 = (
ªdúcmd
 *Ë
cmd
;

497 
	`nu…îmö©e
 (
rcmd
->
cmd
);

498 *
rcmd
->
efûe
 = 0;

501 
PIPE
:

502 
pcmd
 = (
pùecmd
 *Ë
cmd
;

503 
	`nu…îmö©e
 (
pcmd
->
À·
);

504 
	`nu…îmö©e
 (
pcmd
->
right
);

507 
LIST
:

508 
lcmd
 = (
li°cmd
 *Ë
cmd
;

509 
	`nu…îmö©e
 (
lcmd
->
À·
);

510 
	`nu…îmö©e
 (
lcmd
->
right
);

513 
BACK
:

514 
bcmd
 = (
backcmd
 *Ë
cmd
;

515 
	`nu…îmö©e
 (
bcmd
->
cmd
);

518  
cmd
;

519 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

10 
	~"•ölock.h
"

13 
	$öôlock
 (
•ölock
 *
lk
, *
«me
)

15 
lk
->
«me
 =Çame;

16 
lk
->
locked
 = 0;

17 
lk
->
˝u
 = 0;

18 
	}
}

25 
	$acquúe
 (
•ölock
 *
lk
)

27 
	`push˛i
 ();

28 i‡(
	`hﬁdög
 (
lk
))

29 
	`∑nic
 ("acquire");

34 
	`xchg
 (&
lk
->
locked
, 1) != 0)

38 
lk
->
˝u
 = cpu;

39 
	`gëˇŒîpcs
 (&
lk
,Ük->
pcs
);

40 
	}
}

44 
	$ªÀa£
 (
•ölock
 *
lk
)

46 i‡(!
	`hﬁdög
 (
lk
))

47 
	`∑nic
 ("release");

49 
lk
->
pcs
[0] = 0;

50 
lk
->
˝u
 = 0;

61 
	`xchg
 (&
lk
->
locked
, 0);

63 
	`p›˛i
 ();

64 
	}
}

68 
	$gëˇŒîpcs
 (*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
 *Ë
v
 - 2;

74 
i
 = 0; i < 10; i++)

76 i‡(
ebp
 =0 ||Éb∞< (
uöt
 *Ë
KERNBASE
 ||Ébp == (uint *) 0xffffffff)

78 
pcs
[
i
] = 
ebp
[1];

79 
ebp
 = (
uöt
 *)Ébp[0];

81 ; 
i
 < 10; i++)

82 
pcs
[
i
] = 0;

83 
	}
}

87 
	$hﬁdög
 (
•ölock
 *
lock
)

89  
lock
->
locked
 &&Üock->
˝u
 == cpu;

90 
	}
}

98 
	$push˛i
 ()

100 
eÊags
;

102 
eÊags
 = 
	`ªadeÊags
 ();

103 
	`˛i
 ();

104 i‡(
˝u
->
n˛i
++ == 0)

105 
˝u
->
öã«
 = 
eÊags
 & 
FL_IF
;

106 
	}
}

109 
	$p›˛i
 ()

111 i‡(
	`ªadeÊags
 (Ë& 
FL_IF
)

112 
	`∑nic
 ("popcli - interruptible");

113 i‡(--
˝u
->
n˛i
 < 0)

114 
	`∑nic
 ("popcli");

115 i‡(
˝u
->
n˛i
 =0 && cpu->
öã«
)

116 
	`°i
 ();

117 
	}
}

	@spinlock.h

2 
	s•ölock


4 
uöt
 
	mlocked
;

7 *
	m«me
;

8 
˝u
 *
	m˝u
;

9 
uöt
 
	mpcs
[10];

	@stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEV
 3

4 

	)

5 
	s°©


7 
	mty≥
;

8 
	mdev
;

9 
uöt
 
	möo
;

10 
	m∆ök
;

11 
uöt
 
	msize
;

	@stressfs.c

10 
	~"ty≥s.h
"

11 
	~"°©.h
"

12 
	~"u£r.h
"

13 
	~"fs.h
"

14 
	~"f˙é.h
"

17 
	$maö
 (
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
 (1, "stressfs starting\n");

24 
	`mem£t
 (
d©a
, 'a',  (data));

26 
i
 = 0; i < 4; i++)

27 i‡(
	`f‹k
 () > 0)

30 
	`¥ötf
 (1, "wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
 (
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
 (
fd
, 
d©a
,  (data));

37 
	`˛o£
 (
fd
);

39 
	`¥ötf
 (1, "read\n");

41 
fd
 = 
	`›í
 (
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
 (
fd
, 
d©a
,  (data));

44 
	`˛o£
 (
fd
);

46 
	`waô
 ();

48 
	`exô
 ();

49 
	}
}

	@string.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

5 
	$mem£t
 (*
d°
, 
c
, 
uöt
 
n
)

7 i‡((Ë
d°
 % 4 =0 && 
n
 % 4 == 0)

9 
c
 &= 0xFF;

10 
	`°o¶
 (
d°
, (
c
 << 24Ë| (¯<< 16Ë| (¯<< 8Ë| c, 
n
 / 4);

13 
	`°osb
 (
d°
, 
c
, 
n
);

14  
d°
;

15 
	}
}

18 
	$memcmp
 (c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

20 c⁄° 
uch¨
 *
s1
, *
s2
;

22 
s1
 = 
v1
;

23 
s2
 = 
v2
;

24 
n
-- > 0)

26 i‡(*
s1
 !*
s2
)

27  *
s1
 - *
s2
;

28 
s1
++, 
s2
++;

32 
	}
}

35 
	$memmove
 (*
d°
, c⁄° *
§c
, 
uöt
 
n
)

37 c⁄° *
s
;

38 *
d
;

40 
s
 = 
§c
;

41 
d
 = 
d°
;

42 i‡(
s
 < 
d
 && s + 
n
 > d)

44 
s
 +
n
;

45 
d
 +
n
;

46 
n
-- > 0)

47 *--
d
 = *--
s
;

50 
n
-- > 0)

51 *
d
++ = *
s
++;

53  
d°
;

54 
	}
}

58 
	$mem˝y
 (*
d°
, c⁄° *
§c
, 
uöt
 
n
)

60  
	`memmove
 (
d°
, 
§c
, 
n
);

61 
	}
}

64 
	$°∫cmp
 (c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

66 
n
 > 0 && *
p
 && *∞=*
q
)

67 
n
--, 
p
++, 
q
++;

68 i‡(
n
 == 0)

70  (
uch¨
Ë* 
p
 - (uch¨Ë* 
q
;

71 
	}
}

74 
	$°∫˝y
 (*
s
, c⁄° *
t
, 
n
)

76 *
os
;

78 
os
 = 
s
;

79 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

81 
n
-- > 0)

82 *
s
++ = 0;

83  
os
;

84 
	}
}

88 
	$ß„°r˝y
 (*
s
, c⁄° *
t
, 
n
)

90 *
os
;

92 
os
 = 
s
;

93 i‡(
n
 <= 0)

94  
os
;

95 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

97 *
s
 = 0;

98  
os
;

99 
	}
}

102 
	$°æí
 (c⁄° *
s
)

104 
n
;

106 
n
 = 0; 
s
[n];Ç++)

108  
n
;

109 
	}
}

	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"sysˇŒ.h
"

18 
	$„tchöt
 (
uöt
 
addr
, *
ù
)

20 i‡(
addr
 >
¥oc
->
sz
 ||áddr + 4 >Öroc->sz)

22 *
ù
 = *(*Ë(
addr
);

24 
	}
}

30 
	$„tch°r
 (
uöt
 
addr
, **
µ
)

32 *
s
, *
ï
;

34 i‡(
addr
 >
¥oc
->
sz
)

36 *
µ
 = (*Ë
addr
;

37 
ï
 = (*Ë
¥oc
->
sz
;

38 
s
 = *
µ
; s < 
ï
; s++)

39 i‡(*
s
 == 0)

40  
s
 - *
µ
;

42 
	}
}

46 
	$¨göt
 (
n
, *
ù
)

48  
	`„tchöt
 (
¥oc
->
tf
->
e•
 + 4 + 4 * 
n
, 
ù
);

49 
	}
}

55 
	$¨g±r
 (
n
, **
µ
, 
size
)

57 
i
;

59 i‡(
	`¨göt
 (
n
, &
i
) < 0)

61 i‡((
uöt
Ë
i
 >
¥oc
->
sz
 || (uötËò+ 
size
 >Öroc->sz)

63 *
µ
 = (*Ë
i
;

65 
	}
}

72 
	$¨g°r
 (
n
, **
µ
)

74 
addr
;

75 i‡(
	`¨göt
 (
n
, &
addr
) < 0)

77  
	`„tch°r
 (
addr
, 
µ
);

78 
	}
}

80 
sys_chdú
 ();

81 
sys_˛o£
 ();

82 
sys_dup
 ();

83 
sys_exec
 ();

84 
sys_exô
 ();

85 
sys_f‹k
 ();

86 
sys_f°©
 ();

87 
sys_gëpid
 ();

88 
sys_kûl
 ();

89 
sys_lök
 ();

90 
sys_mkdú
 ();

91 
sys_mknod
 ();

92 
sys_›í
 ();

93 
sys_pùe
 ();

94 
sys_ªad
 ();

95 
sys_sbrk
 ();

96 
sys_¶ìp
 ();

97 
sys_u∆ök
 ();

98 
sys_waô
 ();

99 
sys_wrôe
 ();

100 
sys_u±ime
 ();

102 (*
sysˇŒs
[]) () =

104 [
SYS_f‹k
] 
sys_f‹k
,

105 [
SYS_exô
] 
sys_exô
,

106 [
SYS_waô
] 
sys_waô
,

107 [
SYS_pùe
] 
sys_pùe
,

108 [
SYS_ªad
] 
sys_ªad
,

109 [
SYS_kûl
] 
sys_kûl
,

110 [
SYS_exec
] 
sys_exec
,

111 [
SYS_f°©
] 
sys_f°©
,

112 [
SYS_chdú
] 
sys_chdú
,

113 [
SYS_dup
] 
sys_dup
,

114 [
SYS_gëpid
] 
sys_gëpid
,

115 [
SYS_sbrk
] 
sys_sbrk
,

116 [
SYS_¶ìp
] 
sys_¶ìp
,

117 [
SYS_u±ime
] 
sys_u±ime
,

118 [
SYS_›í
] 
sys_›í
,

119 [
SYS_wrôe
] 
sys_wrôe
,

120 [
SYS_mknod
] 
sys_mknod
,

121 [
SYS_u∆ök
] 
sys_u∆ök
,

122 [
SYS_lök
] 
sys_lök
,[
SYS_mkdú
] 
sys_mkdú
,[
SYS_˛o£
] 
sys_˛o£
,
	}
};

125 
	$sysˇŒ
 ()

127 
num
;

129 
num
 = 
¥oc
->
tf
->
óx
;

130 i‡(
num
 >0 &&Çum < 
SYS_›í
 && 
sysˇŒs
[num])

132 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
] ();

134 i‡(
num
 >
SYS_›í
 &&Çum < 
	`NELEM
 (
sysˇŒs
) && syscalls[num])

136 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
] ();

140 
	`˝rötf
 ("%d %s: unknow¿sy†ˇŒ %d\n", 
¥oc
->
pid
,Öroc->
«me
, 
num
);

141 
¥oc
->
tf
->
óx
 = -1;

143 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

17 
	#SYS_›í
 15

	)

18 
	#SYS_wrôe
 16

	)

19 
	#SYS_mknod
 17

	)

20 
	#SYS_u∆ök
 18

	)

21 
	#SYS_lök
 19

	)

22 
	#SYS_mkdú
 20

	)

23 
	#SYS_˛o£
 21

	)

	@sysfile.c

7 
	~"ty≥s.h
"

8 
	~"defs.h
"

9 
	~"∑øm.h
"

10 
	~"°©.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"fs.h
"

14 
	~"fûe.h
"

15 
	~"f˙é.h
"

20 
	$¨gfd
 (
n
, *
pfd
, 
fûe
 **
pf
)

22 
fd
;

23 
fûe
 *
f
;

25 i‡(
	`¨göt
 (
n
, &
fd
) < 0)

27 i‡(
fd
 < 0 || fd >
NOFILE
 || (
f
 = 
¥oc
->
ofûe
[fd]) == 0)

29 i‡(
pfd
)

30 *
pfd
 = 
fd
;

31 i‡(
pf
)

32 *
pf
 = 
f
;

34 
	}
}

39 
	$fdÆloc
 (
fûe
 *
f
)

41 
fd
;

43 
fd
 = 0; fd < 
NOFILE
; fd++)

45 i‡(
¥oc
->
ofûe
[
fd
] == 0)

47 
¥oc
->
ofûe
[
fd
] = 
f
;

48  
fd
;

52 
	}
}

55 
	$sys_dup
 ()

57 
fûe
 *
f
;

58 
fd
;

60 i‡(
	`¨gfd
 (0, 0, &
f
) < 0)

62 i‡((
fd
 = 
	`fdÆloc
 (
f
)) < 0)

64 
	`fûedup
 (
f
);

65  
fd
;

66 
	}
}

69 
	$sys_ªad
 ()

71 
fûe
 *
f
;

72 
n
;

73 *
p
;

75 i‡(
	`¨gfd
 (0, 0, &
f
Ë< 0 || 
	`¨göt
 (2, &
n
Ë< 0 || 
	`¨g±r
 (1, &
p
,Ç) < 0)

77  
	`fûîód
 (
f
, 
p
, 
n
);

78 
	}
}

81 
	$sys_wrôe
 ()

83 
fûe
 *
f
;

84 
n
;

85 *
p
;

87 i‡(
	`¨gfd
 (0, 0, &
f
Ë< 0 || 
	`¨göt
 (2, &
n
Ë< 0 || 
	`¨g±r
 (1, &
p
,Ç) < 0)

89  
	`fûewrôe
 (
f
, 
p
, 
n
);

90 
	}
}

93 
	$sys_˛o£
 ()

95 
fd
;

96 
fûe
 *
f
;

98 i‡(
	`¨gfd
 (0, &
fd
, &
f
) < 0)

100 
¥oc
->
ofûe
[
fd
] = 0;

101 
	`fûe˛o£
 (
f
);

103 
	}
}

106 
	$sys_f°©
 ()

108 
fûe
 *
f
;

109 
°©
 *
°
;

111 i‡(
	`¨gfd
 (0, 0, &
f
Ë< 0 || 
	`¨g±r
 (1, (*Ë&
°
,  (*st)) < 0)

113  
	`fûe°©
 (
f
, 
°
);

114 
	}
}

118 
	$sys_lök
 ()

120 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

121 
öode
 *
dp
, *
ù
;

123 i‡(
	`¨g°r
 (0, &
ﬁd
Ë< 0 ||árg°∏(1, &
√w
) < 0)

125 i‡((
ù
 = 
	`«mei
 (
ﬁd
)) == 0)

128 
	`begö_å™s
 ();

130 
	`ûock
 (
ù
);

131 i‡(
ù
->
ty≥
 =
T_DIR
)

133 
	`iu∆ockput
 (
ù
);

134 
	`commô_å™s
 ();

138 
ù
->
∆ök
++;

139 
	`iupd©e
 (
ù
);

140 
	`iu∆ock
 (
ù
);

142 i‡((
dp
 = 
	`«meù¨ít
 (
√w
, 
«me
)) == 0)

143 
bad
;

144 
	`ûock
 (
dp
);

145 i‡(
dp
->
dev
 !
ù
->dev || 
	`dúlök
 (dp, 
«me
, ip->
öum
) < 0)

147 
	`iu∆ockput
 (
dp
);

148 
bad
;

150 
	`iu∆ockput
 (
dp
);

151 
	`ùut
 (
ù
);

153 
	`commô_å™s
 ();

157 
bad
:

158 
	`ûock
 (
ù
);

159 
ù
->
∆ök
--;

160 
	`iupd©e
 (
ù
);

161 
	`iu∆ockput
 (
ù
);

162 
	`commô_å™s
 ();

164 
	}
}

168 
	$isdúem±y
 (
öode
 *
dp
)

170 
off
;

171 
dúít
 
de
;

173 
off
 = 2 *  (
de
); of‡< 
dp
->
size
; off +=  (de))

175 i‡(
	`ªadi
 (
dp
, (*Ë&
de
, 
off
,  (de)) !=  (de))

176 
	`∑nic
 ("isdirempty:Ñeadi");

177 i‡(
de
.
öum
 != 0)

181 
	}
}

185 
	$sys_u∆ök
 ()

187 
öode
 *
ù
, *
dp
;

188 
dúít
 
de
;

189 
«me
[
DIRSIZ
], *
∑th
;

190 
uöt
 
off
;

192 i‡(
	`¨g°r
 (0, &
∑th
) < 0)

194 i‡((
dp
 = 
	`«meù¨ít
 (
∑th
, 
«me
)) == 0)

197 
	`begö_å™s
 ();

199 
	`ûock
 (
dp
);

202 i‡(
	`«mecmp
 (
«me
, ".") == 0 ||Çamecmp (name, "..") == 0)

203 
bad
;

205 i‡((
ù
 = 
	`dúlookup
 (
dp
, 
«me
, &
off
)) == 0)

206 
bad
;

207 
	`ûock
 (
ù
);

209 i‡(
ù
->
∆ök
 < 1)

210 
	`∑nic
 ("unlink:Çlink < 1");

211 i‡(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
 (ip))

213 
	`iu∆ockput
 (
ù
);

214 
bad
;

217 
	`mem£t
 (&
de
, 0,  (de));

218 i‡(
	`wrôei
 (
dp
, (*Ë&
de
, 
off
,  (de)) !=  (de))

219 
	`∑nic
 ("unlink: writei");

220 i‡(
ù
->
ty≥
 =
T_DIR
)

222 
dp
->
∆ök
--;

223 
	`iupd©e
 (
dp
);

225 
	`iu∆ockput
 (
dp
);

227 
ù
->
∆ök
--;

228 
	`iupd©e
 (
ù
);

229 
	`iu∆ockput
 (
ù
);

231 
	`commô_å™s
 ();

235 
bad
:

236 
	`iu∆ockput
 (
dp
);

237 
	`commô_å™s
 ();

239 
	}
}

241 
öode
 *

242 
	$¸óã
 (*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

244 
uöt
 
off
;

245 
öode
 *
ù
, *
dp
;

246 
«me
[
DIRSIZ
];

248 i‡((
dp
 = 
	`«meù¨ít
 (
∑th
, 
«me
)) == 0)

250 
	`ûock
 (
dp
);

252 i‡((
ù
 = 
	`dúlookup
 (
dp
, 
«me
, &
off
)) != 0)

254 
	`iu∆ockput
 (
dp
);

255 
	`ûock
 (
ù
);

256 i‡(
ty≥
 =
T_FILE
 && 
ù
->type == T_FILE)

257  
ù
;

258 
	`iu∆ockput
 (
ù
);

262 i‡((
ù
 = 
	`üŒoc
 (
dp
->
dev
, 
ty≥
)) == 0)

263 
	`∑nic
 ("create: ialloc");

265 
	`ûock
 (
ù
);

266 
ù
->
maj‹
 = major;

267 
ù
->
mö‹
 = minor;

268 
ù
->
∆ök
 = 1;

269 
	`iupd©e
 (
ù
);

271 i‡(
ty≥
 =
T_DIR
)

273 
dp
->
∆ök
++;

274 
	`iupd©e
 (
dp
);

276 i‡(
	`dúlök
 (
ù
, ".", ip->
öum
) < 0

277 || 
	`dúlök
 (
ù
, "..", 
dp
->
öum
) < 0)

278 
	`∑nic
 ("create dots");

281 i‡(
	`dúlök
 (
dp
, 
«me
, 
ù
->
öum
) < 0)

282 
	`∑nic
 ("create: dirlink");

284 
	`iu∆ockput
 (
dp
);

286  
ù
;

287 
	}
}

290 
	$sys_›í
 ()

292 *
∑th
;

293 
fd
, 
omode
;

294 
fûe
 *
f
;

295 
öode
 *
ù
;

297 i‡(
	`¨g°r
 (0, &
∑th
Ë< 0 || 
	`¨göt
 (1, &
omode
) < 0)

299 i‡(
omode
 & 
O_CREATE
)

301 
	`begö_å™s
 ();

302 
ù
 = 
	`¸óã
 (
∑th
, 
T_FILE
, 0, 0);

303 
	`commô_å™s
 ();

304 i‡(
ù
 == 0)

309 i‡((
ù
 = 
	`«mei
 (
∑th
)) == 0)

311 
	`ûock
 (
ù
);

312 i‡(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
)

314 
	`iu∆ockput
 (
ù
);

319 i‡((
f
 = 
	`fûóŒoc
 ()Ë=0 || (
fd
 = 
	`fdÆloc
 (f)) < 0)

321 i‡(
f
)

322 
	`fûe˛o£
 (
f
);

323 
	`iu∆ockput
 (
ù
);

326 
	`iu∆ock
 (
ù
);

328 
f
->
ty≥
 = 
FD_INODE
;

329 
f
->
ù
 = ip;

330 
f
->
off
 = 0;

331 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

332 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

333  
fd
;

334 
	}
}

337 
	$sys_mkdú
 ()

339 *
∑th
;

340 
öode
 *
ù
;

342 
	`begö_å™s
 ();

343 i‡(
	`¨g°r
 (0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
 (∑th, 
T_DIR
, 0, 0)) == 0)

345 
	`commô_å™s
 ();

348 
	`iu∆ockput
 (
ù
);

349 
	`commô_å™s
 ();

351 
	}
}

354 
	$sys_mknod
 ()

356 
öode
 *
ù
;

357 *
∑th
;

358 
Àn
;

359 
maj‹
, 
mö‹
;

361 
	`begö_å™s
 ();

362 i‡((
Àn
 = 
	`¨g°r
 (0, &
∑th
)) < 0 ||

363 
	`¨göt
 (1, &
maj‹
) < 0 ||

364 
	`¨göt
 (2, &
mö‹
) < 0 ||

365 (
ù
 = 
	`¸óã
 (
∑th
, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0)

367 
	`commô_å™s
 ();

370 
	`iu∆ockput
 (
ù
);

371 
	`commô_å™s
 ();

373 
	}
}

376 
	$sys_chdú
 ()

378 *
∑th
;

379 
öode
 *
ù
;

381 i‡(
	`¨g°r
 (0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
 (path)) == 0)

383 
	`ûock
 (
ù
);

384 i‡(
ù
->
ty≥
 !
T_DIR
)

386 
	`iu∆ockput
 (
ù
);

389 
	`iu∆ock
 (
ù
);

390 
	`ùut
 (
¥oc
->
cwd
);

391 
¥oc
->
cwd
 = 
ù
;

393 
	}
}

396 
	$sys_exec
 ()

398 *
∑th
, *
¨gv
[
MAXARG
];

399 
i
;

400 
uöt
 
u¨gv
, 
u¨g
;

402 i‡(
	`¨g°r
 (0, &
∑th
Ë< 0 || 
	`¨göt
 (1, (*Ë&
u¨gv
) < 0)

406 
	`mem£t
 (
¨gv
, 0,  (argv));

407 
i
 = 0;; i++)

409 i‡(
i
 >
	`NELEM
 (
¨gv
))

411 i‡(
	`„tchöt
 (
u¨gv
 + 4 * 
i
, (*Ë&
u¨g
) < 0)

413 i‡(
u¨g
 == 0)

415 
¨gv
[
i
] = 0;

418 i‡(
	`„tch°r
 (
u¨g
, &
¨gv
[
i
]) < 0)

421  
	`exec
 (
∑th
, 
¨gv
);

422 
	}
}

425 
	$sys_pùe
 ()

427 *
fd
;

428 
fûe
 *
rf
, *
wf
;

429 
fd0
, 
fd1
;

431 i‡(
	`¨g±r
 (0, (*Ë&
fd
, 2 *  (fd[0])) < 0)

433 i‡(
	`pùóŒoc
 (&
rf
, &
wf
) < 0)

435 
fd0
 = -1;

436 i‡((
fd0
 = 
	`fdÆloc
 (
rf
)Ë< 0 || (
fd1
 = fdÆlo¯(
wf
)) < 0)

438 i‡(
fd0
 >= 0)

439 
¥oc
->
ofûe
[
fd0
] = 0;

440 
	`fûe˛o£
 (
rf
);

441 
	`fûe˛o£
 (
wf
);

444 
fd
[0] = 
fd0
;

445 
fd
[1] = 
fd1
;

447 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

10 
	$sys_f‹k
 ()

12  
	`f‹k
 ();

13 
	}
}

16 
	$sys_exô
 ()

18 
	`exô
 ();

20 
	}
}

23 
	$sys_waô
 ()

25  
	`waô
 ();

26 
	}
}

29 
	$sys_kûl
 ()

31 
pid
;

33 i‡(
	`¨göt
 (0, &
pid
) < 0)

35  
	`kûl
 (
pid
);

36 
	}
}

39 
	$sys_gëpid
 ()

41  
¥oc
->
pid
;

42 
	}
}

45 
	$sys_sbrk
 ()

47 
addr
;

48 
n
;

50 i‡(
	`¨göt
 (0, &
n
) < 0)

52 
addr
 = 
¥oc
->
sz
;

53 i‡(
	`grow¥oc
 (
n
) < 0)

55  
addr
;

56 
	}
}

59 
	$sys_¶ìp
 ()

61 
n
;

62 
uöt
 
ticks0
;

64 i‡(
	`¨göt
 (0, &
n
) < 0)

66 
	`acquúe
 (&
tick¶ock
);

67 
ticks0
 = 
ticks
;

68 
ticks
 - 
ticks0
 < 
n
)

70 i‡(
¥oc
->
kûÀd
)

72 
	`ªÀa£
 (&
tick¶ock
);

75 
	`¶ìp
 (&
ticks
, &
tick¶ock
);

77 
	`ªÀa£
 (&
tick¶ock
);

79 
	}
}

84 
	$sys_u±ime
 ()

86 
uöt
 
xticks
;

88 
	`acquúe
 (&
tick¶ock
);

89 
xticks
 = 
ticks
;

90 
	`ªÀa£
 (&
tick¶ock
);

91  
xticks
;

92 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timîöô
 ()

28 
	`outb
 (
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
 (
IO_TIMER1
, 
	`TIMER_DIV
 (100) % 256);

30 
	`outb
 (
IO_TIMER1
, 
	`TIMER_DIV
 (100) / 256);

31 
	`pi˚«bÀ
 (
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

12 
g©edesc
 
	gidt
[256];

13 
uöt
 
ve˘‹s
[];

14 
•ölock
 
	gtick¶ock
;

15 
uöt
 
	gticks
;

18 
	$tvöô
 ()

20 
i
;

22 
i
 = 0; i < 256; i++)

23 
	`SETGATE
 (
idt
[
i
], 0, 
SEG_KCODE
 << 3, 
ve˘‹s
[i], 0);

24 
	`SETGATE
 (
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
 << 3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

26 
	`öôlock
 (&
tick¶ock
, "time");

27 
	}
}

30 
	$idtöô
 ()

32 
	`lidt
 (
idt
,  (idt));

33 
	}
}

37 
	$å≠
 (
å≠‰ame
 *
tf
)

39 i‡(
tf
->
å≠no
 =
T_SYSCALL
)

41 i‡(
¥oc
->
kûÀd
)

42 
	`exô
 ();

43 
¥oc
->
tf
 =Åf;

44 
	`sysˇŒ
 ();

45 i‡(
¥oc
->
kûÀd
)

46 
	`exô
 ();

50 
tf
->
å≠no
)

52 
T_IRQ0
 + 
IRQ_TIMER
:

53 i‡(
˝u
->
id
 == 0)

55 
	`acquúe
 (&
tick¶ock
);

56 
ticks
++;

57 
	`wakeup
 (&
ticks
);

58 
	`ªÀa£
 (&
tick¶ock
);

60 
	`œpi˚oi
 ();

62 
T_IRQ0
 + 
IRQ_IDE
:

63 
	`ideöå
 ();

64 
	`œpi˚oi
 ();

66 
T_IRQ0
 + 
IRQ_IDE
 + 1:

69 
T_IRQ0
 + 
IRQ_KBD
:

70 
	`kbdöå
 ();

71 
	`œpi˚oi
 ();

73 
T_IRQ0
 + 
IRQ_COM1
:

74 
	`u¨töå
 ();

75 
	`œpi˚oi
 ();

77 
T_IRQ0
 + 7:

78 
T_IRQ0
 + 
IRQ_SPURIOUS
:

79 
	`˝rötf
 ("cpu%d: spurious interruptát %x:%x\n",

80 
˝u
->
id
, 
tf
->
cs
,Åf->
eù
);

81 
	`œpi˚oi
 ();

86 i‡(
¥oc
 =0 || (
tf
->
cs
 & 3) == 0)

89 
	`˝rötf
 ("unexpectedÅrap %d from cpu %dÉip %x (cr2=0x%x)\n",

90 
tf
->
å≠no
, 
˝u
->
id
,Åf->
eù
, 
	`r¸2
 ());

91 
	`∑nic
 ("trap");

94 
	`˝rötf
 ("pid %d %s:Årap %dÉrr %d on cpu %d "

96 
¥oc
->
pid
,Öroc->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
->
id
,Åf->
eù
,

97 
	`r¸2
 ());

98 
¥oc
->
kûÀd
 = 1;

104 i‡(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
 & 3Ë=
DPL_USER
)

105 
	`exô
 ();

109 i‡(
¥oc
 &&Öroc->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
T_IRQ0
 + 
IRQ_TIMER
)

110 
	`yõld
 ();

113 i‡(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
 & 3Ë=
DPL_USER
)

114 
	`exô
 ();

115 
	}
}

	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 64

28 
	#T_DEFAULT
 500

29 

	)

30 
	#T_IRQ0
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_COM1
 4

	)

35 
	#IRQ_IDE
 14

	)

36 
	#IRQ_ERROR
 19

	)

37 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

4 
uöt
 
	tpde_t
;

	@uart.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"å≠s.h
"

7 
	~"•ölock.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

12 
	~"x86.h
"

14 
	#COM1
 0x3f8

	)

16 
	gu¨t
;

19 
	$u¨töô
 ()

21 *
p
;

24 
	`outb
 (
COM1
 + 2, 0);

27 
	`outb
 (
COM1
 + 3, 0x80);

28 
	`outb
 (
COM1
 + 0, 115200 / 9600);

29 
	`outb
 (
COM1
 + 1, 0);

30 
	`outb
 (
COM1
 + 3, 0x03);

31 
	`outb
 (
COM1
 + 4, 0);

32 
	`outb
 (
COM1
 + 1, 0x01);

35 i‡(
	`öb
 (
COM1
 + 5) == 0xFF)

37 
u¨t
 = 1;

41 
	`öb
 (
COM1
 + 2);

42 
	`öb
 (
COM1
 + 0);

43 
	`pi˚«bÀ
 (
IRQ_COM1
);

44 
	`iﬂpi˚«bÀ
 (
IRQ_COM1
, 0);

47 
p
 = "xv6...\n"; *p;Ö++)

48 
	`u¨çutc
 (*
p
);

49 
	}
}

52 
	$u¨çutc
 (
c
)

54 
i
;

56 i‡(!
u¨t
)

58 
i
 = 0; i < 128 && !(
	`öb
 (
COM1
 + 5) & 0x20); i++)

59 
	`mi¸odñay
 (10);

60 
	`outb
 (
COM1
 + 0, 
c
);

61 
	}
}

64 
	$u¨tgëc
 ()

66 i‡(!
u¨t
)

68 i‡(!(
	`öb
 (
COM1
 + 5) & 0x01))

70  
	`öb
 (
COM1
 + 0);

71 
	}
}

74 
	$u¨töå
 ()

76 
	`c⁄sﬁeöå
 (
u¨tgëc
);

77 
	}
}

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

5 
	~"x86.h
"

8 
	$°r˝y
 (*
s
, *
t
)

10 *
os
;

12 
os
 = 
s
;

13 (*
s
++ = *
t
++) != 0)

15  
os
;

16 
	}
}

19 
	$°rcmp
 (c⁄° *
p
, c⁄° *
q
)

21 *
p
 && *∞=*
q
)

22 
p
++, 
q
++;

23  (
uch¨
Ë* 
p
 - (uch¨Ë* 
q
;

24 
	}
}

26 
uöt


27 
	$°æí
 (*
s
)

29 
n
;

31 
n
 = 0; 
s
[n];Ç++)

33  
n
;

34 
	}
}

37 
	$mem£t
 (*
d°
, 
c
, 
uöt
 
n
)

39 
	`°osb
 (
d°
, 
c
, 
n
);

40  
d°
;

41 
	}
}

44 
	$°rchr
 (c⁄° *
s
, 
c
)

46 ; *
s
; s++)

47 i‡(*
s
 =
c
)

48  (*Ë
s
;

50 
	}
}

53 
	$gës
 (*
buf
, 
max
)

55 
i
, 
cc
;

56 
c
;

58 
i
 = 0; i + 1 < 
max
;)

60 
cc
 = 
	`ªad
 (0, &
c
, 1);

61 i‡(
cc
 < 1)

63 
buf
[
i
++] = 
c
;

64 i‡(
c
 == '\n' || c == '\r')

67 
buf
[
i
] = '\0';

68  
buf
;

69 
	}
}

72 
	$°©
 (*
n
, 
°©
 *
°
)

74 
fd
;

75 
r
;

77 
fd
 = 
	`›í
 (
n
, 
O_RDONLY
);

78 i‡(
fd
 < 0)

80 
r
 = 
	`f°©
 (
fd
, 
°
);

81 
	`˛o£
 (
fd
);

82  
r
;

83 
	}
}

86 
	$©oi
 (c⁄° *
s
)

88 
n
;

90 
n
 = 0;

91 '0' <*
s
 && *s <= '9')

92 
n
 =Ç * 10 + *
s
++ - '0';

93  
n
;

94 
	}
}

97 
	$memmove
 (*
vd°
, *
v§c
, 
n
)

99 *
d°
, *
§c
;

101 
d°
 = 
vd°
;

102 
§c
 = 
v§c
;

103 
n
-- > 0)

104 *
d°
++ = *
§c
++;

105  
vd°
;

106 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî


15 
hódî
 *
	m±r
;

16 
uöt
 
	msize
;

17 } 
	ms
;

18 
Align
 
	mx
;

21 
hódî
 
	tHódî
;

23 
Hódî
 
	gba£
;

24 
Hódî
 *
	g‰ìp
;

27 
	$‰ì
 (*
≠
)

29 
Hódî
 *
bp
, *
p
;

31 
bp
 = (
Hódî
 *Ë
≠
 - 1;

32 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

33 i‡(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

35 i‡(
bp
 + bp->
s
.
size
 =
p
->s.
±r
)

37 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

38 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

41 
bp
->
s
.
±r
 = 
p
->s.ptr;

42 i‡(
p
 +Ö->
s
.
size
 =
bp
)

44 
p
->
s
.
size
 +
bp
->s.size;

45 
p
->
s
.
±r
 = 
bp
->s.ptr;

48 
p
->
s
.
±r
 = 
bp
;

49 
‰ìp
 = 
p
;

50 
	}
}

52 
Hódî
 *

53 
	$m‹ec‹e
 (
uöt
 
nu
)

55 *
p
;

56 
Hódî
 *
hp
;

58 i‡(
nu
 < 4096)

59 
nu
 = 4096;

60 
p
 = 
	`sbrk
 (
nu
 *  (
Hódî
));

61 i‡(
p
 == (*) -1)

63 
hp
 = (
Hódî
 *Ë
p
;

64 
hp
->
s
.
size
 = 
nu
;

65 
	`‰ì
 ((*Ë(
hp
 + 1));

66  
‰ìp
;

67 
	}
}

70 
	$mÆloc
 (
uöt
 
nbyãs
)

72 
Hódî
 *
p
, *
¥evp
;

73 
uöt
 
nunôs
;

75 
nunôs
 = (
nbyãs
 +  (
Hódî
) - 1) /  (Header) + 1;

76 i‡((
¥evp
 = 
‰ìp
) == 0)

78 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

79 
ba£
.
s
.
size
 = 0;

81 
p
 = 
¥evp
->
s
.
±r
;;Örevp =Ö,Ö =Ö->s.ptr)

83 i‡(
p
->
s
.
size
 >
nunôs
)

85 i‡(
p
->
s
.
size
 =
nunôs
)

86 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

89 
p
->
s
.
size
 -
nunôs
;

90 
p
 +p->
s
.
size
;

91 
p
->
s
.
size
 = 
nunôs
;

93 
‰ìp
 = 
¥evp
;

94  (*Ë(
p
 + 1);

96 i‡(
p
 =
‰ìp
)

97 i‡((
p
 = 
	`m‹ec‹e
 (
nunôs
)) == 0)

100 
	}
}

	@user.h

1 
	g°©
;

4 
f‹k
 ();

5 
	$exô
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
));

6 
	`waô
 ();

7 
	`pùe
 (*);

8 
	`wrôe
 (, *, );

9 
	`ªad
 (, *, );

10 
	`˛o£
 ();

11 
	`kûl
 ();

12 
	`exec
 (*, **);

13 
	`›í
 (*, );

14 
	`mknod
 (*, , );

15 
	`u∆ök
 (*);

16 
	`f°©
 (
fd
, 
°©
 *);

17 
	`lök
 (*, *);

18 
	`mkdú
 (*);

19 
	`chdú
 (*);

20 
	`dup
 ();

21 
	`gëpid
 ();

22 *
	`sbrk
 ();

23 
	`¶ìp
 ();

24 
	`u±ime
 ();

27 
	`°©
 (*, 
°©
 *);

28 *
	`°r˝y
 (*, *);

29 *
	`memmove
 (*, *, );

30 *
	`°rchr
 (c⁄° *, 
c
);

31 
	`°rcmp
 (const *, const *);

32 
	`¥ötf
 (, *, ...);

33 *
	`gës
 (*, 
max
);

34 
uöt
 
	`°æí
 (*);

35 *
	`mem£t
 (*, , 
uöt
);

36 *
	`mÆloc
 (
uöt
);

37 
	`‰ì
 (*);

38 
	`©oi
 (const *);

	@usertests.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"°©.h
"

4 
	~"u£r.h
"

5 
	~"fs.h
"

6 
	~"f˙é.h
"

7 
	~"sysˇŒ.h
"

8 
	~"å≠s.h
"

9 
	~"memœyout.h
"

11 
	gbuf
[8192];

12 
	g«me
[3];

13 *
	gechﬂrgv
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

15 
	g°dout
 = 1;

20 
	$›íã°
 ()

22 
fd
;

24 
	`¥ötf
 (
°dout
, "openÅest\n");

25 
fd
 = 
	`›í
 ("echo", 0);

26 i‡(
fd
 < 0)

28 
	`¥ötf
 (
°dout
, "openÉcho failed!\n");

29 
	`exô
 ();

31 
	`˛o£
 (
fd
);

32 
fd
 = 
	`›í
 ("doesnotexist", 0);

33 i‡(
fd
 >= 0)

35 
	`¥ötf
 (
°dout
, "open doesnotexist succeeded!\n");

36 
	`exô
 ();

38 
	`¥ötf
 (
°dout
, "openÅest ok\n");

39 
	}
}

42 
	$wrôëe°
 ()

44 
fd
;

45 
i
;

47 
	`¥ötf
 (
°dout
, "small fileÅest\n");

48 
fd
 = 
	`›í
 ("smÆl", 
O_CREATE
 | 
O_RDWR
);

49 i‡(
fd
 >= 0)

51 
	`¥ötf
 (
°dout
, "creat small succeeded; ok\n");

55 
	`¥ötf
 (
°dout
, "error: creat small failed!\n");

56 
	`exô
 ();

58 
i
 = 0; i < 100; i++)

60 i‡(
	`wrôe
 (
fd
, "aaaaaaaaaa", 10) != 10)

62 
	`¥ötf
 (
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

63 
	`exô
 ();

65 i‡(
	`wrôe
 (
fd
, "bbbbbbbbbb", 10) != 10)

67 
	`¥ötf
 (
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

68 
	`exô
 ();

71 
	`¥ötf
 (
°dout
, "writes ok\n");

72 
	`˛o£
 (
fd
);

73 
fd
 = 
	`›í
 ("smÆl", 
O_RDONLY
);

74 i‡(
fd
 >= 0)

76 
	`¥ötf
 (
°dout
, "open small succeeded ok\n");

80 
	`¥ötf
 (
°dout
, "error: open small failed!\n");

81 
	`exô
 ();

83 
i
 = 
	`ªad
 (
fd
, 
buf
, 2000);

84 i‡(
i
 == 2000)

86 
	`¥ötf
 (
°dout
, "read succeeded ok\n");

90 
	`¥ötf
 (
°dout
, "read failed\n");

91 
	`exô
 ();

93 
	`˛o£
 (
fd
);

95 i‡(
	`u∆ök
 ("small") < 0)

97 
	`¥ötf
 (
°dout
, "unlink small failed\n");

98 
	`exô
 ();

100 
	`¥ötf
 (
°dout
, "small fileÅest ok\n");

101 
	}
}

104 
	$wrôëe°1
 ()

106 
i
, 
fd
, 
n
;

108 
	`¥ötf
 (
°dout
, "big filesÅest\n");

110 
fd
 = 
	`›í
 ("big", 
O_CREATE
 | 
O_RDWR
);

111 i‡(
fd
 < 0)

113 
	`¥ötf
 (
°dout
, "error: creat big failed!\n");

114 
	`exô
 ();

117 
i
 = 0; i < 
MAXFILE
; i++)

119 ((*Ë
buf
)[0] = 
i
;

120 i‡(
	`wrôe
 (
fd
, 
buf
, 512) != 512)

122 
	`¥ötf
 (
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

123 
	`exô
 ();

127 
	`˛o£
 (
fd
);

129 
fd
 = 
	`›í
 ("big", 
O_RDONLY
);

130 i‡(
fd
 < 0)

132 
	`¥ötf
 (
°dout
, "error: open big failed!\n");

133 
	`exô
 ();

136 
n
 = 0;

139 
i
 = 
	`ªad
 (
fd
, 
buf
, 512);

140 i‡(
i
 == 0)

142 i‡(
n
 =
MAXFILE
 - 1)

144 
	`¥ötf
 (
°dout
, "ªad o∆y %d block†‰om big", 
n
);

145 
	`exô
 ();

149 i‡(
i
 != 512)

151 
	`¥ötf
 (
°dout
, "ªad faûed %d\n", 
i
);

152 
	`exô
 ();

154 i‡(((*Ë
buf
)[0] !
n
)

156 
	`¥ötf
 (
°dout
, "read content of block %d is %d\n",

157 
n
, ((*Ë
buf
)[0]);

158 
	`exô
 ();

160 
n
++;

162 
	`˛o£
 (
fd
);

163 i‡(
	`u∆ök
 ("big") < 0)

165 
	`¥ötf
 (
°dout
, "unlink big failed\n");

166 
	`exô
 ();

168 
	`¥ötf
 (
°dout
, "big files ok\n");

169 
	}
}

172 
	$¸óãã°
 ()

174 
i
, 
fd
;

176 
	`¥ötf
 (
°dout
, "many creates, followed by unlinkÅest\n");

178 
«me
[0] = 'a';

179 
«me
[2] = '\0';

180 
i
 = 0; i < 52; i++)

182 
«me
[1] = '0' + 
i
;

183 
fd
 = 
	`›í
 (
«me
, 
O_CREATE
 | 
O_RDWR
);

184 
	`˛o£
 (
fd
);

186 
«me
[0] = 'a';

187 
«me
[2] = '\0';

188 
i
 = 0; i < 52; i++)

190 
«me
[1] = '0' + 
i
;

191 
	`u∆ök
 (
«me
);

193 
	`¥ötf
 (
°dout
, "many creates, followed by unlink; ok\n");

194 
	}
}

197 
	$dúã°
 ()

199 
	`¥ötf
 (
°dout
, "mkdirÅest\n");

201 i‡(
	`mkdú
 ("dir0") < 0)

203 
	`¥ötf
 (
°dout
, "mkdir failed\n");

204 
	`exô
 ();

207 i‡(
	`chdú
 ("dir0") < 0)

209 
	`¥ötf
 (
°dout
, "chdir dir0 failed\n");

210 
	`exô
 ();

213 i‡(
	`chdú
 ("..") < 0)

215 
	`¥ötf
 (
°dout
, "chdir .. failed\n");

216 
	`exô
 ();

219 i‡(
	`u∆ök
 ("dir0") < 0)

221 
	`¥ötf
 (
°dout
, "unlink dir0 failed\n");

222 
	`exô
 ();

224 
	`¥ötf
 (
°dout
, "mkdirÅest\n");

225 
	}
}

228 
	$exe˘e°
 ()

230 
	`¥ötf
 (
°dout
, "execÅest\n");

231 i‡(
	`exec
 ("echo", 
echﬂrgv
) < 0)

233 
	`¥ötf
 (
°dout
, "execÉcho failed\n");

234 
	`exô
 ();

236 
	}
}

241 
	$pùe1
 ()

243 
fds
[2], 
pid
;

244 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

246 i‡(
	`pùe
 (
fds
) != 0)

248 
	`¥ötf
 (1, "pipe() failed\n");

249 
	`exô
 ();

251 
pid
 = 
	`f‹k
 ();

252 
£q
 = 0;

253 i‡(
pid
 == 0)

255 
	`˛o£
 (
fds
[0]);

256 
n
 = 0;Ç < 5;Ç++)

258 
i
 = 0; i < 1033; i++)

259 
buf
[
i
] = 
£q
++;

260 i‡(
	`wrôe
 (
fds
[1], 
buf
, 1033) != 1033)

262 
	`¥ötf
 (1, "pipe1 oops 1\n");

263 
	`exô
 ();

266 
	`exô
 ();

268 i‡(
pid
 > 0)

270 
	`˛o£
 (
fds
[1]);

271 
tŸÆ
 = 0;

272 
cc
 = 1;

273 (
n
 = 
	`ªad
 (
fds
[0], 
buf
, 
cc
)) > 0)

275 
i
 = 0; i < 
n
; i++)

277 i‡((
buf
[
i
] & 0xffË!(
£q
++ & 0xff))

279 
	`¥ötf
 (1, "pipe1 oops 2\n");

283 
tŸÆ
 +
n
;

284 
cc
 = cc * 2;

285 i‡(
cc
 >  (
buf
))

286 
cc
 =  (
buf
);

288 i‡(
tŸÆ
 != 5 * 1033)

290 
	`¥ötf
 (1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

291 
	`exô
 ();

293 
	`˛o£
 (
fds
[0]);

294 
	`waô
 ();

298 
	`¥ötf
 (1, "fork() failed\n");

299 
	`exô
 ();

301 
	`¥ötf
 (1, "pipe1 ok\n");

302 
	}
}

306 
	$¥ìm±
 ()

308 
pid1
, 
pid2
, 
pid3
;

309 
pfds
[2];

311 
	`¥ötf
 (1, "preempt: ");

312 
pid1
 = 
	`f‹k
 ();

313 i‡(
pid1
 == 0)

317 
pid2
 = 
	`f‹k
 ();

318 i‡(
pid2
 == 0)

322 
	`pùe
 (
pfds
);

323 
pid3
 = 
	`f‹k
 ();

324 i‡(
pid3
 == 0)

326 
	`˛o£
 (
pfds
[0]);

327 i‡(
	`wrôe
 (
pfds
[1], "x", 1) != 1)

328 
	`¥ötf
 (1, "preempt writeÉrror");

329 
	`˛o£
 (
pfds
[1]);

334 
	`˛o£
 (
pfds
[1]);

335 i‡(
	`ªad
 (
pfds
[0], 
buf
,  (buf)) != 1)

337 
	`¥ötf
 (1, "preemptÑeadÉrror");

340 
	`˛o£
 (
pfds
[0]);

341 
	`¥ötf
 (1, "kill... ");

342 
	`kûl
 (
pid1
);

343 
	`kûl
 (
pid2
);

344 
	`kûl
 (
pid3
);

345 
	`¥ötf
 (1, "wait... ");

346 
	`waô
 ();

347 
	`waô
 ();

348 
	`waô
 ();

349 
	`¥ötf
 (1, "preempt ok\n");

350 
	}
}

354 
	$exôwaô
 ()

356 
i
, 
pid
;

358 
i
 = 0; i < 100; i++)

360 
pid
 = 
	`f‹k
 ();

361 i‡(
pid
 < 0)

363 
	`¥ötf
 (1, "fork failed\n");

366 i‡(
pid
)

368 i‡(
	`waô
 (Ë!
pid
)

370 
	`¥ötf
 (1, "wait wrongÖid\n");

376 
	`exô
 ();

379 
	`¥ötf
 (1, "exitwait ok\n");

380 
	}
}

383 
	$mem
 ()

385 *
m1
, *
m2
;

386 
pid
, 
µid
;

388 
	`¥ötf
 (1, "memÅest\n");

389 
µid
 = 
	`gëpid
 ();

390 i‡((
pid
 = 
	`f‹k
 ()) == 0)

392 
m1
 = 0;

393 (
m2
 = 
	`mÆloc
 (10001)) != 0)

395 *(**Ë
m2
 = 
m1
;

396 
m1
 = 
m2
;

398 
m1
)

400 
m2
 = *(**Ë
m1
;

401 
	`‰ì
 (
m1
);

402 
m1
 = 
m2
;

404 
m1
 = 
	`mÆloc
 (1024 * 20);

405 i‡(
m1
 == 0)

407 
	`¥ötf
 (1, "couldn'tállocate mem?!!\n");

408 
	`kûl
 (
µid
);

409 
	`exô
 ();

411 
	`‰ì
 (
m1
);

412 
	`¥ötf
 (1, "mem ok\n");

413 
	`exô
 ();

417 
	`waô
 ();

419 
	}
}

426 
	$sh¨edfd
 ()

428 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

429 
buf
[10];

431 
	`¥ötf
 (1, "sharedfdÅest\n");

433 
	`u∆ök
 ("sharedfd");

434 
fd
 = 
	`›í
 ("sh¨edfd", 
O_CREATE
 | 
O_RDWR
);

435 i‡(
fd
 < 0)

437 
	`¥ötf
 (1, "fstests: cannot open sharedfd for writing");

440 
pid
 = 
	`f‹k
 ();

441 
	`mem£t
 (
buf
, 
pid
 == 0 ? 'c' : 'p',  (buf));

442 
i
 = 0; i < 1000; i++)

444 i‡(
	`wrôe
 (
fd
, 
buf
,  (buf)) !=  (buf))

446 
	`¥ötf
 (1, "fstests: write sharedfd failed\n");

450 i‡(
pid
 == 0)

451 
	`exô
 ();

453 
	`waô
 ();

454 
	`˛o£
 (
fd
);

455 
fd
 = 
	`›í
 ("sharedfd", 0);

456 i‡(
fd
 < 0)

458 
	`¥ötf
 (1, "fstests: cannot open sharedfd forÑeading\n");

461 
nc
 = 
≈
 = 0;

462 (
n
 = 
	`ªad
 (
fd
, 
buf
,  (buf))) > 0)

464 
i
 = 0; i <  (
buf
); i++)

466 i‡(
buf
[
i
] == 'c')

467 
nc
++;

468 i‡(
buf
[
i
] == 'p')

469 
≈
++;

472 
	`˛o£
 (
fd
);

473 
	`u∆ök
 ("sharedfd");

474 i‡(
nc
 =10000 && 
≈
 == 10000)

476 
	`¥ötf
 (1, "sharedfd ok\n");

480 
	`¥ötf
 (1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

481 
	`exô
 ();

483 
	}
}

488 
	$twofûes
 ()

490 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
;

491 *
‚ame
;

493 
	`¥ötf
 (1, "twofilesÅest\n");

495 
	`u∆ök
 ("f1");

496 
	`u∆ök
 ("f2");

498 
pid
 = 
	`f‹k
 ();

499 i‡(
pid
 < 0)

501 
	`¥ötf
 (1, "fork failed\n");

502 
	`exô
 ();

505 
‚ame
 = 
pid
 ? "f1" : "f2";

506 
fd
 = 
	`›í
 (
‚ame
, 
O_CREATE
 | 
O_RDWR
);

507 i‡(
fd
 < 0)

509 
	`¥ötf
 (1, "create failed\n");

510 
	`exô
 ();

513 
	`mem£t
 (
buf
, 
pid
 ? 'p' : 'c', 512);

514 
i
 = 0; i < 12; i++)

516 i‡((
n
 = 
	`wrôe
 (
fd
, 
buf
, 500)) != 500)

518 
	`¥ötf
 (1, "wrôêÁûed %d\n", 
n
);

519 
	`exô
 ();

522 
	`˛o£
 (
fd
);

523 i‡(
pid
)

524 
	`waô
 ();

526 
	`exô
 ();

528 
i
 = 0; i < 2; i++)

530 
fd
 = 
	`›í
 (
i
 ? "f1" : "f2", 0);

531 
tŸÆ
 = 0;

532 (
n
 = 
	`ªad
 (
fd
, 
buf
,  (buf))) > 0)

534 
j
 = 0; j < 
n
; j++)

536 i‡(
buf
[
j
] !(
i
 ? 'p' : 'c'))

538 
	`¥ötf
 (1, "wrong char\n");

539 
	`exô
 ();

542 
tŸÆ
 +
n
;

544 
	`˛o£
 (
fd
);

545 i‡(
tŸÆ
 != 12 * 500)

547 
	`¥ötf
 (1, "wr⁄gÜígth %d\n", 
tŸÆ
);

548 
	`exô
 ();

552 
	`u∆ök
 ("f1");

553 
	`u∆ök
 ("f2");

555 
	`¥ötf
 (1, "twofiles ok\n");

556 
	}
}

560 
	$¸óãdñëe
 ()

563 { 
N
 = 20 };

564 
pid
, 
i
, 
fd
;

565 
«me
[32];

567 
	`¥ötf
 (1, "createdeleteÅest\n");

568 
pid
 = 
	`f‹k
 ();

569 i‡(
pid
 < 0)

571 
	`¥ötf
 (1, "fork failed\n");

572 
	`exô
 ();

575 
«me
[0] = 
pid
 ? 'p' : 'c';

576 
«me
[2] = '\0';

577 
i
 = 0; i < 
N
; i++)

579 
«me
[1] = '0' + 
i
;

580 
fd
 = 
	`›í
 (
«me
, 
O_CREATE
 | 
O_RDWR
);

581 i‡(
fd
 < 0)

583 
	`¥ötf
 (1, "create failed\n");

584 
	`exô
 ();

586 
	`˛o£
 (
fd
);

587 i‡(
i
 > 0 && (i % 2) == 0)

589 
«me
[1] = '0' + (
i
 / 2);

590 i‡(
	`u∆ök
 (
«me
) < 0)

592 
	`¥ötf
 (1, "unlink failed\n");

593 
	`exô
 ();

598 i‡(
pid
 == 0)

599 
	`exô
 ();

601 
	`waô
 ();

603 
i
 = 0; i < 
N
; i++)

605 
«me
[0] = 'p';

606 
«me
[1] = '0' + 
i
;

607 
fd
 = 
	`›í
 (
«me
, 0);

608 i‡((
i
 =0 || i >
N
 / 2Ë&& 
fd
 < 0)

610 
	`¥ötf
 (1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

611 
	`exô
 ();

613 i‡((
i
 >1 && i < 
N
 / 2Ë&& 
fd
 >= 0)

615 
	`¥ötf
 (1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

616 
	`exô
 ();

618 i‡(
fd
 >= 0)

619 
	`˛o£
 (
fd
);

621 
«me
[0] = 'c';

622 
«me
[1] = '0' + 
i
;

623 
fd
 = 
	`›í
 (
«me
, 0);

624 i‡((
i
 =0 || i >
N
 / 2Ë&& 
fd
 < 0)

626 
	`¥ötf
 (1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

627 
	`exô
 ();

629 i‡((
i
 >1 && i < 
N
 / 2Ë&& 
fd
 >= 0)

631 
	`¥ötf
 (1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

632 
	`exô
 ();

634 i‡(
fd
 >= 0)

635 
	`˛o£
 (
fd
);

638 
i
 = 0; i < 
N
; i++)

640 
«me
[0] = 'p';

641 
«me
[1] = '0' + 
i
;

642 
	`u∆ök
 (
«me
);

643 
«me
[0] = 'c';

644 
	`u∆ök
 (
«me
);

647 
	`¥ötf
 (1, "createdelete ok\n");

648 
	}
}

652 
	$u∆ökªad
 ()

654 
fd
, 
fd1
;

656 
	`¥ötf
 (1, "unlinkreadÅest\n");

657 
fd
 = 
	`›í
 ("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

658 i‡(
fd
 < 0)

660 
	`¥ötf
 (1, "create unlinkread failed\n");

661 
	`exô
 ();

663 
	`wrôe
 (
fd
, "hello", 5);

664 
	`˛o£
 (
fd
);

666 
fd
 = 
	`›í
 ("u∆ökªad", 
O_RDWR
);

667 i‡(
fd
 < 0)

669 
	`¥ötf
 (1, "open unlinkread failed\n");

670 
	`exô
 ();

672 i‡(
	`u∆ök
 ("unlinkread") != 0)

674 
	`¥ötf
 (1, "unlink unlinkread failed\n");

675 
	`exô
 ();

678 
fd1
 = 
	`›í
 ("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

679 
	`wrôe
 (
fd1
, "yyy", 3);

680 
	`˛o£
 (
fd1
);

682 i‡(
	`ªad
 (
fd
, 
buf
,  (buf)) != 5)

684 
	`¥ötf
 (1, "unlinkreadÑead failed");

685 
	`exô
 ();

687 i‡(
buf
[0] != 'h')

689 
	`¥ötf
 (1, "unlinkread wrong data\n");

690 
	`exô
 ();

692 i‡(
	`wrôe
 (
fd
, 
buf
, 10) != 10)

694 
	`¥ötf
 (1, "unlinkread write failed\n");

695 
	`exô
 ();

697 
	`˛o£
 (
fd
);

698 
	`u∆ök
 ("unlinkread");

699 
	`¥ötf
 (1, "unlinkread ok\n");

700 
	}
}

703 
	$lökã°
 ()

705 
fd
;

707 
	`¥ötf
 (1, "linktest\n");

709 
	`u∆ök
 ("lf1");

710 
	`u∆ök
 ("lf2");

712 
fd
 = 
	`›í
 ("lf1", 
O_CREATE
 | 
O_RDWR
);

713 i‡(
fd
 < 0)

715 
	`¥ötf
 (1, "createÜf1 failed\n");

716 
	`exô
 ();

718 i‡(
	`wrôe
 (
fd
, "hello", 5) != 5)

720 
	`¥ötf
 (1, "writeÜf1 failed\n");

721 
	`exô
 ();

723 
	`˛o£
 (
fd
);

725 i‡(
	`lök
 ("lf1", "lf2") < 0)

727 
	`¥ötf
 (1, "linkÜf1Üf2 failed\n");

728 
	`exô
 ();

730 
	`u∆ök
 ("lf1");

732 i‡(
	`›í
 ("lf1", 0) >= 0)

734 
	`¥ötf
 (1, "unlinkedÜf1 but it is stillÅhere!\n");

735 
	`exô
 ();

738 
fd
 = 
	`›í
 ("lf2", 0);

739 i‡(
fd
 < 0)

741 
	`¥ötf
 (1, "openÜf2 failed\n");

742 
	`exô
 ();

744 i‡(
	`ªad
 (
fd
, 
buf
,  (buf)) != 5)

746 
	`¥ötf
 (1, "readÜf2 failed\n");

747 
	`exô
 ();

749 
	`˛o£
 (
fd
);

751 i‡(
	`lök
 ("lf2", "lf2") >= 0)

753 
	`¥ötf
 (1, "linkÜf2Üf2 succeeded! oops\n");

754 
	`exô
 ();

757 
	`u∆ök
 ("lf2");

758 i‡(
	`lök
 ("lf2", "lf1") >= 0)

760 
	`¥ötf
 (1, "linkÇon-existant succeeded! oops\n");

761 
	`exô
 ();

764 i‡(
	`lök
 (".", "lf1") >= 0)

766 
	`¥ötf
 (1, "link .Üf1 succeeded! oops\n");

767 
	`exô
 ();

770 
	`¥ötf
 (1, "linktest ok\n");

771 
	}
}

775 
	$c⁄¸óã
 ()

777 
fûe
[3];

778 
i
, 
pid
, 
n
, 
fd
;

779 
Á
[40];

782 
ush‹t
 
öum
;

783 
«me
[14];

784 } 
de
;

786 
	`¥ötf
 (1, "concreateÅest\n");

787 
fûe
[0] = 'C';

788 
fûe
[2] = '\0';

789 
i
 = 0; i < 40; i++)

791 
fûe
[1] = '0' + 
i
;

792 
	`u∆ök
 (
fûe
);

793 
pid
 = 
	`f‹k
 ();

794 i‡(
pid
 && (
i
 % 3) == 1)

796 
	`lök
 ("C0", 
fûe
);

798 i‡(
pid
 =0 && (
i
 % 5) == 1)

800 
	`lök
 ("C0", 
fûe
);

804 
fd
 = 
	`›í
 (
fûe
, 
O_CREATE
 | 
O_RDWR
);

805 i‡(
fd
 < 0)

807 
	`¥ötf
 (1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

808 
	`exô
 ();

810 
	`˛o£
 (
fd
);

812 i‡(
pid
 == 0)

813 
	`exô
 ();

815 
	`waô
 ();

818 
	`mem£t
 (
Á
, 0,  (fa));

819 
fd
 = 
	`›í
 (".", 0);

820 
n
 = 0;

821 
	`ªad
 (
fd
, &
de
,  (de)) > 0)

823 i‡(
de
.
öum
 == 0)

825 i‡(
de
.
«me
[0] == 'C' && de.name[2] == '\0')

827 
i
 = 
de
.
«me
[1] - '0';

828 i‡(
i
 < 0 || i > (
Á
))

830 
	`¥ötf
 (1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

831 
	`exô
 ();

833 i‡(
Á
[
i
])

835 
	`¥ötf
 (1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

836 
	`exô
 ();

838 
Á
[
i
] = 1;

839 
n
++;

842 
	`˛o£
 (
fd
);

844 i‡(
n
 != 40)

846 
	`¥ötf
 (1, "concreateÇotÉnough files in directoryÜisting\n");

847 
	`exô
 ();

850 
i
 = 0; i < 40; i++)

852 
fûe
[1] = '0' + 
i
;

853 
pid
 = 
	`f‹k
 ();

854 i‡(
pid
 < 0)

856 
	`¥ötf
 (1, "fork failed\n");

857 
	`exô
 ();

859 i‡(((
i
 % 3Ë=0 && 
pid
 == 0) || ((i % 3) == 1 &&Öid != 0))

861 
	`˛o£
 (
	`›í
 (
fûe
, 0));

862 
	`˛o£
 (
	`›í
 (
fûe
, 0));

863 
	`˛o£
 (
	`›í
 (
fûe
, 0));

864 
	`˛o£
 (
	`›í
 (
fûe
, 0));

868 
	`u∆ök
 (
fûe
);

869 
	`u∆ök
 (
fûe
);

870 
	`u∆ök
 (
fûe
);

871 
	`u∆ök
 (
fûe
);

873 i‡(
pid
 == 0)

874 
	`exô
 ();

876 
	`waô
 ();

879 
	`¥ötf
 (1, "concreate ok\n");

880 
	}
}

885 
	$löku∆ök
 ()

887 
pid
, 
i
;

889 
	`¥ötf
 (1, "linkunlinkÅest\n");

891 
	`u∆ök
 ("x");

892 
pid
 = 
	`f‹k
 ();

893 i‡(
pid
 < 0)

895 
	`¥ötf
 (1, "fork failed\n");

896 
	`exô
 ();

899 
x
 = (
pid
 ? 1 : 97);

900 
i
 = 0; i < 100; i++)

902 
x
 = x * 1103515245 + 12345;

903 i‡((
x
 % 3) == 0)

905 
	`˛o£
 (
	`›í
 ("x", 
O_RDWR
 | 
O_CREATE
));

907 i‡((
x
 % 3) == 1)

909 
	`lök
 ("cat", "x");

913 
	`u∆ök
 ("x");

917 i‡(
pid
)

918 
	`waô
 ();

920 
	`exô
 ();

922 
	`¥ötf
 (1, "linkunlink ok\n");

923 
	}
}

927 
	$bigdú
 ()

929 
i
, 
fd
;

930 
«me
[10];

932 
	`¥ötf
 (1, "bigdirÅest\n");

933 
	`u∆ök
 ("bd");

935 
fd
 = 
	`›í
 ("bd", 
O_CREATE
);

936 i‡(
fd
 < 0)

938 
	`¥ötf
 (1, "bigdir create failed\n");

939 
	`exô
 ();

941 
	`˛o£
 (
fd
);

943 
i
 = 0; i < 500; i++)

945 
«me
[0] = 'x';

946 
«me
[1] = '0' + (
i
 / 64);

947 
«me
[2] = '0' + (
i
 % 64);

948 
«me
[3] = '\0';

949 i‡(
	`lök
 ("bd", 
«me
) != 0)

951 
	`¥ötf
 (1, "bigdirÜink failed\n");

952 
	`exô
 ();

956 
	`u∆ök
 ("bd");

957 
i
 = 0; i < 500; i++)

959 
«me
[0] = 'x';

960 
«me
[1] = '0' + (
i
 / 64);

961 
«me
[2] = '0' + (
i
 % 64);

962 
«me
[3] = '\0';

963 i‡(
	`u∆ök
 (
«me
) != 0)

965 
	`¥ötf
 (1, "bigdir unlink failed");

966 
	`exô
 ();

970 
	`¥ötf
 (1, "bigdir ok\n");

971 
	}
}

974 
	$subdú
 ()

976 
fd
, 
cc
;

978 
	`¥ötf
 (1, "subdirÅest\n");

980 
	`u∆ök
 ("ff");

981 i‡(
	`mkdú
 ("dd") != 0)

983 
	`¥ötf
 (1, "subdir mkdir dd failed\n");

984 
	`exô
 ();

987 
fd
 = 
	`›í
 ("dd/ff", 
O_CREATE
 | 
O_RDWR
);

988 i‡(
fd
 < 0)

990 
	`¥ötf
 (1, "create dd/ff failed\n");

991 
	`exô
 ();

993 
	`wrôe
 (
fd
, "ff", 2);

994 
	`˛o£
 (
fd
);

996 i‡(
	`u∆ök
 ("dd") >= 0)

998 
	`¥ötf
 (1, "unlink dd (non-empty dir) succeeded!\n");

999 
	`exô
 ();

1002 i‡(
	`mkdú
 ("/dd/dd") != 0)

1004 
	`¥ötf
 (1, "subdir mkdir dd/dd failed\n");

1005 
	`exô
 ();

1008 
fd
 = 
	`›í
 ("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

1009 i‡(
fd
 < 0)

1011 
	`¥ötf
 (1, "create dd/dd/ff failed\n");

1012 
	`exô
 ();

1014 
	`wrôe
 (
fd
, "FF", 2);

1015 
	`˛o£
 (
fd
);

1017 
fd
 = 
	`›í
 ("dd/dd/../ff", 0);

1018 i‡(
fd
 < 0)

1020 
	`¥ötf
 (1, "open dd/dd/../ff failed\n");

1021 
	`exô
 ();

1023 
cc
 = 
	`ªad
 (
fd
, 
buf
,  (buf));

1024 i‡(
cc
 !2 || 
buf
[0] != 'f')

1026 
	`¥ötf
 (1, "dd/dd/../ff wrong content\n");

1027 
	`exô
 ();

1029 
	`˛o£
 (
fd
);

1031 i‡(
	`lök
 ("dd/dd/ff", "dd/dd/ffff") != 0)

1033 
	`¥ötf
 (1, "link dd/dd/ff dd/dd/ffff failed\n");

1034 
	`exô
 ();

1037 i‡(
	`u∆ök
 ("dd/dd/ff") != 0)

1039 
	`¥ötf
 (1, "unlink dd/dd/ff failed\n");

1040 
	`exô
 ();

1042 i‡(
	`›í
 ("dd/dd/ff", 
O_RDONLY
) >= 0)

1044 
	`¥ötf
 (1, "open (unlinked) dd/dd/ff succeeded\n");

1045 
	`exô
 ();

1048 i‡(
	`chdú
 ("dd") != 0)

1050 
	`¥ötf
 (1, "chdir dd failed\n");

1051 
	`exô
 ();

1053 i‡(
	`chdú
 ("dd/../../dd") != 0)

1055 
	`¥ötf
 (1, "chdir dd/../../dd failed\n");

1056 
	`exô
 ();

1058 i‡(
	`chdú
 ("dd/../../../dd") != 0)

1060 
	`¥ötf
 (1, "chdir dd/../../dd failed\n");

1061 
	`exô
 ();

1063 i‡(
	`chdú
 ("./..") != 0)

1065 
	`¥ötf
 (1, "chdir ./.. failed\n");

1066 
	`exô
 ();

1069 
fd
 = 
	`›í
 ("dd/dd/ffff", 0);

1070 i‡(
fd
 < 0)

1072 
	`¥ötf
 (1, "open dd/dd/ffff failed\n");

1073 
	`exô
 ();

1075 i‡(
	`ªad
 (
fd
, 
buf
,  (buf)) != 2)

1077 
	`¥ötf
 (1, "read dd/dd/ffff wrongÜen\n");

1078 
	`exô
 ();

1080 
	`˛o£
 (
fd
);

1082 i‡(
	`›í
 ("dd/dd/ff", 
O_RDONLY
) >= 0)

1084 
	`¥ötf
 (1, "open (unlinked) dd/dd/ff succeeded!\n");

1085 
	`exô
 ();

1088 i‡(
	`›í
 ("dd/ff/ff", 
O_CREATE
 | 
O_RDWR
) >= 0)

1090 
	`¥ötf
 (1, "create dd/ff/ff succeeded!\n");

1091 
	`exô
 ();

1093 i‡(
	`›í
 ("dd/xx/ff", 
O_CREATE
 | 
O_RDWR
) >= 0)

1095 
	`¥ötf
 (1, "create dd/xx/ff succeeded!\n");

1096 
	`exô
 ();

1098 i‡(
	`›í
 ("dd", 
O_CREATE
) >= 0)

1100 
	`¥ötf
 (1, "create dd succeeded!\n");

1101 
	`exô
 ();

1103 i‡(
	`›í
 ("dd", 
O_RDWR
) >= 0)

1105 
	`¥ötf
 (1, "open ddÑdwr succeeded!\n");

1106 
	`exô
 ();

1108 i‡(
	`›í
 ("dd", 
O_WRONLY
) >= 0)

1110 
	`¥ötf
 (1, "open dd wronly succeeded!\n");

1111 
	`exô
 ();

1113 i‡(
	`lök
 ("dd/ff/ff", "dd/dd/xx") == 0)

1115 
	`¥ötf
 (1, "link dd/ff/ff dd/dd/xx succeeded!\n");

1116 
	`exô
 ();

1118 i‡(
	`lök
 ("dd/xx/ff", "dd/dd/xx") == 0)

1120 
	`¥ötf
 (1, "link dd/xx/ff dd/dd/xx succeeded!\n");

1121 
	`exô
 ();

1123 i‡(
	`lök
 ("dd/ff", "dd/dd/ffff") == 0)

1125 
	`¥ötf
 (1, "link dd/ff dd/dd/ffff succeeded!\n");

1126 
	`exô
 ();

1128 i‡(
	`mkdú
 ("dd/ff/ff") == 0)

1130 
	`¥ötf
 (1, "mkdir dd/ff/ff succeeded!\n");

1131 
	`exô
 ();

1133 i‡(
	`mkdú
 ("dd/xx/ff") == 0)

1135 
	`¥ötf
 (1, "mkdir dd/xx/ff succeeded!\n");

1136 
	`exô
 ();

1138 i‡(
	`mkdú
 ("dd/dd/ffff") == 0)

1140 
	`¥ötf
 (1, "mkdir dd/dd/ffff succeeded!\n");

1141 
	`exô
 ();

1143 i‡(
	`u∆ök
 ("dd/xx/ff") == 0)

1145 
	`¥ötf
 (1, "unlink dd/xx/ff succeeded!\n");

1146 
	`exô
 ();

1148 i‡(
	`u∆ök
 ("dd/ff/ff") == 0)

1150 
	`¥ötf
 (1, "unlink dd/ff/ff succeeded!\n");

1151 
	`exô
 ();

1153 i‡(
	`chdú
 ("dd/ff") == 0)

1155 
	`¥ötf
 (1, "chdir dd/ff succeeded!\n");

1156 
	`exô
 ();

1158 i‡(
	`chdú
 ("dd/xx") == 0)

1160 
	`¥ötf
 (1, "chdir dd/xx succeeded!\n");

1161 
	`exô
 ();

1164 i‡(
	`u∆ök
 ("dd/dd/ffff") != 0)

1166 
	`¥ötf
 (1, "unlink dd/dd/ff failed\n");

1167 
	`exô
 ();

1169 i‡(
	`u∆ök
 ("dd/ff") != 0)

1171 
	`¥ötf
 (1, "unlink dd/ff failed\n");

1172 
	`exô
 ();

1174 i‡(
	`u∆ök
 ("dd") == 0)

1176 
	`¥ötf
 (1, "unlinkÇon-empty dd succeeded!\n");

1177 
	`exô
 ();

1179 i‡(
	`u∆ök
 ("dd/dd") < 0)

1181 
	`¥ötf
 (1, "unlink dd/dd failed\n");

1182 
	`exô
 ();

1184 i‡(
	`u∆ök
 ("dd") < 0)

1186 
	`¥ötf
 (1, "unlink dd failed\n");

1187 
	`exô
 ();

1190 
	`¥ötf
 (1, "subdir ok\n");

1191 
	}
}

1195 
	$bigwrôe
 ()

1197 
fd
, 
sz
;

1199 
	`¥ötf
 (1, "bigwriteÅest\n");

1201 
	`u∆ök
 ("bigwrite");

1202 
sz
 = 499; sz < 12 * 512; sz += 471)

1204 
fd
 = 
	`›í
 ("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1205 i‡(
fd
 < 0)

1207 
	`¥ötf
 (1, "cannot create bigwrite\n");

1208 
	`exô
 ();

1210 
i
;

1211 
i
 = 0; i < 2; i++)

1213 
cc
 = 
	`wrôe
 (
fd
, 
buf
, 
sz
);

1214 i‡(
cc
 !
sz
)

1216 
	`¥ötf
 (1, "wrôe(%dËªà%d\n", 
sz
, 
cc
);

1217 
	`exô
 ();

1220 
	`˛o£
 (
fd
);

1221 
	`u∆ök
 ("bigwrite");

1224 
	`¥ötf
 (1, "bigwrite ok\n");

1225 
	}
}

1228 
	$bigfûe
 ()

1230 
fd
, 
i
, 
tŸÆ
, 
cc
;

1232 
	`¥ötf
 (1, "bigfileÅest\n");

1234 
	`u∆ök
 ("bigfile");

1235 
fd
 = 
	`›í
 ("bigfûe", 
O_CREATE
 | 
O_RDWR
);

1236 i‡(
fd
 < 0)

1238 
	`¥ötf
 (1, "cannot create bigfile");

1239 
	`exô
 ();

1241 
i
 = 0; i < 20; i++)

1243 
	`mem£t
 (
buf
, 
i
, 600);

1244 i‡(
	`wrôe
 (
fd
, 
buf
, 600) != 600)

1246 
	`¥ötf
 (1, "write bigfile failed\n");

1247 
	`exô
 ();

1250 
	`˛o£
 (
fd
);

1252 
fd
 = 
	`›í
 ("bigfile", 0);

1253 i‡(
fd
 < 0)

1255 
	`¥ötf
 (1, "cannot open bigfile\n");

1256 
	`exô
 ();

1258 
tŸÆ
 = 0;

1259 
i
 = 0;; i++)

1261 
cc
 = 
	`ªad
 (
fd
, 
buf
, 300);

1262 i‡(
cc
 < 0)

1264 
	`¥ötf
 (1, "read bigfile failed\n");

1265 
	`exô
 ();

1267 i‡(
cc
 == 0)

1269 i‡(
cc
 != 300)

1271 
	`¥ötf
 (1, "shortÑead bigfile\n");

1272 
	`exô
 ();

1274 i‡(
buf
[0] !
i
 / 2 || buf[299] != i / 2)

1276 
	`¥ötf
 (1, "read bigfile wrong data\n");

1277 
	`exô
 ();

1279 
tŸÆ
 +
cc
;

1281 
	`˛o£
 (
fd
);

1282 i‡(
tŸÆ
 != 20 * 600)

1284 
	`¥ötf
 (1, "read bigfile wrongÅotal\n");

1285 
	`exô
 ();

1287 
	`u∆ök
 ("bigfile");

1289 
	`¥ötf
 (1, "bigfileÅest ok\n");

1290 
	}
}

1293 
	$fouπìn
 ()

1295 
fd
;

1298 
	`¥ötf
 (1, "fourteenÅest\n");

1300 i‡(
	`mkdú
 ("12345678901234") != 0)

1302 
	`¥ötf
 (1, "mkdir 12345678901234 failed\n");

1303 
	`exô
 ();

1305 i‡(
	`mkdú
 ("12345678901234/123456789012345") != 0)

1307 
	`¥ötf
 (1, "mkdir 12345678901234/123456789012345 failed\n");

1308 
	`exô
 ();

1310 
fd
 = 
	`›í
 ("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1311 i‡(
fd
 < 0)

1313 
	`¥ötf
 (1,

1315 
	`exô
 ();

1317 
	`˛o£
 (
fd
);

1318 
fd
 = 
	`›í
 ("12345678901234/12345678901234/12345678901234", 0);

1319 i‡(
fd
 < 0)

1321 
	`¥ötf
 (1,

1323 
	`exô
 ();

1325 
	`˛o£
 (
fd
);

1327 i‡(
	`mkdú
 ("12345678901234/12345678901234") == 0)

1329 
	`¥ötf
 (1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1330 
	`exô
 ();

1332 i‡(
	`mkdú
 ("123456789012345/12345678901234") == 0)

1334 
	`¥ötf
 (1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1335 
	`exô
 ();

1338 
	`¥ötf
 (1, "fourteen ok\n");

1339 
	}
}

1342 
	$rmdŸ
 ()

1344 
	`¥ötf
 (1, "rmdotÅest\n");

1345 i‡(
	`mkdú
 ("dots") != 0)

1347 
	`¥ötf
 (1, "mkdir dots failed\n");

1348 
	`exô
 ();

1350 i‡(
	`chdú
 ("dots") != 0)

1352 
	`¥ötf
 (1, "chdir dots failed\n");

1353 
	`exô
 ();

1355 i‡(
	`u∆ök
 (".") == 0)

1357 
	`¥ötf
 (1, "rm . worked!\n");

1358 
	`exô
 ();

1360 i‡(
	`u∆ök
 ("..") == 0)

1362 
	`¥ötf
 (1, "rm .. worked!\n");

1363 
	`exô
 ();

1365 i‡(
	`chdú
 ("/") != 0)

1367 
	`¥ötf
 (1, "chdir / failed\n");

1368 
	`exô
 ();

1370 i‡(
	`u∆ök
 ("dots/.") == 0)

1372 
	`¥ötf
 (1, "unlink dots/. worked!\n");

1373 
	`exô
 ();

1375 i‡(
	`u∆ök
 ("dots/..") == 0)

1377 
	`¥ötf
 (1, "unlink dots/.. worked!\n");

1378 
	`exô
 ();

1380 i‡(
	`u∆ök
 ("dots") != 0)

1382 
	`¥ötf
 (1, "unlink dots failed!\n");

1383 
	`exô
 ();

1385 
	`¥ötf
 (1, "rmdot ok\n");

1386 
	}
}

1389 
	$dúfûe
 ()

1391 
fd
;

1393 
	`¥ötf
 (1, "dir vs file\n");

1395 
fd
 = 
	`›í
 ("dúfûe", 
O_CREATE
);

1396 i‡(
fd
 < 0)

1398 
	`¥ötf
 (1, "create dirfile failed\n");

1399 
	`exô
 ();

1401 
	`˛o£
 (
fd
);

1402 i‡(
	`chdú
 ("dirfile") == 0)

1404 
	`¥ötf
 (1, "chdir dirfile succeeded!\n");

1405 
	`exô
 ();

1407 
fd
 = 
	`›í
 ("dirfile/xx", 0);

1408 i‡(
fd
 >= 0)

1410 
	`¥ötf
 (1, "create dirfile/xx succeeded!\n");

1411 
	`exô
 ();

1413 
fd
 = 
	`›í
 ("dúfûe/xx", 
O_CREATE
);

1414 i‡(
fd
 >= 0)

1416 
	`¥ötf
 (1, "create dirfile/xx succeeded!\n");

1417 
	`exô
 ();

1419 i‡(
	`mkdú
 ("dirfile/xx") == 0)

1421 
	`¥ötf
 (1, "mkdir dirfile/xx succeeded!\n");

1422 
	`exô
 ();

1424 i‡(
	`u∆ök
 ("dirfile/xx") == 0)

1426 
	`¥ötf
 (1, "unlink dirfile/xx succeeded!\n");

1427 
	`exô
 ();

1429 i‡(
	`lök
 ("README", "dirfile/xx") == 0)

1431 
	`¥ötf
 (1, "linkÅo dirfile/xx succeeded!\n");

1432 
	`exô
 ();

1434 i‡(
	`u∆ök
 ("dirfile") != 0)

1436 
	`¥ötf
 (1, "unlink dirfile failed!\n");

1437 
	`exô
 ();

1440 
fd
 = 
	`›í
 (".", 
O_RDWR
);

1441 i‡(
fd
 >= 0)

1443 
	`¥ötf
 (1, "open . for writing succeeded!\n");

1444 
	`exô
 ();

1446 
fd
 = 
	`›í
 (".", 0);

1447 i‡(
	`wrôe
 (
fd
, "x", 1) > 0)

1449 
	`¥ötf
 (1, "write . succeeded!\n");

1450 
	`exô
 ();

1452 
	`˛o£
 (
fd
);

1454 
	`¥ötf
 (1, "dir vs file OK\n");

1455 
	}
}

1459 
	$úef
 ()

1461 
i
, 
fd
;

1463 
	`¥ötf
 (1, "empty fileÇame\n");

1466 
i
 = 0; i < 50 + 1; i++)

1468 i‡(
	`mkdú
 ("irefd") != 0)

1470 
	`¥ötf
 (1, "mkdir irefd failed\n");

1471 
	`exô
 ();

1473 i‡(
	`chdú
 ("irefd") != 0)

1475 
	`¥ötf
 (1, "chdir irefd failed\n");

1476 
	`exô
 ();

1479 
	`mkdú
 ("");

1480 
	`lök
 ("README", "");

1481 
fd
 = 
	`›í
 ("", 
O_CREATE
);

1482 i‡(
fd
 >= 0)

1483 
	`˛o£
 (
fd
);

1484 
fd
 = 
	`›í
 ("xx", 
O_CREATE
);

1485 i‡(
fd
 >= 0)

1486 
	`˛o£
 (
fd
);

1487 
	`u∆ök
 ("xx");

1490 
	`chdú
 ("/");

1491 
	`¥ötf
 (1, "empty fileÇame OK\n");

1492 
	}
}

1498 
	$f‹kã°
 ()

1500 
n
, 
pid
;

1502 
	`¥ötf
 (1, "forkÅest\n");

1504 
n
 = 0;Ç < 1000;Ç++)

1506 
pid
 = 
	`f‹k
 ();

1507 i‡(
pid
 < 0)

1509 i‡(
pid
 == 0)

1510 
	`exô
 ();

1513 i‡(
n
 == 1000)

1515 
	`¥ötf
 (1, "fork claimedÅo work 1000Åimes!\n");

1516 
	`exô
 ();

1519 ; 
n
 > 0;Ç--)

1521 i‡(
	`waô
 () < 0)

1523 
	`¥ötf
 (1, "wait stoppedÉarly\n");

1524 
	`exô
 ();

1528 i‡(
	`waô
 () != -1)

1530 
	`¥ötf
 (1, "wait gotÅoo many\n");

1531 
	`exô
 ();

1534 
	`¥ötf
 (1, "forkÅest OK\n");

1535 
	}
}

1538 
	$sbrkã°
 ()

1540 
fds
[2], 
pid
, 
pids
[10], 
µid
;

1541 *
a
, *
b
, *
c
, *
œ°addr
, *
ﬁdbrk
, *
p
, 
s¸©ch
;

1542 
uöt
 
amt
;

1544 
	`¥ötf
 (
°dout
, "sbrkÅest\n");

1545 
ﬁdbrk
 = 
	`sbrk
 (0);

1548 
a
 = 
	`sbrk
 (0);

1549 
i
;

1550 
i
 = 0; i < 5000; i++)

1552 
b
 = 
	`sbrk
 (1);

1553 i‡(
b
 !
a
)

1555 
	`¥ötf
 (
°dout
, "sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1556 
	`exô
 ();

1558 *
b
 = 1;

1559 
a
 = 
b
 + 1;

1561 
pid
 = 
	`f‹k
 ();

1562 i‡(
pid
 < 0)

1564 
	`¥ötf
 (
°dout
, "sbrkÅest fork failed\n");

1565 
	`exô
 ();

1567 
c
 = 
	`sbrk
 (1);

1568 
c
 = 
	`sbrk
 (1);

1569 i‡(
c
 !
a
 + 1)

1571 
	`¥ötf
 (
°dout
, "sbrkÅest failedÖost-fork\n");

1572 
	`exô
 ();

1574 i‡(
pid
 == 0)

1575 
	`exô
 ();

1576 
	`waô
 ();

1579 
	#BIG
 (100*1024*1024)

	)

1580 
a
 = 
	`sbrk
 (0);

1581 
amt
 = (
BIG
Ë- (
uöt
Ë
a
;

1582 
p
 = 
	`sbrk
 (
amt
);

1583 i‡(
p
 !
a
)

1585 
	`¥ötf
 (
°dout
,

1587 
	`exô
 ();

1589 
œ°addr
 = (*Ë(
BIG
 - 1);

1590 *
œ°addr
 = 99;

1593 
a
 = 
	`sbrk
 (0);

1594 
c
 = 
	`sbrk
 (-4096);

1595 i‡(
c
 == (*) 0xffffffff)

1597 
	`¥ötf
 (
°dout
, "sbrk couldÇot deallocate\n");

1598 
	`exô
 ();

1600 
c
 = 
	`sbrk
 (0);

1601 i‡(
c
 !
a
 - 4096)

1603 
	`¥ötf
 (
°dout
,

1604 "sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
,

1605 
c
);

1606 
	`exô
 ();

1610 
a
 = 
	`sbrk
 (0);

1611 
c
 = 
	`sbrk
 (4096);

1612 i‡(
c
 !
a
 || 
	`sbrk
 (0) !=á + 4096)

1614 
	`¥ötf
 (
°dout
, "sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1615 
	`exô
 ();

1617 i‡(*
œ°addr
 == 99)

1620 
	`¥ötf
 (
°dout
, "sbrk de-allocation didn'tÑeally deallocate\n");

1621 
	`exô
 ();

1624 
a
 = 
	`sbrk
 (0);

1625 
c
 = 
	`sbrk
 (-(sbrk (0Ë- 
ﬁdbrk
));

1626 i‡(
c
 !
a
)

1628 
	`¥ötf
 (
°dout
, "sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1629 
	`exô
 ();

1633 
a
 = (*Ë(
KERNBASE
);á < (*) (KERNBASE + 2000000);

1634 
a
 += 50000)

1636 
µid
 = 
	`gëpid
 ();

1637 
pid
 = 
	`f‹k
 ();

1638 i‡(
pid
 < 0)

1640 
	`¥ötf
 (
°dout
, "fork failed\n");

1641 
	`exô
 ();

1643 i‡(
pid
 == 0)

1645 
	`¥ötf
 (
°dout
, "o›†couldÑód %x = %x\n", 
a
, *a);

1646 
	`kûl
 (
µid
);

1647 
	`exô
 ();

1649 
	`waô
 ();

1654 i‡(
	`pùe
 (
fds
) != 0)

1656 
	`¥ötf
 (1, "pipe() failed\n");

1657 
	`exô
 ();

1659 
i
 = 0; i <  (
pids
) /  (pids[0]); i++)

1661 i‡((
pids
[
i
] = 
	`f‹k
 ()) == 0)

1664 
	`sbrk
 (
BIG
 - (
uöt
) sbrk (0));

1665 
	`wrôe
 (
fds
[1], "x", 1);

1668 
	`¶ìp
 (1000);

1670 i‡(
pids
[
i
] != -1)

1671 
	`ªad
 (
fds
[0], &
s¸©ch
, 1);

1675 
c
 = 
	`sbrk
 (4096);

1676 
i
 = 0; i <  (
pids
) /  (pids[0]); i++)

1678 i‡(
pids
[
i
] == -1)

1680 
	`kûl
 (
pids
[
i
]);

1681 
	`waô
 ();

1683 i‡(
c
 == (*) 0xffffffff)

1685 
	`¥ötf
 (
°dout
, "failed sbrkÜeaked memory\n");

1686 
	`exô
 ();

1689 i‡(
	`sbrk
 (0Ë> 
ﬁdbrk
)

1690 
	`sbrk
 (-(sbrk (0Ë- 
ﬁdbrk
));

1692 
	`¥ötf
 (
°dout
, "sbrkÅest OK\n");

1693 
	}
}

1696 
	$vÆid©eöt
 (*
p
)

1698 
ªs
;

1699 
	`asm
 ("mov %%esp, %%ebx\n\t" "mov %3, %%esp\n\t" "int %2\n\t" "mov %%ebx, %%esp":

1700 "˜" (
ªs
):

1701 "a" (
SYS_¶ìp
), "n" (
T_SYSCALL
), "c" (
p
):

1703 
	}
}

1706 
	$vÆid©ëe°
 ()

1708 
hi
, 
pid
;

1709 
uöt
 
p
;

1711 
	`¥ötf
 (
°dout
, "validateÅest\n");

1712 
hi
 = 1100 * 1024;

1714 
p
 = 0;Ö <(
uöt
Ë
hi
;Ö += 4096)

1716 i‡((
pid
 = 
	`f‹k
 ()) == 0)

1719 
	`vÆid©eöt
 ((*Ë
p
);

1720 
	`exô
 ();

1722 
	`¶ìp
 (0);

1723 
	`¶ìp
 (0);

1724 
	`kûl
 (
pid
);

1725 
	`waô
 ();

1728 i‡(
	`lök
 ("nosuchfûe", (*Ë
p
) != -1)

1730 
	`¥ötf
 (
°dout
, "link shouldÇot succeed\n");

1731 
	`exô
 ();

1735 
	`¥ötf
 (
°dout
, "validate ok\n");

1736 
	}
}

1739 
	gunöô
[10000];

1741 
	$bs°e°
 ()

1743 
i
;

1745 
	`¥ötf
 (
°dout
, "bssÅest\n");

1746 
i
 = 0; i <  (
unöô
); i++)

1748 i‡(
unöô
[
i
] != '\0')

1750 
	`¥ötf
 (
°dout
, "bssÅest failed\n");

1751 
	`exô
 ();

1754 
	`¥ötf
 (
°dout
, "bssÅest ok\n");

1755 
	}
}

1761 
	$big¨gã°
 ()

1763 
pid
, 
fd
;

1765 
	`u∆ök
 ("bigarg-ok");

1766 
pid
 = 
	`f‹k
 ();

1767 i‡(
pid
 == 0)

1769 *
¨gs
[
MAXARG
];

1770 
i
;

1771 
i
 = 0; i < 
MAXARG
 - 1; i++)

1772 
¨gs
[
i
] =

1774 
¨gs
[
MAXARG
 - 1] = 0;

1775 
	`¥ötf
 (
°dout
, "bigargÅest\n");

1776 
	`exec
 ("echo", 
¨gs
);

1777 
	`¥ötf
 (
°dout
, "bigargÅest ok\n");

1778 
fd
 = 
	`›í
 ("big¨g-ok", 
O_CREATE
);

1779 
	`˛o£
 (
fd
);

1780 
	`exô
 ();

1782 i‡(
pid
 < 0)

1784 
	`¥ötf
 (
°dout
, "bigargtest: fork failed\n");

1785 
	`exô
 ();

1787 
	`waô
 ();

1788 
fd
 = 
	`›í
 ("bigarg-ok", 0);

1789 i‡(
fd
 < 0)

1791 
	`¥ötf
 (
°dout
, "bigargÅest failed!\n");

1792 
	`exô
 ();

1794 
	`˛o£
 (
fd
);

1795 
	`u∆ök
 ("bigarg-ok");

1796 
	}
}

1801 
	$fsfuŒ
 ()

1803 
nfûes
;

1804 
fsblocks
 = 0;

1806 
	`¥ötf
 (1, "fsfullÅest\n");

1808 
nfûes
 = 0;;Çfiles++)

1810 
«me
[64];

1811 
«me
[0] = 'f';

1812 
«me
[1] = '0' + 
nfûes
 / 1000;

1813 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1814 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1815 
«me
[4] = '0' + (
nfûes
 % 10);

1816 
«me
[5] = '\0';

1817 
	`¥ötf
 (1, "wrôög %s\n", 
«me
);

1818 
fd
 = 
	`›í
 (
«me
, 
O_CREATE
 | 
O_RDWR
);

1819 i‡(
fd
 < 0)

1821 
	`¥ötf
 (1, "›í %†Áûed\n", 
«me
);

1824 
tŸÆ
 = 0;

1827 
cc
 = 
	`wrôe
 (
fd
, 
buf
, 512);

1828 i‡(
cc
 < 512)

1830 
tŸÆ
 +
cc
;

1831 
fsblocks
++;

1833 
	`¥ötf
 (1, "wrŸê%d byãs\n", 
tŸÆ
);

1834 
	`˛o£
 (
fd
);

1835 i‡(
tŸÆ
 == 0)

1839 
nfûes
 >= 0)

1841 
«me
[64];

1842 
«me
[0] = 'f';

1843 
«me
[1] = '0' + 
nfûes
 / 1000;

1844 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1845 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1846 
«me
[4] = '0' + (
nfûes
 % 10);

1847 
«me
[5] = '\0';

1848 
	`u∆ök
 (
«me
);

1849 
nfûes
--;

1852 
	`¥ötf
 (1, "fsfullÅest finished\n");

1853 
	}
}

1855 
	gønd°©e
 = 1;

1857 
	$ønd
 ()

1859 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1860  
ønd°©e
;

1861 
	}
}

1864 
	$maö
 (
¨gc
, *
¨gv
[])

1866 
	`¥ötf
 (1, "usertests starting\n");

1868 i‡(
	`›í
 ("usertests.ran", 0) >= 0)

1870 
	`¥ötf
 (1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1871 
	`exô
 ();

1873 
	`˛o£
 (
	`›í
 ("u£πe°s.øn", 
O_CREATE
));

1875 
	`big¨gã°
 ();

1876 
	`bigwrôe
 ();

1877 
	`big¨gã°
 ();

1878 
	`bs°e°
 ();

1879 
	`sbrkã°
 ();

1880 
	`vÆid©ëe°
 ();

1882 
	`›íã°
 ();

1883 
	`wrôëe°
 ();

1884 
	`wrôëe°1
 ();

1885 
	`¸óãã°
 ();

1887 
	`mem
 ();

1888 
	`pùe1
 ();

1889 
	`¥ìm±
 ();

1890 
	`exôwaô
 ();

1892 
	`rmdŸ
 ();

1893 
	`fouπìn
 ();

1894 
	`bigfûe
 ();

1895 
	`subdú
 ();

1896 
	`c⁄¸óã
 ();

1897 
	`löku∆ök
 ();

1898 
	`lökã°
 ();

1899 
	`u∆ökªad
 ();

1900 
	`¸óãdñëe
 ();

1901 
	`twofûes
 ();

1902 
	`sh¨edfd
 ();

1903 
	`dúfûe
 ();

1904 
	`úef
 ();

1905 
	`f‹kã°
 ();

1906 
	`bigdú
 ();

1908 
	`exe˘e°
 ();

1910 
	`exô
 ();

1911 
	}
}

	@vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"defs.h
"

4 
	~"x86.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"ñf.h
"

10 
d©a
[];

11 
pde_t
 *
	gkpgdú
;

12 
£gdesc
 
	ggdt
[
NSEGS
];

17 
	$£göô
 ()

19 
˝u
 *
c
;

25 
c
 = &
˝us
[
	`˝unum
 ()];

26 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
 (
STA_X
 | 
STA_R
, 0, 0xffffffff, 0);

27 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
 (
STA_W
, 0, 0xffffffff, 0);

28 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
 (
STA_X
 | 
STA_R
, 0, 0xffffffff, 
DPL_USER
);

29 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
 (
STA_W
, 0, 0xffffffff, 
DPL_USER
);

32 
c
->
gdt
[
SEG_KCPU
] = 
	`SEG
 (
STA_W
, &c->
˝u
, 8, 0);

34 
	`lgdt
 (
c
->
gdt
,  (c->gdt));

35 
	`lﬂdgs
 (
SEG_KCPU
 << 3);

38 
˝u
 = 
c
;

39 
¥oc
 = 0;

40 
	}
}

45 
±e_t
 *

46 
	$wÆkpgdú
 (
pde_t
 * 
pgdú
, c⁄° *
va
, 
Æloc
)

48 
pde_t
 *
pde
;

49 
±e_t
 *
pgèb
;

51 
pde
 = &
pgdú
[
	`PDX
 (
va
)];

52 i‡(*
pde
 & 
PTE_P
)

54 
pgèb
 = (
±e_t
 *Ë
	`p2v
 (
	`PTE_ADDR
 (*
pde
));

58 i‡(!
Æloc
 || (
pgèb
 = (
±e_t
 *Ë
	`kÆloc
 ()) == 0)

61 
	`mem£t
 (
pgèb
, 0, 
PGSIZE
);

65 *
pde
 = 
	`v2p
 (
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

67  &
pgèb
[
	`PTX
 (
va
)];

68 
	}
}

74 
	$m≠∑ges
 (
pde_t
 * 
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
)

76 *
a
, *
œ°
;

77 
±e_t
 *
±e
;

79 
a
 = (*Ë
	`PGROUNDDOWN
 ((
uöt
Ë
va
);

80 
œ°
 = (*Ë
	`PGROUNDDOWN
 (((
uöt
Ë
va
Ë+ 
size
 - 1);

83 i‡((
±e
 = 
	`wÆkpgdú
 (
pgdú
, 
a
, 1)) == 0)

85 i‡(*
±e
 & 
PTE_P
)

86 
	`∑nic
 ("remap");

87 *
±e
 = 
∑
 | 
≥rm
 | 
PTE_P
;

88 i‡(
a
 =
œ°
)

90 
a
 +
PGSIZE
;

91 
∑
 +
PGSIZE
;

94 
	}
}

119 
	skm≠


121 *
	mvút
;

122 
uöt
 
	mphys_°¨t
;

123 
uöt
 
	mphys_íd
;

124 
	m≥rm
;

125 } 
	gkm≠
[] =

128 (*Ë
KERNBASE
, 0, 
EXTMEM
, 
PTE_W
},

130 (*Ë
KERNLINK
, 
V2P
 (KERNLINK), V2P (
d©a
), 0},

132 (*Ë
d©a
, 
V2P
 (d©a), 
PHYSTOP
, 
PTE_W
},

134 (*Ë
DEVSPACE
, DEVSPACE, 0, 
PTE_W
},

138 
pde_t
 *

139 
	$£tupkvm
 ()

141 
pde_t
 *
pgdú
;

142 
km≠
 *
k
;

144 i‡((
pgdú
 = (
pde_t
 *Ë
	`kÆloc
 ()) == 0)

146 
	`mem£t
 (
pgdú
, 0, 
PGSIZE
);

147 i‡(
	`p2v
 (
PHYSTOP
Ë> (*Ë
DEVSPACE
)

148 
	`∑nic
 ("PHYSTOPÅoo high");

149 
k
 = 
km≠
; k < &km≠[
	`NELEM
 (kmap)]; k++)

150 i‡(
	`m≠∑ges
 (
pgdú
, 
k
->
vút
, k->
phys_íd
 - k->
phys_°¨t
,

151 (
uöt
Ë
k
->
phys_°¨t
, k->
≥rm
) < 0)

153  
pgdú
;

154 
	}
}

159 
	$kvmÆloc
 ()

161 
kpgdú
 = 
	`£tupkvm
 ();

162 
	`swôchkvm
 ();

163 
	}
}

168 
	$swôchkvm
 ()

170 
	`l¸3
 (
	`v2p
 (
kpgdú
));

171 
	}
}

175 
	$swôchuvm
 (
¥oc
 *
p
)

177 
	`push˛i
 ();

178 
˝u
->
gdt
[
SEG_TSS
] = 
	`SEG16
 (
STS_T32A
, &˝u->
ts
,  (cpu->ts) - 1, 0);

179 
˝u
->
gdt
[
SEG_TSS
].
s
 = 0;

180 
˝u
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

181 
˝u
->
ts
.
e•0
 = (
uöt
Ë
¥oc
->
k°ack
 + 
KSTACKSIZE
;

182 
	`…r
 (
SEG_TSS
 << 3);

183 i‡(
p
->
pgdú
 == 0)

184 
	`∑nic
 ("switchuvm:ÇoÖgdir");

185 
	`l¸3
 (
	`v2p
 (
p
->
pgdú
));

186 
	`p›˛i
 ();

187 
	}
}

192 
	$öôuvm
 (
pde_t
 * 
pgdú
, *
öô
, 
uöt
 
sz
)

194 *
mem
;

196 i‡(
sz
 >
PGSIZE
)

197 
	`∑nic
 ("inituvm: moreÅhanáÖage");

198 
mem
 = 
	`kÆloc
 ();

199 
	`mem£t
 (
mem
, 0, 
PGSIZE
);

200 
	`m≠∑ges
 (
pgdú
, 0, 
PGSIZE
, 
	`v2p
 (
mem
), 
PTE_W
 | 
PTE_U
);

201 
	`memmove
 (
mem
, 
öô
, 
sz
);

202 
	}
}

207 
	$lﬂduvm
 (
pde_t
 * 
pgdú
, *
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

209 
uöt
 
i
, 
∑
, 
n
;

210 
±e_t
 *
±e
;

212 i‡((
uöt
Ë
addr
 % 
PGSIZE
 != 0)

213 
	`∑nic
 ("loaduvm:áddr must beÖageáligned");

214 
i
 = 0; i < 
sz
; i +
PGSIZE
)

216 i‡((
±e
 = 
	`wÆkpgdú
 (
pgdú
, 
addr
 + 
i
, 0)) == 0)

217 
	`∑nic
 ("loaduvm:áddress shouldÉxist");

218 
∑
 = 
	`PTE_ADDR
 (*
±e
);

219 i‡(
sz
 - 
i
 < 
PGSIZE
)

220 
n
 = 
sz
 - 
i
;

222 
n
 = 
PGSIZE
;

223 i‡(
	`ªadi
 (
ù
, 
	`p2v
 (
∑
), 
off£t
 + 
i
, 
n
) !=Ç)

227 
	}
}

232 
	$Ælocuvm
 (
pde_t
 * 
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

234 *
mem
;

235 
uöt
 
a
;

237 i‡(
√wsz
 >
KERNBASE
)

239 i‡(
√wsz
 < 
ﬁdsz
)

240  
ﬁdsz
;

242 
a
 = 
	`PGROUNDUP
 (
ﬁdsz
);

243 ; 
a
 < 
√wsz
;á +
PGSIZE
)

245 
mem
 = 
	`kÆloc
 ();

246 i‡(
mem
 == 0)

248 
	`˝rötf
 ("allocuvm out of memory\n");

249 
	`dóŒocuvm
 (
pgdú
, 
√wsz
, 
ﬁdsz
);

252 
	`mem£t
 (
mem
, 0, 
PGSIZE
);

253 
	`m≠∑ges
 (
pgdú
, (*Ë
a
, 
PGSIZE
, 
	`v2p
 (
mem
), 
PTE_W
 | 
PTE_U
);

255  
√wsz
;

256 
	}
}

263 
	$dóŒocuvm
 (
pde_t
 * 
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

265 
±e_t
 *
±e
;

266 
uöt
 
a
, 
∑
;

268 i‡(
√wsz
 >
ﬁdsz
)

269  
ﬁdsz
;

271 
a
 = 
	`PGROUNDUP
 (
√wsz
);

272 ; 
a
 < 
ﬁdsz
;á +
PGSIZE
)

274 
±e
 = 
	`wÆkpgdú
 (
pgdú
, (*Ë
a
, 0);

275 i‡(!
±e
)

276 
a
 +(
NPTENTRIES
 - 1Ë* 
PGSIZE
;

277 i‡((*
±e
 & 
PTE_P
) != 0)

279 
∑
 = 
	`PTE_ADDR
 (*
±e
);

280 i‡(
∑
 == 0)

281 
	`∑nic
 ("kfree");

282 *
v
 = 
	`p2v
 (
∑
);

283 
	`k‰ì
 (
v
);

284 *
±e
 = 0;

287  
√wsz
;

288 
	}
}

293 
	$‰ìvm
 (
pde_t
 * 
pgdú
)

295 
uöt
 
i
;

297 i‡(
pgdú
 == 0)

298 
	`∑nic
 ("freevm:ÇoÖgdir");

299 
	`dóŒocuvm
 (
pgdú
, 
KERNBASE
, 0);

300 
i
 = 0; i < 
NPDENTRIES
; i++)

302 i‡(
pgdú
[
i
] & 
PTE_P
)

304 *
v
 = 
	`p2v
 (
	`PTE_ADDR
 (
pgdú
[
i
]));

305 
	`k‰ì
 (
v
);

308 
	`k‰ì
 ((*Ë
pgdú
);

309 
	}
}

314 
	$˛óΩãu
 (
pde_t
 * 
pgdú
, *
uva
)

316 
±e_t
 *
±e
;

318 
±e
 = 
	`wÆkpgdú
 (
pgdú
, 
uva
, 0);

319 i‡(
±e
 == 0)

320 
	`∑nic
 ("clearpteu");

321 *
±e
 &~
PTE_U
;

322 
	}
}

326 
pde_t
 *

327 
	$c›yuvm
 (
pde_t
 * 
pgdú
, 
uöt
 
sz
)

329 
pde_t
 *
d
;

330 
±e_t
 *
±e
;

331 
uöt
 
∑
, 
i
;

332 *
mem
;

334 i‡((
d
 = 
	`£tupkvm
 ()) == 0)

336 
i
 = 0; i < 
sz
; i +
PGSIZE
)

338 i‡((
±e
 = 
	`wÆkpgdú
 (
pgdú
, (*Ë
i
, 0)) == 0)

339 
	`∑nic
 ("copyuvm:Öte shouldÉxist");

340 i‡(!(*
±e
 & 
PTE_P
))

341 
	`∑nic
 ("copyuvm:ÖageÇotÖresent");

342 
∑
 = 
	`PTE_ADDR
 (*
±e
);

343 i‡((
mem
 = 
	`kÆloc
 ()) == 0)

344 
bad
;

345 
	`memmove
 (
mem
, (*Ë
	`p2v
 (
∑
), 
PGSIZE
);

346 i‡(
	`m≠∑ges
 (
d
, (*Ë
i
, 
PGSIZE
, 
	`v2p
 (
mem
), 
PTE_W
 | 
PTE_U
) < 0)

347 
bad
;

349  
d
;

351 
bad
:

352 
	`‰ìvm
 (
d
);

354 
	}
}

359 
	$uva2ka
 (
pde_t
 * 
pgdú
, *
uva
)

361 
±e_t
 *
±e
;

363 
±e
 = 
	`wÆkpgdú
 (
pgdú
, 
uva
, 0);

364 i‡((*
±e
 & 
PTE_P
) == 0)

366 i‡((*
±e
 & 
PTE_U
) == 0)

368  (*Ë
	`p2v
 (
	`PTE_ADDR
 (*
±e
));

369 
	}
}

375 
	$c›yout
 (
pde_t
 * 
pgdú
, 
uöt
 
va
, *
p
, uöà
Àn
)

377 *
buf
, *
∑0
;

378 
uöt
 
n
, 
va0
;

380 
buf
 = (*Ë
p
;

381 
Àn
 > 0)

383 
va0
 = (
uöt
Ë
	`PGROUNDDOWN
 (
va
);

384 
∑0
 = 
	`uva2ka
 (
pgdú
, (*Ë
va0
);

385 i‡(
∑0
 == 0)

387 
n
 = 
PGSIZE
 - (
va
 - 
va0
);

388 i‡(
n
 > 
Àn
)

389 
n
 = 
Àn
;

390 
	`memmove
 (
∑0
 + (
va
 - 
va0
), 
buf
, 
n
);

391 
Àn
 -
n
;

392 
buf
 +
n
;

393 
va
 = 
va0
 + 
PGSIZE
;

396 
	}
}

	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
 (
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
 (
fd
, 
buf
,  (buf))) > 0)

17 
i
 = 0; i < 
n
; i++)

19 
c
++;

20 i‡(
buf
[
i
] == '\n')

21 
l
++;

22 i‡(
	`°rchr
 (" \r\t\n\v", 
buf
[
i
]))

23 
öw‹d
 = 0;

24 i‡(!
öw‹d
)

26 
w
++;

27 
öw‹d
 = 1;

31 i‡(
n
 < 0)

33 
	`¥ötf
 (1, "wc:ÑeadÉrror\n");

34 
	`exô
 ();

36 
	`¥ötf
 (1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

37 
	}
}

40 
	$maö
 (
¨gc
, *
¨gv
[])

42 
fd
, 
i
;

44 i‡(
¨gc
 <= 1)

46 
	`wc
 (0, "");

47 
	`exô
 ();

50 
i
 = 1; i < 
¨gc
; i++)

52 i‡((
fd
 = 
	`›í
 (
¨gv
[
i
], 0)) < 0)

54 
	`¥ötf
 (1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

55 
	`exô
 ();

57 
	`wc
 (
fd
, 
¨gv
[
i
]);

58 
	`˛o£
 (
fd
);

60 
	`exô
 ();

61 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
 (
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûê("ö %1,%0":"˜" (
d©a
):"d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
 (
p‹t
, *
addr
, 
˙t
)

15 
asm
 vﬁ©ûê("˛d;Ñï in¶":"=D" (
addr
), "=c" (
˙t
):"d" (
p‹t
),

16 "0" (
addr
), "1" (
˙t
):"memory", "cc");

17 
	}
}

19 
ölöe
 

20 
	$outb
 (
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

22 
asm
 vﬁ©ûê("ouà%0,%1"::"a" (
d©a
), "d" (
p‹t
));

23 
	}
}

25 
ölöe
 

26 
	$outw
 (
ush‹t
 
p‹t
, ush‹à
d©a
)

28 
asm
 vﬁ©ûê("ouà%0,%1"::"a" (
d©a
), "d" (
p‹t
));

29 
	}
}

31 
ölöe
 

32 
	$out¶
 (
p‹t
, c⁄° *
addr
, 
˙t
)

34 
asm
 vﬁ©ûê("˛d;Ñï out¶":"=S" (
addr
), "=c" (
˙t
):"d" (
p‹t
),

35 "0" (
addr
), "1" (
˙t
):"cc");

36 
	}
}

38 
ölöe
 

39 
	$°osb
 (*
addr
, 
d©a
, 
˙t
)

41 
asm
 vﬁ©ûê("˛d;Ñï stosb":"=D" (
addr
), "=c" (
˙t
):"0" (addr),

42 "1" (
˙t
), "a" (
d©a
):"memory", "cc");

43 
	}
}

45 
ölöe
 

46 
	$°o¶
 (*
addr
, 
d©a
, 
˙t
)

48 
asm
 vﬁ©ûê("˛d;Ñï sto¶":"=D" (
addr
), "=c" (
˙t
):"0" (addr),

49 "1" (
˙t
), "a" (
d©a
):"memory", "cc");

50 
	}
}

52 
	g£gdesc
;

54 
ölöe
 

55 
	$lgdt
 (
£gdesc
 *
p
, 
size
)

57 vﬁ©ûê
ush‹t
 
pd
[3];

59 
pd
[0] = 
size
 - 1;

60 
pd
[1] = (
uöt
Ë
p
;

61 
pd
[2] = (
uöt
Ë
p
 >> 16;

63 
asm
 vﬁ©ûê("lgdà(%0)"::"r" (
pd
));

64 
	}
}

66 
	gg©edesc
;

68 
ölöe
 

69 
	$lidt
 (
g©edesc
 *
p
, 
size
)

71 vﬁ©ûê
ush‹t
 
pd
[3];

73 
pd
[0] = 
size
 - 1;

74 
pd
[1] = (
uöt
Ë
p
;

75 
pd
[2] = (
uöt
Ë
p
 >> 16;

77 
asm
 vﬁ©ûê("lidà(%0)"::"r" (
pd
));

78 
	}
}

80 
ölöe
 

81 
	$…r
 (
ush‹t
 
£l
)

83 
asm
 vﬁ©ûê("…∏%0"::"r" (
£l
));

84 
	}
}

86 
ölöe
 
uöt


87 
	$ªadeÊags
 ()

89 
uöt
 
eÊags
;

90 
asm
 vﬁ©ûê("pushÊ;Ö›»%0":"Ù" (
eÊags
));

91  
eÊags
;

92 
	}
}

94 
ölöe
 

95 
	$lﬂdgs
 (
ush‹t
 
v
)

97 
asm
 vﬁ©ûê("movw %0, %%gs"::"r" (
v
));

98 
	}
}

100 
ölöe
 

101 
	$˛i
 ()

103 
asm
 volatile ("cli");

104 
	}
}

106 
ölöe
 

107 
	$°i
 ()

109 
asm
 volatile ("sti");

110 
	}
}

112 
ölöe
 
uöt


113 
	$xchg
 (vﬁ©ûê
uöt
 * 
addr
, uöà
√wvÆ
)

115 
uöt
 
ªsu…
;

118 
asm
 vﬁ©ûê("lock; xchg»%0, %1":"+m" (*
addr
),

119 "˜" (
ªsu…
):"1" (
√wvÆ
):"cc");

120  
ªsu…
;

121 
	}
}

123 
ölöe
 
uöt


124 
	$r¸2
 ()

126 
uöt
 
vÆ
;

127 
asm
 vﬁ©ûê("mov»%%¸2,%0":"Ù" (
vÆ
));

128  
vÆ
;

129 
	}
}

131 
ölöe
 

132 
	$l¸3
 (
uöt
 
vÆ
)

134 
asm
 vﬁ©ûê("mov»%0,%%¸3"::"r" (
vÆ
));

135 
	}
}

140 
	så≠‰ame


143 
uöt
 
	medi
;

144 
uöt
 
	mesi
;

145 
uöt
 
	mebp
;

146 
uöt
 
	m€•
;

147 
uöt
 
	mebx
;

148 
uöt
 
	medx
;

149 
uöt
 
	mecx
;

150 
uöt
 
	móx
;

153 
ush‹t
 
	mgs
;

154 
ush‹t
 
	m∑ddög1
;

155 
ush‹t
 
	mfs
;

156 
ush‹t
 
	m∑ddög2
;

157 
ush‹t
 
	mes
;

158 
ush‹t
 
	m∑ddög3
;

159 
ush‹t
 
	mds
;

160 
ush‹t
 
	m∑ddög4
;

161 
uöt
 
	må≠no
;

164 
uöt
 
	mîr
;

165 
uöt
 
	meù
;

166 
ush‹t
 
	mcs
;

167 
ush‹t
 
	m∑ddög5
;

168 
uöt
 
	meÊags
;

171 
uöt
 
	me•
;

172 
ush‹t
 
	mss
;

173 
ush‹t
 
	m∑ddög6
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
 ()

11 i‡(
	`f‹k
 () > 0)

12 
	`¶ìp
 (5);

13 
	`exô
 ();

14 
	}
}

	@
1
.
0
66
500
asm.h
bio.c
bootmain.c
buf.h
cat.c
console.c
defs.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
forktest.c
fs.c
fs.h
grep.c
ide.c
init.c
ioapic.c
kalloc.c
kbd.c
kbd.h
kill.c
lapic.c
ln.c
log.c
ls.c
main.c
memide.c
memlayout.h
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
picirq.c
pipe.c
printf.c
proc.c
proc.h
rm.c
sh.c
spinlock.c
spinlock.h
stat.h
stressfs.c
string.c
syscall.c
syscall.h
sysfile.c
sysproc.c
timer.c
trap.c
traps.h
types.h
uart.c
ulib.c
umalloc.c
user.h
usertests.c
vm.c
wc.c
x86.h
zombie.c
